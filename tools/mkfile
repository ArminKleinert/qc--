# ------------------------------------------------------------------ 
# $Id$ 
# ------------------------------------------------------------------ 

NAME =      ocamlerror

# ------------------------------------------------------------------ 
# paths
# ------------------------------------------------------------------ 

TOP    =    ..
INTERP =    evaluating
DEPEND =    DEPEND

LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man

prefix =    /usr/local

# ------------------------------------------------------------------ 
# (high level) virtual targets
# ------------------------------------------------------------------ 

HTML =          `echo *.nw       | sed 's/\.nw/.html/g;'`
INC  =          `echo *.nw       | sed 's/\.nw/.inc/g;'`

all:V:          ocamlerror      nofake man
all.opt:V:      ocamlerror.opt  nofake man

update:V:       all 
                cp ocamlerror     $BINDIR
                cp ocamlerror.1   $MANDIR/man1
                cp nofake         $BINDIR
                cp nofake.1       $BINDIR
                
update.opt:V:   all.opt
                cp ocamlerror.opt $BINDIR
                cp ocamlerror.1   $MANDIR/man1
                cp nofake         $BINDIR
                cp nofake.1       $BINDIR

dvi:V:          $INC
html:V:         $HTML

man:V:          ocamlerror.1 nofake.1


test:V:         nofake nofake.nw
                ./nofake -Rnofake nofake.nw | diff - nofake 

depend:V:       $DEPEND

clean:V:    
                rm -f *.cmo *.cmi *.cmx *.o
                rm -f *.output
                rm -rf *.ml *.mll *.mli DEPEND 
                rm -rf *.aux *.log *.dvi *.tex *.inc *.toc
                rm -rf *.html
                
clobber:V:      clean
                rm -rf ocamlerror ocamlerror.opt
                rm -rf ocamlerror.pod ocamlerror.1
                rm -rf nofake nofake.1

install:V:      all.opt
                install -s ocamlerror.opt $prefix/bin/ocamlerror
                install    ocamlerror.1   $prefix/man/man1  
                install    nofake         $prefix/bin/nofake
                install    nofake.1       $prefix/man/man1


# ------------------------------------------------------------------ 
# rules and tools for OCaml
# ------------------------------------------------------------------ 

<../config/ocaml.mk
<../config/noweb.mk

# compiler flags used by the rules just included

OCAMLC_FLAGS =  -g -I $LIBDIR
OCAMLO_FLAGS =     -I $LIBDIR

# ------------------------------------------------------------------ 
# important file sets
# ------------------------------------------------------------------ 

ML  =           ocamlscan.ml    \
                ocamlerror.ml   \

MLI =           


SCAN =          $ML $MLI

CMO =           `echo $ML       | sed 's/\.ml/.cmo/g'`
CMX =           `echo $ML       | sed 's/\.ml/.cmx/g'`
OBJ =           `echo $ML       | sed 's/\.ml/.o/g'`

# ------------------------------------------------------------------ 
# building binaries
# ------------------------------------------------------------------ 

CMOLIBS =       str.cma  cllib.cma
CMXLIBS =       str.cmxa cllib.cmxa

ocamlerror:     ocamlscan.cmo ocamlerror.cmo 
		$OCAMLC $OCAMLC_FLAGS -custom -o $target $CMOLIBS $prereq
                

ocamlerror.opt: ocamlscan.cmx ocamlerror.cmx 
		$OCAMLO $OCAMLO_FLAGS         -o $target $CMXLIBS $prereq

nofake:         nofake.nw
                notangle -R$target $prereq > $target
                chmod +x $target

nofake.1:       nofake
                pod2man nofake > nofake.1


# ------------------------------------------------------------------ 
# extra rules for cases not covered by noweb.mk
# ------------------------------------------------------------------ 

ocamlscan.mll:  ocamlerror.nw
                $NOTANGLE -R$target $prereq > $target

ocamlerror.pod: ocamlerror.nw
                $NOTANGLE -R$target $prereq > $target

# ------------------------------------------------------------------ 
# rules to export source code into a world without noweb
# ------------------------------------------------------------------ 

untangle:V:     ocamlerror.pod ocamlerror.1
                nountangle -ml -Rocamlerror.ml ocamlerror.nw > ocamlerror.ml
                nountangle -ml -Rocamlscan.mll ocamlerror.nw > ocamlscan.mll
                nountangle -ml -Rsrcmap.ml  ../cllib/srcmap.nw > srcmap.ml
                nountangle -ml -Rsrcmap.mli ../cllib/srcmap.nw > srcmap.mli

EXPORT =        build.sh srcmap.mli srcmap.ml ocamlscan.mll ocamlerror.ml\
                ocamlerror.pod ocamlerror.1

tar:V:          untangle
                tar zcvf ocamlerror.tar.gz $EXPORT
                                

# ------------------------------------------------------------------ 
# recalculate dependencies
# make sure that generators are run first
# ------------------------------------------------------------------ 

$DEPEND: 	$SCAN
		$OCAMLDEP $SCAN > $DEPEND

# ------------------------------------------------------------------ 
# include dependencies
# ------------------------------------------------------------------ 

<$DEPEND

