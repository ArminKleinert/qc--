
% ------------------------------------------------------------------ 
\section{{\mips} Assembler}
% ------------------------------------------------------------------ 

This assembler emits assembly language for the {\mips} platform. It
implements the [[Asm.assembler]] interface.

The {\mips} assembler uses register masks to specify registers that need
to be saved. I assume that we do not use these but emit code directly
that implements spilling.

<<mipsasm.mli>>=
val make : 
  ('cfg -> (Rtl.rtl -> unit) -> (string -> unit) -> unit) ->
  out_channel -> ('a, 'cfg, 'b, 'c) Proc.t Asm.assembler
  (* pass Cfgutil.emit or Cfgutil.emit *)
@

% ------------------------------------------------------------------ 
\subsection{Name Mangling}
% ------------------------------------------------------------------ 

<<name mangler specification>>=
let spec =
    let reserved = [] in        (* list reserved words here so we can
                                   avoid them *)
    let id = function
        | 'a'..'z'
        | '0'..'9'
        | 'A'..'Z'
        | '_'      -> true
        | _        -> false in
    let replace = function
        | x when id x -> x
        | _           -> '_' 
        in    
            { Mangle.preprocess = (fun x -> x)  
            ; Mangle.replace    = replace
            ; Mangle.reserved   = reserved
            ; Mangle.avoid      = (fun x -> x ^ "_")
            }
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

No suprises here. See the sepecification of the interface in
\module{asm.nw} for the semantics of the public methods.

<<mipsasm.ml>>=
module SM = Strutil.Map

let fprintf = Printf.fprintf
let sprintf = Printf.sprintf
let unimp   = Impossible.unimp
let int64   = Bits.U.to_int64 

<<name mangler specification>>

class ['a, 'b, 'c, 'd] asm emitter fd : [('a, 'b, 'c, 'd) Proc.t] Asm.assembler = 
object (this)
    val         _fd       = fd
    val         _mangle  = (Mangle.mk spec)   
    val mutable _syms    = SM.empty 
    val mutable _section = "bogus section"
    
    method private new_symbol name =
        let s = Symbol.with_mangler _mangle name in
            _syms <- SM.add name s _syms;
            s

    method private print l = List.iter (output_string _fd) l

    <<assembly methods>>
end
let make emitter fd = new asm emitter fd
@ 

% ------------------------------------------------------------------ 
\subsection{Public Methods}
% ------------------------------------------------------------------ 

<<assembly methods>>=
method import s = this#new_symbol s
method local  s = this#new_symbol s

method export s =
    let sym = this#new_symbol s in
    Printf.fprintf _fd ".globl %s\n" sym#mangled_text;
    sym

method label (s: Symbol.t) = 
    fprintf _fd "%s:\n" s#mangled_text

method section name =
    _section <- name;
    fprintf _fd ".%s\n" name

method current  = _section
method org n    = unimp "no .org in mips assembler"

method align  n       = if n <> 1 then fprintf _fd ".align %d\n" n
method addloc n       = if n <> 0 then fprintf _fd ".space %d\n"  n
method zeroes (n:int) = fprintf _fd ".space %d, 0\n" n

method value (v:Bits.bits) = match Bits.width v with
    |  8 -> fprintf _fd ".byte %Ld\n"  (int64 v)
    | 16 -> fprintf _fd ".double %Ld\n" (int64 v)
    | 32 -> fprintf _fd ".word %Ld\n"  (int64 v)
    | w ->  unimp (sprintf "unsupprted width %d in mips assembler" w)

method addr a = match Reloc.Simple.normalize a with
    | None, bits   -> this#value bits
    | Some s, bits -> fprintf _fd ".word %s + %Lx\n" s#mangled_text (int64 bits)

method emit = ()
method comment s = fprintf _fd "/* %s */\n" s
method const (s: Symbol.t) (b:Bits.bits) = 
    fprintf _fd "%s = %Lx" s#mangled_text (int64 b)

method private instruction rtl =
    output_string _fd (Mipsrec.to_string rtl);
    output_string _fd "\n"

method cfg_instr proc  = 
    let cfg    = proc.Proc.cfg
    and symbol = proc.Proc.symbol in
    let label l = this#label (try SM.find l _syms 
                              with Not_found -> this#local l) in
    this#label symbol;
    (emitter cfg (this#instruction) label : unit)
@


