%cg. -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% inc: \usepackage{alltt}

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
%-------------------------------------------------------------------
\section{DFS Linear Scan Register Allocation}
%-------------------------------------------------------------------
The goal of this register allocator is to allocate registers in linear time,
generating as few load and store instructions as possible.
We make two traversals of the cfg; the first traversal determines the order of
the second traversal, which allocates the registers.

This algorithm is very different from graph coloring.
Graph coloring builds up an abstract model of how temps interfere in a procedure.
Our algorithm builds no such representation; instead, liveness information
provides all the information we need to allocate registers.

The important invariant of the graph traversal is that we visit the predecessors of a
node before we visit the node.
Of course, this invariant does not apply to predecessors along backedges.
Also, from join points, we make sure that the information from the allocation of
one predecessor flows to the allocation of the other predecessors.
This information flow allows us to allocate a variable to the same register, so no
extra move instructions are required at the join point.

This algorithm takes its ideas primarily from two sources: linear scan and SSA.
Linear scan register allocation offers the idea of the reverse postorder depth-first
search.
Our contribution is to realize that this graph traversal, coupled only with liveness
information, allows us to treat the graph as if it has the SSA property of static
single-assignment.
Static single-assignment allows us to treat each definition as a separate temp.
Of course, it is a good idea to ensure that if two definitions of a temp are live
into a join point, they should be allocated to the same location; if not, shuffles must
be inserted to place them in the same location.
This behavior at join points is exactly what we would expect from a phi-node in SSA.

Because we take a local, graph-node-by-graph-node perspective, we never spill a temp
unless there are more live temps than registers.
Of course, the big concerns are whether we spill the right temps and whether we have
too many shuffle instructions at join points.
We use preferencing information as heuristics for each of these problems.
More on these later...

%-------------------------------------------------------------------
\section{DFS Linear Scan Register Allocation}
%-------------------------------------------------------------------
Before digging into the algorithm, we have a few shorthands for module names
and some type declarations.
The utilities are largely uninteresting, so we leave their exposition until
later.
<<dls type declarations and utilities>>=
module A  = Automaton
module R  = Register
module RP = Rtl.Private
module Dn = Rtl.Dn
module RU = Rtlutil
module RTD = Runtimedata
module G = Cfgx.M
module IntMod = struct type t = int let compare x y = x - y end
module IS = Set.Make (IntMod)
module IM = Map.Make (IntMod)
module NodeMod = struct
  type t = Rtl.rtl G.node
  let compare n1 n2 = (G.num n1) - (G.num n2)
end
module NM = Map.Make (NodeMod)
module NS = Set.Make (NodeMod)
module RM = R.Map
module RS = R.Set
module SM = Map.Make (struct type t = Rtl.space let compare = RU.Compare.space end)

type reg  = R.t
type rset = R.Set.t
type temp = R.t
<<register utilities>>
<<printers>>
<<varmap module type>>
<<varmap module>>
module VM = OneLocVarMap

<<type declarations>>
<<utilities>>
@
%-------------------------------------------------------------------
\subsection{Variable Maps}
%-------------------------------------------------------------------
The variable map is the fundamental data structure that maps variables to locations
(registers and slots on the stack).
It is a dynamic, unchecked invariant that only temps (not hardware registers) are in
the domain of a variable map.

We have some simple types for temps and locations, and location sets.
<<varmap module type>>=
type tgt = ((Rtl.exp -> Automaton.t), Call.t) Target.t
type loc_pair = { reg : Register.t option; mem : Automaton.loc option }
@
%-------------------------------------------------------------------
\subsubsection{Interface}
%-------------------------------------------------------------------
The variable map supports standard map operations, as well as some unique operations
that help with register allocation.

We have simple constructors to create and empty map, add a temp to a map, and remove a
temp from a map.
<<varmap module type>>=
module type VarMap = sig
  type t
  val empty            : t
  val add_reg          : temp -> Register.t    -> t -> t
  val add_mem          : temp -> Automaton.loc -> t -> t
  val spill            : temp -> Automaton.loc -> t -> t
  val remove_reg       : temp -> Register.t    -> t -> t
  val remove_mem       : temp -> Automaton.loc -> t -> t
@
We can also fold over a map, fold over each location a temp is in (the range), observe
the locations where a temp is stored, observe the temp stored in a register, or print a
map.
<<varmap module type>>=
  val fold             : (temp -> Register.t    -> 'a -> 'a) ->
                         (temp -> Automaton.loc -> 'a -> 'a) -> t -> 'a -> 'a
  val filter           : (temp -> bool) -> t -> t
  val var_locs'        : t -> temp -> loc_pair
  val reg_contents     : t -> reg  -> temp option
  val print            : string -> t -> unit
@
The variable map also provides functions to determine which registers are available at
a given node.
The [[reg_classes]] datatype indicates the availability of registers.
The function [[classify_inregs]] determines which registers are available for the temps
used at a node.
The function [[classify_outregs]] determines which registers are available for the temps
defined at a node.
<<varmap module type>>=
  val free_reg_inregs : rset -> rset -> rset -> t -> rset -> bool -> reg -> bool
  val free_reg_outregs : rset -> rset -> t -> rset -> bool -> reg -> bool
  val alloc_inreg  : reg list -> int -> rset -> rset -> rset -> t -> rset -> bool ->
                     temp -> reg
  val alloc_outreg : reg list -> int -> rset -> rset ->         t -> rset -> bool ->
                     temp -> reg
@
We also provide a function that makes two variable maps consistent.
The first map (the inmap) holds the variable that are live\_in to the node, and the
second map (the outmap) holds the variables that are live\_out of the node.
Because the second map may require spills to be inserted before the node, the maps have
to be synchronized.
<<varmap module type>>=
  val sync_maps        : t -> t -> t * t
end
@
%-------------------------------------------------------------------
\subsubsection{Implementations}
%-------------------------------------------------------------------
We currently have only one implementation of a variable map.
This implementation allows each temp to be stored in only one location at a time.
Our representation keeps a map from temps to locations and register locations to temps
(to facilitate the spilling function, [[reg_contents]]).
<<varmap module>>=
module OneLocVarMap : VarMap = struct
  type t = loc_pair RM.t * temp RM.t
@
The constructors and observers are simple.
<<varmap module>>=
  let empty_pair       = {reg = None; mem = None}
  let def_reg pair r   = {pair with reg = r}
  let def_mem pair m   = {pair with mem = m}
  let pair_map_find    t   m = try RM.find t m with Not_found -> empty_pair
  let upd_pair_map upd t v m = RM.add t (upd (pair_map_find t m) v) m


  let empty            = (RM.empty, RM.empty)
  let remove_reg t r (vm, lm as maps) =
      let lm' = RM.remove r lm in
      try match (RM.find t vm).mem with
          | None   -> (RM.remove t vm, lm')
          | Some m as m'-> (RM.add t {reg = None; mem = m'} vm, lm')
      with Not_found -> Impossible.impossible "DLS: Tried to remove unknown reg"

  let remove_mem t _ (vm, lm as maps) =
      try match (RM.find t vm).reg with
          | None   -> (RM.remove t vm, lm)
          | Some r as r' -> (RM.add t {reg = r'; mem = None} vm, lm)
      with Not_found -> Impossible.impossible "DLS: Tried to remove unknown mem"
@
We allow each temp to be in only one register and one memory location at a time.
There's an interesting time vs. memory tradeoff here:
we could change the remove function such that if it is asked to remove a
temp from a register, it verifies that the [[vm]] map also binds the temp
to the register -- that way, the add function need not change the [[lm]] map,
possibly saving memory.
location of the temp in the [[vm]] map
<<varmap module>>=
  let add_reg t r (vm, lm) =
    try let lp = RM.find t vm in
        let lm' = match lp.reg with
                  | Some r_old -> RM.remove r_old lm
                  | None -> lm in
        (RM.add t {lp with reg = Some r} vm, RM.add r t lm')
    with Not_found -> (RM.add t {reg = Some r; mem = None} vm, RM.add r t lm)

  let add_mem t m (vm, lm) =
    try (RM.add t {(RM.find t vm) with mem = Some m} vm, lm)
    with Not_found -> (RM.add t {reg = None; mem = Some m} vm, lm)

  let spill t m (vm, lm) =
    let fail () = Impossible.impossible "DLS: can not spill temp" in
    try match RM.find t vm with
        | {reg = Some r} -> (RM.add t {reg = None; mem = Some m} vm, RM.remove r lm)
        | _ -> fail ()
    with Not_found -> fail ()

  let var_locs' (vm, _) temp = RM.find temp vm
  let reg_contents (_, lm) reg = try Some (RM.find reg lm) with Not_found -> None
  let fold f_r f_m (vm, _) zero =
    let app f t v z = match v with Some s -> f t s z | None -> z in
    RM.fold (fun t lp z -> app f_m t lp.mem (app f_r t lp.reg z)) vm zero

  let filter f (vm, _ as maps) =
    let remove temp {reg = reg} (vm, lm as maps) =
      if f temp then maps
      else (RM.remove temp vm, match reg with Some r -> RM.remove r lm | None -> lm) in
    RM.fold remove vm maps
@
Printing is easy.
<<varmap module>>=
  let print msg (_, lm as map) =
    ( Printf.eprintf "%s\nOneLocVarMap:\n" msg
    ; fold (fun t (r:Register.t) () -> Printf.eprintf "%s -> %s\n" (printReg t) (printReg r))
           (fun t m () -> Printf.eprintf "%s -> mem_loc\n" (printReg t))
           map ()
    ; Printf.eprintf "  Reverse map:\n"
    ; RM.iter (fun r t -> Printf.eprintf "  %s -> %s\n" (printReg r) (printReg t)) lm
    ; flush stderr
    )
@
If the outmap spills a temp that is assigned to a register in the inmap,
then the spill must happen in the inmap.
Note: We fold over the outmap, with the inmap as the accumulating parameter.
<<varmap module>>=
  let sync_maps inmap (om_vm,_ as outmap) =
    (RM.fold (fun temp loc_pair (im_vm',_ as inmap') ->
                match loc_pair.mem with
                | Some m ->
                  if Aux.Option.is_none (pair_map_find temp im_vm').mem then
                    add_mem temp m inmap'
                  else
                    inmap'
                | None   -> inmap')
             om_vm inmap, outmap)
@
Any registers explicitly allocated to hardware registers are unavailable.
Otherwise, the availability of registers depends on whether they have been assigned to
temps (as shown by the variable map).
<<varmap module>>=
  let free_reg_inregs defs live_in live_out (_, lm) regs_used t_live_past_uses r =
    let not_in set = not (RS.mem r set) in
    not (RM.mem r lm) && not_in regs_used && not_in live_in &&
    not (t_live_past_uses && (RS.mem r defs || RS.mem r live_out))

  let free_reg_outregs defs live_out (_, lm) regs_used _ r =
    let not_in set = not (RS.mem r set) in
    not (RM.mem r lm) && not_in regs_used && not_in defs && not_in live_out


  (* If we have found a register to spill, we may only be able to use it for the
     live-in part of the instruction, or it may be good long-term. *)
  type spill = NoneYet
             | LiveInOnly of Register.t
             | LongTerm   of Register.t
  let alloc_inreg allregs nodenum defs live_in live_out (_, lm)
                  regs_used live_past_use t =
(*printTempList "alloc_outreg allregs: " allregs;
printTempSet "regs_used: " regs_used;
printTempSet "live_out: " live_out;
printTempSet "defs: " defs;
*)
    let rec try_regs rs bst = match rs with
      | [] -> (match bst with LongTerm r -> r | LiveInOnly r -> r
               | NoneYet -> impossf "At node %d, no register available for temp %s"
                                    nodenum (printReg t))
      | r::rs ->
          let liveinonly r = match bst with NoneYet -> LiveInOnly r | _ -> bst in
          let longterm r = match bst with LongTerm _ -> bst | _ -> LongTerm r in
          let not_in set = not (RS.mem r set) in
          if not_in regs_used && not_in live_in &&
                (not live_past_use || not_in live_out && not_in defs) then
            if RM.mem r lm then try_regs rs (longterm r)
            else r
          (* won't be live out: *)
          else if not_in regs_used && not_in live_in then try_regs rs (liveinonly r)
          else try_regs rs bst in
    try_regs allregs NoneYet

  let alloc_outreg allregs nodenum defs live_out (_, lm) regs_used _ t =
(*printTempList "alloc_outreg allregs: " allregs;
printTempSet "regs_used: " regs_used;
printTempSet "live_out: " live_out;
printTempSet "defs: " defs;
*)
    let rec try_regs rs bst = match rs with
      | [] -> (match bst with LongTerm r -> r | LiveInOnly r -> r
               | NoneYet -> impossf "At node %d, no register available for temp %s"
                                    nodenum (printReg t))
      | r::rs ->
          let longterm r = match bst with LongTerm _ -> bst | _ -> LongTerm r in
          let not_in set = not (RS.mem r set) in
          if not_in regs_used && not_in live_out && not_in defs then
            if RM.mem r lm then try_regs rs (longterm r)
            else r
          else try_regs rs bst in
    try_regs allregs NoneYet
end
@

%-------------------------------------------------------------------
\subsection{Preferences}
%-------------------------------------------------------------------

A [[varMap]] maps a temp (temporary register) to a hardware register.
It is a dynamic invariant that the domain of this function contains only
temps and the range includes hardware registers and memory locations.
<<type declarations>>=
type preferences = { varMap : VM.t
                   ; regs   : reg list
                   }
@
Printers are our debugging friends.
<<define [[print_prefs]] to print preferences>>=
let print_prefs msg prefs =
  Printf.eprintf "%s\nPreferences VarMap:\n" msg;
  VM.print "" prefs.varMap;
  Printf.eprintf "Preferences RegQueue:\n";
  List.iter (fun r -> Printf.eprintf "%s " (printReg r)) prefs.regs;
(*
  SM.iter (fun (s,_,_) regs ->
             Printf.eprintf "Space %c: " s;
             List.iter (fun r -> Printf.eprintf "%s " (printReg r)) regs)
    prefs.regs;
*)
  Printf.eprintf "\n" in
@
The preferences come in two forms: the register order and the variable map.
The register order indicates the order in which we assign registers.
The variable map suggests where a variable should be placed (if there is a choice).
We make no assumptions that the input [[alloced_preds]] have already been allocated
(and therefore have useful outmaps) -- this way, the callee doesn't have to allocate
a new list with only the allocated predecessors.

Currently, the choice of predecessor is arbitrary.

THIS IS REALLY BAD: I'M DROPPING THE (USEFUL) PREFERENCE HINTS FROM THE SUCCESSOR

<<updating preferences>>=
let update_pref_varmap state prefs preds =
  let rec use_alloced_pred preds = match preds with
    | [] -> prefs
    | p::_ when is_allocated state p ->
        { prefs with varMap = IM.find (G.num p) state.varOutMaps }
    | p::rst -> use_alloced_pred rst in
  use_alloced_pred preds in

<<define [[avoid]] and [[aim_for]] to decrease or increase the likelihood of choosing a register>>
let update_prefs_at_node prefs node =
  prefs in
(*
  let temp_defs,hw_defs = partition_regs tgt (defs node)                        in
  let app f v z = match v with Some s -> f s z | None -> z in
  let to_avoid =
    RS.fold (fun t rst -> try app RS.add (VM.var_locs' prefs.varMap t).reg rst
                          with Not_found -> rst)
                         temp_defs (RS.inter hw_defs alloc_regset)              in

  (*let get_regs = get_regs prefs.varMap                                          in
  let to_avoid = RS.fold (fun t rst -> List.fold_right RS.add (get_regs t) rst)
                         temp_defs (RS.inter hw_defs alloc_regset)              in
*)

  let vm = match get_copy_regs node with
           | Some (d, s) when is_tmp tgt s ->
               if is_tmp tgt d then 
                  try VM.add_reg s (choose_reg prefs.varMap d) prefs.varMap
                  with Not_found  -> prefs.varMap
               else if RS.mem d alloc_regset then
                 VM.add_reg s d prefs.varMap
               else prefs.varMap
           | _ -> prefs.varMap in
  { regs   = avoid prefs.regs to_avoid
  ; varMap = vm
  } in
 *)
@
After a node has been allocated, we need to update the register queue in the prefs
record.
When a temp expires, we send its register to the front of the queue.
When we allocate a temp to a register, we send that register to the end of the
queue.
Note that this function is called after the node has been rewritten to replace all
temps with hardware registers.
<<updating preferences>>=
let post_update_prefs node prefs outmap =
  prefs in
(*
(*
  print_prefs (Printf.sprintf "Prefs before node %d" (G.num node)) prefs;
  *)
  let live_in  = regs_in_vm tgt outmap (get_live_in  node) in
  let live_out = regs_in_vm tgt outmap (get_live_out node) in
  let defs     = regs_in_vm tgt outmap (defs node) in
  let expired  = (defs ++ live_in) -- live_out in
  let live_out_defs = RS.inter alloc_regset (RS.inter defs live_out) in
  let expired_regs  = RS.inter alloc_regset (expired -- live_out_defs) in
  (*printTempSet "expired_regs"  expired_regs;
  Printf.eprintf "\n";
  printTempSet "live_out_def_regs" live_out_defs;
  Printf.eprintf "\n";
  *)
  let prefs = {prefs with regs = avoid (aim_for prefs.regs expired_regs) live_out_defs} in
  (*
  print_prefs (Printf.sprintf "Prefs after node %d" (G.num node)) prefs;
  *)
  prefs in
*)
@
We decrease the likelihood that a set of registers are selected by moving them to the
end of the queue of registers.
<<define [[avoid]] and [[aim_for]] to decrease or increase the likelihood of choosing a register>>=
(*
let move_regs move reg_map move_map =
  let move_map = separate_set move_map in
  let move_space s regs =
      try let to_move = SM.find s move_map in
          move (diff regs to_move) (RS.elements to_move)
      with Not_found -> regs in
  SM.mapi move_space reg_map in
let avoid   = move_regs (@) in
let aim_for = move_regs (fun a b -> b @ a) in
*)
@

%-------------------------------------------------------------------
\subsection{The Basic Algorithm}
%-------------------------------------------------------------------
The [[state]] is used to pass information as we traverse the flow graph:
\begin{itemize}
\item allocated:  the set of nodes that have been allocated (by node number)
\item spillMap:   a map from a temp to its spill location
\item varInMaps:  a map from a node (by node number) to the varMap representing
                  the location of each temp live\_in to the node
\item varOutMaps: a map from a node (by node number) to the varMap representing
                  the location of each temp live\_out from the node
\end{itemize}
<<type declarations>>=
type state = { allocated  : IS.t
             ; visited    : IS.t
             ; spillMap   : Automaton.loc RM.t
             ; varInMaps  : VM.t IM.t
             ; varOutMaps : VM.t IM.t
             }

@
Find the registers that hold temps from the temporary space [[s]].
<<type declarations>>=
let () = Debug.register "dls-regs" "mapping of registers to temporaries"

let fits =
  if Debug.on "dls-regs" then
    (fun t ((sn, _, _) as s) r ->
       let answer = Target.fits t s r in
       Printf.eprintf "register %s %s space '%c'\n" (RU.ToString.reg r)
         (if answer then "fits" else "does not fit") sn;
       answer)
  else
    Target.fits

type 'a answer = A of 'a

let get_regs_for_space tgt regs s =
  List.filter (fits tgt s) regs
(*
  let fits = fits tgt s in
  let getone r (A good) = if fits r then (A (r :: good)) else A good in
  let getlist key regs good = List.fold_right getone regs good in
  let A result = SM.fold getlist regmap (A []) in
  result
*)


let init_prefs regs = { varMap = VM.empty; regs = regs }
let empty_state =
  { allocated  = IS.empty
  ; visited    = IS.empty
  ; spillMap   = RM.empty
  ; varInMaps  = IM.empty
  ; varOutMaps = IM.empty
  }
@
We need to visit every node in the [[cfg]], which is trickier than one might think:
some nodes are only reachable from the entry node or by reverse pointers from
the exit node.
Since nodes that are reachable only by reverse pointers from the exit node are
unreachable, I first trim the unreachable code.
We still need to deal with nodes that are reachable from the entry node but not from
the exit node.
Furthermore, we need to make sure we always allocate a node's predecessors
before allocating the node.

First, I establish a post-order on the nodes of the graph;
this order includes all nodes, since they are now all reachable from the entry node.
This order is maintained in both a map and a list.
We establish the reverse post-order by reversing the list.

From here on out, we can start the actual graph traversal, following predecessor edges
from the exit node.
Of course, some nodes can not be reached from the exit node, so we have to start
over with them.
We do this easily by taking the reverse post-order list and restarting our graph
traversal from the first node on the list that has not yet been allocated.
Note: we could start with this policy from the very beginning, instead of starting with
the exit node.
<<[[rpo_dfs]] determines the order for visiting nodes>>=
<<define [[print_prefs]] to print preferences>>
<<updating preferences>>
let rpo_dfs state =
  let (_, po_map, po_lst) =
    G.postorder_dfs (fun n (i, map, lst) -> (i+1, NM.add n i map, n::lst))
                    (0, NM.empty, []) cfg                              in
  let rpo_lst = List.rev po_lst in

  (* Pre-condition: node has not been visited. *)
  let rec visit node k (state, prefs) =
      let state = mark_visited state node                                             in
      let prefs = update_prefs_at_node prefs node                                     in
      let preds = G.preds node                                                        in
      let node_num = try NM.find node po_map with Not_found -> 0                   in

      let visit_pred node (state, prefs) k =
        (* THIS DOES SOMETHING SOMEWHAT DUMB AND NOT QUITE WHAT WE WANT *)
        let prefs = update_pref_varmap state prefs preds in
        visit node k (state, prefs) in
      let alloc_curr_node state =
        let state =
          if G.kind node =*= G.Illegal then state
          else
            let state = alloc_node state prefs node in
            (* MAYBE SOME PREFERENCING SHOULD HAPPEN HERE, BUT IS IT THIS?: *)
            (*let prefs =
              post_update_prefs node prefs (IM.find (G.num node) state.varOutMaps) in
            state, prefs in*)
            state in
        k state in

      let visit_preds preds (s, prefs) = (* we pass the same prefs to all preds *)
        let rec loop preds s = match preds with
          | [] -> alloc_curr_node s
          | p::rst when NM.find p po_map > node_num && not (is_visited s p) ->
              visit_pred p (s, prefs) (loop rst)
          | _::rst -> loop rst s in
        loop preds s in
      visit_preds preds (state, prefs) in
  let rec finish rpo_lst state = match rpo_lst with
    | n::rst when is_visited state n -> finish rst state
    | n::rst -> visit n (finish rst) (state, empty_prefs)
    | []     -> state in
  visit (G.exit cfg) (finish rpo_lst) (state, empty_prefs) in
@
<<dls algorithm>>=
let dls () ({Proc.cfg = cfg; Proc.cc = cc; Proc.target = tgt} as proc) =
  ignore (Optimize.trim_unreachable_code () proc);
  if Debug.on "dls" then <<print [[cfg]] plus live-in and live-out sets>>;
  let alloc_regset = cc.Call.volregs ++ cc.Call.pre_nvregs in
  if Debug.on "dls-regs" then
    Printf.eprintf "alloc_regset = { %s }\n" (Register.Set.to_string alloc_regset);
  <<define spill functions>>
  <<define [[buffer_if_succ_is_join]] to insert a nop after instr leading to join>>
  <<definition of shuffle>>
  <<[[choose_varMaps]] finds varIn and varOut maps for a node>>
  <<alloc\_node allocates registers at a single node>>
  let empty_prefs = init_prefs (RS.elements alloc_regset) in
  <<[[rpo_dfs]] determines the order for visiting nodes>>
  let state = rpo_dfs empty_state in
  cleanup   cfg;
  <<add spans for variable locations>>;
  if Debug.on "dls" then <<print [[cfg]] plus live-in and live-out sets>>;
  true
(* Diagnostic:
let dls a proc = time (proc.Proc.symbol#original_text) (dls a) proc
*)
@

To allocate registers at a single node, we follow a simple process:
\begin{enumerate}
\item Find predecessors and successors of [[node]].
\item Choose a varMap for [[node]].
\item Rewrite the instruction to reflect the placement of temps in the varMaps.
\item Insert a shuffle of moves, loads, and stores to settle differences
      between varMaps in adjacent nodes.
\end{enumerate}
<<alloc\_node allocates registers at a single node>>=
let alloc_node state prefs node =
  let state = mark_allocated state node                                          in
  let preds = G.preds node in
  let succs = G.succs node in

  (*Printf.eprintf "dls adding varmap for node %d\n" (G.num node);*)
  let state, varIn, defMap, varOut = choose_varMaps state prefs node preds       in
  let state = set_varIn  state node varIn                                        in
  let state = set_varOut state node varOut                                       in

  let () = rewrite_uses tgt node varIn                                           in
  let () = rewrite_defs tgt node defMap                                          in
  let guarded_shuffle shuffle state n' =
    if is_allocated state n' then shuffle state n' else state in
  let state =
    List.fold_left (guarded_shuffle (fun s p -> shuffle s p node)) state preds in
  let (state, node) = buffer_if_succ_is_join state node in
  let state =
    List.fold_left (guarded_shuffle (fun s n -> shuffle s node n)) state succs in
  let state = {state with allocated = IS.add (G.num node) state.allocated}       in

  (* Not sufficient; doesn't save any time *)
(*
  let free_unused_maps state n =
    let not_all_allocated lst = List.exists (fun p -> not (is_allocated state p)) lst in
    let k = G.kind n in
    if not (is_allocated state n) ||
       G.is_call n || G.is_join n || G.is_fork n || k =*= G.Assertion ||
       k =*= G.Branch || not_all_allocated  (G.preds n) ||
       not_all_allocated  (G.succs n)
    then
       state
    else
      ((*Printf.eprintf "dls removing varmap for node %d\n" (G.num n);*)
       {state with varInMaps  = IM.remove (G.num n) state.varInMaps;
                   varOutMaps = IM.remove (G.num n) state.varOutMaps}) in
  let state = List.fold_left free_unused_maps state preds              in
  List.fold_left free_unused_maps (free_unused_maps state node) succs  in
*) state in
@
Before shuffling with the successors, we have to make sure that if the node is not a
control instruction, its immediate successor is not a join point.
If the successor is a join point, we insert a nop node after the current
node, and we shuffle between the nop and its successors.
That way, we can insert before the nop with impunity, which we could not do with the
original node.
<<define [[buffer_if_succ_is_join]] to insert a nop after instr leading to join>>=
let buffer_if_succ_is_join state node =
  match G.succs node with
  | [succ] when G.is_join succ && not (G.is_cti node) ->
    let varOut = IM.find (G.num node) state.varOutMaps in
    G.set_succ cfg node (G.illegal cfg);
    let n' = G.assertion cfg (Rtl.par []) ~succ in
    G.set_succ cfg node n';
    (set_varOut (set_varIn (mark_allocated state n') n' varOut) n' varOut, n')
  | _ -> (state, node) in
@
We clean up any move instruction where the source register is the same as the
destination register.
We accumulate the list of nodes we intend to delete before deleting them
because we do not want to modify the cfg while traversing it.
<<alloc\_node allocates registers at a single node>>=
let cleanup cfg =
  let visit_node node rst =
    match get_copy_regs node with
    | Some (r1,r2) when Register.eq r1 r2 -> node::rst
    | _                                   -> rst in
  List.iter (Cfgutil.delete cfg) (G.fold_nodes visit_node [] cfg) in
@

[[choose_varMaps]] is responsible for choosing the varMaps in and
out of each node.
This particular version does not do any preferencing.
We begin by gathering some useful information about registers
at the node.
<<[[choose_varMaps]] finds varIn and varOut maps for a node>>=
let choose_varMaps state prefs node preds =
  let defs              = defs node                         in
  let uses              = uses node                         in
  let live_in           = get_live_in  node                 in
  let live_outx         = Cfgx.Live.live_out node in
  let live_out          = R.promote_rxset live_outx in
  let live_out_w_spans  = R.promote_rxset (G.add_live_spans node live_outx) in

  <<define remove\_last\_uses, alloc, initial\_inmap, and alloc\_hw\_regs>>
  let state, inmap = initial_inmap state preds in
  (*<<check pred map invariant>>*)
@
If any temps are in an unavailable register, then we need to spill the temp from that
register.
There is an opportunity for optimization here: even if the temp is not used in this
instruction, we could try to allocate it to a register if there are any free registers.
This optimization would insert a move instruction instead of a store.

<<[[choose_varMaps]] finds varIn and varOut maps for a node>>=
  <<[[choose_register]]>>
  (* We need to spill a hardware register if it is defined *)
  let spill r z =
    if is_tmp tgt r then z else spill_reg (fun t -> RS.mem t live_out_w_spans) z r in
  let (state, inmap) = RS.fold spill defs (state, inmap) in
  let (state, inmap) = alloc_temps alloc_uses state prefs.regs uses inmap in
@
Now, we expire any temps that die at this node and move on to the defs at the node.
<<[[choose_varMaps]] finds varIn and varOut maps for a node>>=
  let midmap = expire_last_uses inmap in
  let (state,outmap) = alloc_temps (alloc_defs inmap) state prefs.regs defs midmap in
@
Here's an interesting case. If we have a def that is never used again, then we must
assign it a register, but we don't want it in the outmap.
So, we have a separate defmap and outmap, where the defmap keeps any dead definitions.
<<[[choose_varMaps]] finds varIn and varOut maps for a node>>=
  let inmap,outmap = VM.sync_maps inmap outmap in
  let defmap = outmap in
  (*VM.print "defmap" outmap;*)
  let outmap = expire_dead_defs outmap in
  (*VM.print "final  inmap" inmap;*)
  (*VM.print "final outmap" outmap;*)
  (*Printf.eprintf "final choose_varMaps called on %s\n" (G.print_node node);*)
  state,inmap,defmap,outmap in
@
In [[expire_last_uses]], the guard supports instructions such as $x := x + y$; where
both x's must be placed in the same register.
It is the expander's responsibility to place the x's in different temps if more
flexibility is desired.
In any case, we still have to remove obsolete memory references from the variable map.
<<define remove\_last\_uses, alloc, initial\_inmap, and alloc\_hw\_regs>>=
let app f v z = match v with Some s -> f s z | None -> z in
let expire_last_uses vm =
  let expire_one t vm =
    if is_tmp tgt t then
      let lp = VM.var_locs' vm t in
      if RS.mem t defs then app (VM.remove_mem t) lp.mem vm
      else if RS.mem t live_out then vm
      else app (VM.remove_reg t) lp.reg vm
    else vm in
  RS.fold expire_one uses vm in
let expire_dead_defs vm =
  let expire_one t vm =
    if is_tmp tgt t && not (RS.mem t live_out) then
      (* THE EXCEPTIONAL CASE SHOULD BE AN IMPOSSIBLE.IMPOSSIBLE *)
      try app (VM.remove_reg t) (VM.var_locs' vm t).reg vm
      with Not_found -> vm
    else vm in
  RS.fold expire_one defs vm in
@
In [[initial_inmap]], we need to find an inmap that will have each live-in variable in
some location.
In an attempt to be fast, we will only take the first predecessor's variable map.
It may be a better idea to combine the maps of each of the predecessors.
If none of the predecessors have allocated a temp, we choose a new location for the
temp, preferring registers, if available.
<<define remove\_last\_uses, alloc, initial\_inmap, and alloc\_hw\_regs>>=
let rec initial_inmap state preds =
  match preds with
  | p::rst when is_allocated state p ->
    let predmap = IM.find (G.num p) state.varOutMaps in
    (state, VM.filter (fun t -> RS.mem t live_in) predmap)
  | _::rst -> initial_inmap state rst
  | [] -> (* uninitialized temps? -- not particularly efficient code here *)
    let alloc_remaining (s,_,_ as t) (state, map, used as z) =
      if is_tmp tgt t then
        let rec loop = function
          | r::rst when RS.mem r used -> loop rst
          | r::rst -> (state, VM.add_reg t r map, RS.add r used)
          | []     -> let state, l = get_spill_loc state t in
                      (state, VM.add_mem t l map, used) in
        loop (get_regs_for_space tgt prefs.regs s)
      else z in
    let (state', inmap, _) =
      RS.fold alloc_remaining live_in (state, VM.empty, live_in) in
    state', inmap in
@
The predecessor's outmap must map each live\_in temp to some location.
<<check pred map invariant>>=
  let () = let check t =
             let fail () = impossf "Live-in temp not in pred's outmap" in
             if is_tmp tgt t then
               try match VM.var_locs' inmap t with
                   | {reg = None; mem = None} -> fail ()
                   | _                        -> ()
               with Not_found -> fail () in
           RS.iter check live_in in
@
%-------------------------------------------------------------------
\subsection{Spilling}
%-------------------------------------------------------------------
Spilling a temp from a register requires that we modify the state in addition to the
varmaps because we may have to set a spill location for the temp.
<<define spill functions>>=
  let get_spill_loc state ((_, _, ms), _, c as temp) =
    try state,RM.find temp state.spillMap
    with Not_found ->
      let l = Automaton.allocate proc.Proc.priv ~width:(Cell.to_width ms c)
                                 ~kind:"" ~align:1 in
      ({state with spillMap = RM.add temp l state.spillMap}, l) in

  let spill state temp map =
    let (state, spill_loc) = get_spill_loc state temp in
    (state, VM.spill temp spill_loc map) in
  let spill_reg guard (state, map) reg =
    match VM.reg_contents map reg with
    | Some t when guard t -> spill state t map
    | _                   -> (state, map) in
@
%-------------------------------------------------------------------
\subsection{Choosing a Register for a Single Temp}
%-------------------------------------------------------------------
<<define allocation functions>>=
  let default_alloc (state, map, regs_used) t =
    let live_past_use = RS.mem t live_out_w_spans in
    let reg = alloc_reg map regs_used live_past_use t in
    let regs_used = RS.add reg regs_used in
    let (state, map) = match VM.reg_contents map reg with
      | Some _ -> let (state, map) = spill_reg true_fun (state, map) reg in
                  (state, VM.add_reg t reg map)
      | None   -> (state, VM.add_reg t reg map) in
    if live_past_use && (RS.mem reg live_out || RS.mem reg defs) then
      let (state,spill_loc) = get_spill_loc state t in
      (state, VM.add_mem t spill_loc map, regs_used)
    else (state, map, regs_used) in
@
Note that by calling [[get_avail_reg]], I am disallowing copies in which the used
temp lives past this node.
Is there a good reason to do this?
I could allocate them to the same register, and as long as I: 1.) have the variable map
remember that multiple temps are in the same register and 2.) when spilling, spill all
temps in the register to separate spill slots (b/c spill slots are allocated by temp
name, not value, and one of the temps may be redefined and spilled, overwriting the
other).
<<define allocation functions>>=
  let get_avail_reg ((state, map, regs_used) as s) t reg fail =
    if free_reg map regs_used (RS.mem t live_out_w_spans) reg then
      (state, VM.add_reg t reg map, RS.add reg regs_used)
    else fail s t in

  (* include preferences *)
  let alloc_prefs state t =
    try get_avail_reg state t (choose_reg prefs.varMap t) default_alloc
    with Not_found -> default_alloc state t in
  (* include copy propagation *)
  let alloc_copy order map state t =
    match get_copy_regs node with
    | Some regs ->
      let (to_alloc, other) = order regs in
      if Register.eq to_alloc t && not (Vfp.is_vfp (RP.Reg other)) then
          try let r = if is_tmp tgt other then choose_reg map other else other in
              get_avail_reg state t r alloc_prefs
          with Not_found -> alloc_prefs state t
      else alloc_prefs state t
    | None  -> alloc_prefs state t in
@
<<[[choose_register]]>>=
  let allocate free_reg order prefmap alloc_reg state to_alloc =
    <<define allocation functions>>
    alloc_copy order prefmap state to_alloc in
  let free_in  = VM.free_reg_inregs  defs live_in live_out in
  let free_out = VM.free_reg_outregs defs live_out in
  let alloc_uses regs =
    allocate free_in  (fun (d,s) -> (s,d)) prefs.varMap
             (VM.alloc_inreg regs (G.num node) defs live_in live_out) in
  let alloc_defs uses_map regs =
    allocate free_out (fun (d,s) -> (d,s)) uses_map
             (VM.alloc_outreg regs (G.num node) defs live_out) in
@
If any temps are in an unavailable register, then we need to spill the temp from that
register.
There is an opportunity for optimization here: even if the temp is not used in this
instruction, we could try to allocate it to a register if there are any free registers.
This optimization would insert a move instruction instead of a store.
<<[[choose_register]]>>=
  let alloc_temps alloc state regs to_alloc map =
    (* I'm valuing the cost of allocation over the cost of verbose code here.... *)
    let fold_alloced f z r vm =
      try  match (VM.var_locs' vm r).reg with None -> z | Some r -> f r z
      with Not_found -> z in
    let regs_used = (* for (t = HW reg), Not_found should suffice *)
      RS.fold (fun t set -> fold_alloced RS.add set t map) to_alloc RS.empty in

    let one_alloc (s,_,_ as r) rst =
      if is_tmp tgt r && fold_alloced (fun _ _ -> false) true r map then
        let regs = get_regs_for_space tgt regs s in
        alloc regs rst r
      else rst in
    let (state, map, _) = RS.fold one_alloc to_alloc (state, map, regs_used) in
    (state, map) in
@
%-------------------------------------------------------------------
\subsection{Shuffling Establishes Consistency}
%-------------------------------------------------------------------
\begin{alltt}
  loads = in succ\_vm, but not in pred\_vm

  moves = in both, but not in same place

  stores = in pred\_vm, but not in succ\_vm; live into succ
\end{alltt}

<<definition of shuffle>>=
<<define [[assign]], [[move]], [[store]], and [[load]]>>
let do_shuffle state moves =
  let rec shuffle state = function
    | []          -> state, []
    | ((t, dst, src) :: rest) as effs ->
        <<definition of [[try_first_effect]]>>
        try_first_effect effs
          (fun (t, dst, src) rest ->
             let mv            = move t dst src in
             let state, shuffs = shuffle state rest in
             state, mv :: shuffs)
          (fun () ->
            (* NOT IDEAL -- SHOULD TRY TO MOVE THROUGH A REG FIRST.... *)
            let state, spill  = store   state t src in
            let state, shuffs = shuffle state rest  in
            let state, reload = load    state t dst in
            state, spill :: shuffs @ [reload]) in
  shuffle state moves in
<<definition of [[try_first_effect]]>>=
let try_first_effect effects succ fail =
  let rec maybe bad = function
    | [] -> fail () (* Circular register moves *)
    | (t, dst, src) :: rest ->
        let alias (_, _, r) = RU.MayAlias.regs dst r in
        if not (List.exists alias bad || List.exists alias rest) then
          succ (t, dst, src) (List.rev_append bad rest)
        else
          maybe ((t, dst, src) :: bad) rest in
  maybe [] effects in
@ 
When we want to insert a shuffle between two nodes, we first have to check whether
we can insert between the nodes.
If not (as in multiway-branch, call, and cut-to instructions), we need to insert loads
and stores before and after the nodes.
<<definition of shuffle>>=
let shuffle state pred succ =
  (*Printf.eprintf "Shuffling pred %d and succ %d\n" (G.num pred) (G.num succ);*)
  let pred_vm   = IM.find (G.num pred) state.varOutMaps in
  let succ_vm   = IM.find (G.num succ) state.varInMaps  in
	(*
  VM.print "pred:" pred_vm;
  VM.print "succ:" succ_vm;
	*)
  <<define [[shuffle_around]] and [[shuffle_between]]>>
  match G.kind pred with
  | G.Mbranch | G.Call | G.CutTo -> shuffle_around state pred succ
  | _                            -> shuffle_between state pred succ in
@
First, we find the temps that are placed inconsistently between the nodes.
We insert the necessary load instructions after the succesor, and
we insert the necessary store instructions before the successor's predecessors.
We also update each variable map that is changed.
<<define [[shuffle_around]] and [[shuffle_between]]>>=
let shuffle_around state pred succ =
  assert (G.is_join succ);
  (*
	 VM.print (Printf.sprintf "\npred %d:" (G.num pred)) pred_vm;
   VM.print (Printf.sprintf "\nsucc %d:" (G.num succ)) succ_vm;
  *)

  let regs temp succ_reg (state, ts, loads as rst) =
    match (VM.var_locs' pred_vm temp).reg with
    | Some r when R.eq r succ_reg -> rst
    | _ -> let state', l = load state temp succ_reg in
           (state', RS.add temp ts, l::loads) in
  let mems temp succ_mem (state, ts, loads as rst) =
    match (VM.var_locs' pred_vm temp).mem with
    | None -> (state, RS.add temp ts, loads)
    | _    -> rst in
  let (state,temps,loads) = VM.fold regs mems succ_vm (state,RS.empty,[]) in

(*let find_inconsistents temp succ_locs rst =
    let pred_regs, pred_mems = part_locs (VM.var_locs pred_vm temp) in
    let mems = not (null pred_mems) in
    List.fold_left
      (fun (state, ts, loads as rst) l -> match l with
         | Mem _ when mems                 -> rst
         | Reg _ when List.mem l pred_regs -> rst
         | Mem _                           -> (state, RS.add temp ts, loads)
         | Reg r                           ->
           let state', l = load state temp r in (state', RS.add temp ts, l::loads))
      rst succ_locs in
  let (state,temps,loads) = VM.fold find_inconsistents succ_vm (state,RS.empty,[]) in
*)
@
We update the successor's variable map to have each inconsistent temp in memory.
<<define [[shuffle_around]] and [[shuffle_between]]>>=
  let succ_vm =
    let app f t v z = match v with Some s -> f t s z | None -> z in
    RS.fold (fun t vm -> let lp = VM.var_locs' vm t in
                         let vm' = app VM.remove_reg t lp.reg vm in
                         VM.add_mem t (RM.find t state.spillMap) vm')
            temps succ_vm in
  let state = set_varIn  state succ succ_vm in
  let state = set_varOut state succ succ_vm in
@
<<define [[shuffle_around]] and [[shuffle_between]]>>=
  (* make the successor consistent *)
  let state, vm_out, nodes' = make_nodes' state succ_vm loads in
  let _ = List.fold_right
            (fun node succ -> (G.splice_after cfg ~entry:node ~exit:node succ ; node))
            nodes' succ in

  (* make the predecessors consistent *)
  (*
  Cfgutil.print_cfg cfg;
  Printf.eprintf "#preds\n";
  List.iter (fun n -> Printf.eprintf "%d " (G.num n)) (G.preds succ);
  Printf.eprintf "\n#allocated preds\n";
  List.iter (fun n -> Printf.eprintf "%d " (G.num n))
            (List.filter (is_allocated state) (G.preds succ));
  Printf.eprintf "\n";
	*)

  let handle_pred state pred =
    let pred_vm = try IM.find (G.num pred) state.varOutMaps
                  with Not_found ->
                    (Cfgutil.print_cfg cfg;
                     Printf.eprintf "node %d; pred %d\n" (G.num succ) (G.num pred);
                     impossf "shuffling: pred node with no outmap") in
		(*
    VM.print (Printf.sprintf "\npred_vm %d:" (G.num pred)) pred_vm;
    VM.print (Printf.sprintf "\nsucc_vm %d:" (G.num succ)) succ_vm;
    printTempSet "pred_live_out\n" (get_live_out pred);
    printTempSet "succ_live_in\n"  (get_live_in  succ);
		*)
    let (state, stores) =
      RS.fold (fun t (state, stores) ->
                 match VM.var_locs' pred_vm t with
                 | {mem = Some _} -> (state, stores)
                 | {reg = Some r} -> let (state', s) = store state t r in
                                     (state', s::stores)
                 | _ -> impossf "Unallocated temp in pred's outmap")
              temps (state, []) in
    let state, pred_vm, nodes' = make_nodes' state pred_vm stores in

    let _ =
      List.fold_right
         (fun node pred -> (G.splice_before cfg ~entry:node ~exit:node pred ; pred))
         nodes' pred in
    (*VM.print "new maps" pred_vm;*)
    set_varIn (set_varOut state pred pred_vm) pred pred_vm in
  List.fold_left handle_pred state (List.filter (is_allocated state) (G.preds succ)) in
@
<<define [[shuffle_around]] and [[shuffle_between]]>>=
let shuffle_between state pred succ =
  let shuffle_err temp =
    impossf "%s %s %s %d %s %d %s %s"
            "DLS register allocator error in shuffle(): Temp" (printReg temp)
            "allocated in succ" (G.num succ) "but not pred" (G.num pred)
            "map in function" (proc.Proc.symbol#original_text) in
  let fail () = VM.print "Pred VM:" pred_vm;
                VM.print "Succ VM:" succ_vm;
                impossf "Varmap has temp in unexpected locations" in
  let regs temp succ_reg (state, ms, ls, ss as state_lsts) =
    match VM.var_locs' pred_vm temp with
    | {reg = Some r} when R.eq succ_reg r -> state_lsts
    | {reg = Some r} -> (state, (temp, succ_reg, r)::ms, ls, ss)
    | {mem = Some m} -> let state', l = load state temp succ_reg in
                        (state', ms, l::ls, ss)
    | {reg = None; mem = None} -> shuffle_err temp in
  let mems temp succ_mem (state, ms, ls, ss as state_lsts) =
    match VM.var_locs' pred_vm temp with
    | {mem = Some m} -> state_lsts
    | {reg = Some r} -> let state', s = store state temp r in
                        (state', ms, ls, s::ss)
    | {reg = None; mem = None} -> shuffle_err temp in
  let state, moves, loads, stores = VM.fold regs mems succ_vm (state,[],[],[]) in
  if null loads && null moves && null stores
  then state
  else
    let state, moves     = do_shuffle state moves                in
    let shuffles         = List.concat [ stores ; moves ; loads] in
    let state, _, nodes' = make_nodes' state pred_vm shuffles    in
    let last =
      List.fold_right
            (fun node pred -> (G.splice_on_every_edge_between cfg ~entry:node ~exit:node
                                                              ~pred ~succ
                              ; node))
            nodes' pred in
    let state, _ = buffer_if_succ_is_join state last in
    state in
@
To reconcile variable maps, we need to create move, store, and load rtl's.
<<define [[assign]], [[move]], [[store]], and [[load]]>>=
let make_reg_empty r vm =
  match VM.reg_contents vm r with
  | Some t -> VM.remove_reg t r vm
  | None   -> vm                 in
let space = Target.space tgt in
let move temp ((_,_,ms),_,c as dst) src =
  let w = Cell.to_width ms c in
  ((fun vm -> VM.add_reg temp dst (make_reg_empty dst vm)),
   [Rtl.store (Rtl.reg dst) (Rtl.fetch (Rtl.reg src) w) w]) in
let store state temp src =
  let state', loc = get_spill_loc state temp in
  (state', ((fun vm -> VM.add_mem temp loc vm),
            tgt.Target.spill  space src loc)) in
let load state temp dst =
  let state', loc = get_spill_loc state temp in
  (state', ((fun vm -> VM.add_reg temp dst (make_reg_empty dst vm)),
            tgt.Target.reload space dst loc)) in
let make_nodes' state start_vm shuffles =
  let rec make_node_lst (s, vm, rst) (upd_vm, rtls) =
    match rtls with (* note: rtls is a list of parallel assts *)
    | [r]    -> let vm' = upd_vm vm                                              in
                let n   = G.instruction cfg r ~succ:(G.illegal cfg)              in
                let s'  = mark_allocated (set_varOut (set_varIn s n vm) n vm') n in
								(*
                Printf.eprintf "on node %d:\n" (G.num n);
                VM.print "vm" vm;
                VM.print "vm'" vm';
								*)
                (s', vm', n::rst)
    | r::rs  -> let n   = G.instruction cfg r ~succ:(G.illegal cfg)              in
                let s'  = mark_allocated (set_varOut (set_varIn s n vm) n vm)  n in
                make_node_lst (s', vm,  n::rst) (upd_vm, rs)
    | []  -> impossf "empty rtl list for load, move, or store"     in
  List.fold_left make_node_lst (state, start_vm, []) shuffles                    in
@
%-------------------------------------------------------------------
\subsection{Variable Maps for the Runtime System}
%-------------------------------------------------------------------
After we have set all the variable maps, we need to propagate them to
the runtime system.
For each span, we replace temporaries with the registers they have been
assigned to.
<<add spans for variable locations>>=
let rewrite_node node =
  let spans = match G.kind node with G.Call | G.Join -> G.spans node
                                   | _               -> None in
  match spans with
  | Some ss ->
      ( Debug.eprintf "dls" "adding dls span for node %d\n" (G.num node);
        let vm = try IM.find (G.num node) state.varInMaps
                 with Not_found ->
                   impossf "DLS: Cannot modify runtime data for unknown node" in
       let rewrite_span l =
         let guard = function RP.Reg r -> is_tmp tgt r | _ -> false in
         let map l = match l with
           | RP.Reg r ->
               (try match VM.var_locs' vm r with
                    | {mem = Some m} -> Dn.loc (Automatonutil.aloc m (Register.width r))
                    | {reg = Some r} -> RP.Reg r
                    | _ -> raise RTD.DeadValue
                with Not_found -> raise RTD.DeadValue)
           | _        -> impossf "DLS reg allocator emitting RT data: guard failed" in
         Rtlutil.Subst.loc_of_loc ~guard ~map l in
       Runtimedata.upd_spans rewrite_span ss)
  | None -> () in
G.iter_nodes rewrite_node cfg
<<dls.ml>>=
let () = Debug.register "dls" "(downstairs) linear-scan register allocator"
@
%-------------------------------------------------------------------
\subsection{Utilities}
%-------------------------------------------------------------------
<<printers>>=
let impossf fmt = Printf.kprintf Impossible.impossible fmt
let indent = "  "
let printTemps iter msg collection =
  Printf.eprintf "%s  {" msg;
  iter (fun t -> Printf.eprintf ", %s%s" indent (printReg t)) collection;
  Printf.eprintf "}\n";
  flush stderr
let printTempSet  = printTemps RS.iter
let printTempList = printTemps List.iter
let printTempMap msg map =
  Printf.eprintf "%s" msg;
  RM.iter (fun t r -> Printf.eprintf "%s%s -> %s\n" indent (printReg t)
                                                           (printReg r)) map;
  flush stderr
@

Simple utilities used for register allocation.
Most of the functions are not even specific to this particular algorithm.
<<register utilities>>=
let printReg ((s,_,_), i, R.C n) =
  if n = 1 then Printf.sprintf "%c%d" s i
  else Printf.sprintf "%c%d:%d" s i n
let true_fun _ = true
let diff  lst set = List.filter (fun r -> not (RS.mem r set)) lst
let inter lst set = List.filter (fun r -> RS.mem r set) lst

exception Evict of Register.t * Register.t
let is_tmp tgt (s,_,_) = Target.is_tmp tgt s
let rem_regs tgt temps = RS.filter (is_tmp tgt) temps
let get_hw_regs tgt temps = RS.filter (fun t -> not (is_tmp tgt t)) temps
let partition_regs tgt temps = RS.partition (is_tmp tgt) temps
let get_copy_regs node =
  match G.to_instr node with
    | Some i ->
      (match Rtlutil.RTLType.singleAssignment i with
       | (Some (r1, r2) as copy) -> copy
       | _                       -> None)
    | None   -> None
let ( ++ ) = RS.union 
let ( -- ) = RS.diff 
let irwk = Rtlutil.ReadWriteKill.sets_promote
let defs node =
  let defs = match G.to_instr node with
  | None   -> RS.empty
  | Some i -> let uses, defs, kills = irwk i in defs ++ kills in
  R.promote_rxset
    (G.union_over_outedges node (fun n -> R.rset_to_rxset defs)
        (fun {G.node = n'; G.defs = d; G.kills = k} ->
           (R.rset_to_rxset (defs ++ d ++ k))))
    
let uses node =
  let uses = match G.to_instr node with
  | None   -> RS.empty
  | Some i -> let uses, defs, kills = irwk i in uses in
  R.promote_rxset (G.add_inedge_uses node (R.rset_to_rxset uses))

let get_live_in  n = R.promote_rxset (Cfgx.Live.live_in  n)
let get_live_out n = R.promote_rxset (Cfgx.Live.live_out n)
@
<<utilities>>=
let null = function [] -> true | _ -> false

let choose_reg vm t =
  match (VM.var_locs' vm t).reg with
  | Some r -> r
  | None   -> raise Not_found

let regs_in_vm tgt vm temps =
  RS.fold (fun t set ->
             if is_tmp tgt t then
               match (VM.var_locs' vm t).reg with Some r -> RS.add r set
                                                | None   -> set
             else RS.add t set)
          temps RS.empty

let is_allocated state node = IS.mem (G.num node) state.allocated
let is_visited   state node = IS.mem (G.num node) state.visited
let mark_allocated state node =
  {state with allocated = IS.add    (G.num node) state.allocated}
let mark_visited state node =
  {state with visited   = IS.add    (G.num node) state.visited}

let set_varIn  state node varIn =
  {state with varInMaps  = IM.add (G.num node) varIn  state.varInMaps}
let set_varOut state node varOut =
  {state with varOutMaps = IM.add (G.num node) varOut state.varOutMaps}

let make_map tgt reg_map reg =
  if is_tmp tgt reg
  then try  choose_reg reg_map reg
       with Not_found ->
         ( VM.print "" reg_map
         ; flush stderr
         ; impossf "DLS: failed to allocate temp %s" (printReg reg)
         )
  else reg

let rewrite_defs tgt node varIn  =
  G.update_instr (Rtlutil.Subst.reg_def ~map:(make_map tgt varIn))  node
let rewrite_uses tgt node varOut =
  G.update_instr (Rtlutil.Subst.reg_use ~map:(make_map tgt varOut)) node

(*(time fn written by John Harrison)*)
let time str f x =
  let start_time = Sys.time()  in
  let result = f x             in
  let finish_time = Sys.time() in
  Printf.eprintf "CPU time (user) used by dls(%s): %f\n"
                 str (finish_time -. start_time);
  result
@
<<print [[cfg]] plus live-in and live-out sets>>=
begin
  Cfgutil.print_cfg cfg;
  G.iter_nodes
    (fun n ->
      let set = Register.SetX.to_string in
      Printf.eprintf
        "%4d live_out = { %s }\n" (G.num n) (set (Cfgx.Live.live_out n));
      Printf.eprintf
        "%4d live_in  = { %s }\n" (G.num n) (set (Cfgx.Live.live_in n)))
    cfg
end
@ 

%-------------------------------------------------------------------
\subsection{Exporting to Lua}
%-------------------------------------------------------------------
Boilerplate for exposing this register allocator to Lua.
<<dls.mli>>=
module Make (BackplaneT : Lua.Lib.TYPEVIEW with type 'a t = 'a Backplane.M.action)
            (ProcT : Lua.Lib.TYPEVIEW with type 'a t = Ast2ir.proc
                                  and type 'a combined = 'a BackplaneT.combined)
       : Lua.Lib.USERCODE with type 'a userdata' = 'a BackplaneT.combined
@
More code for exposing the register allocator to Lua.
<<dls.ml>>=
module Make (BackplaneT : Lua.Lib.TYPEVIEW with type 'a t = 'a Backplane.M.action)
            (ProcT : Lua.Lib.TYPEVIEW with type 'a t = Ast2ir.proc
                                  and type 'a combined = 'a BackplaneT.combined)
       : Lua.Lib.USERCODE with type 'a userdata' = 'a BackplaneT.combined = struct
  type 'a userdata' = 'a BackplaneT.combined
  module M (Interp : Lua.Lib.CORE with type 'a V.userdata' = 'a userdata') = struct

    <<dls type declarations and utilities>>
    <<dls algorithm>>

    module V       = Interp.V
    let proc       = ProcT.makemap V.userdata V.projection
    let ( **-> )   = V.( **-> )
    let stageFn    = V.unit **-> proc **-> V.result V.bool
    let dls_module = [ "dls", V.efunc stageFn dls ]

    let init = Interp.register_module "DLS" dls_module
      (* FIX -- replace with init code *)
  end
end
@
