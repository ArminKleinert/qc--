% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon


% ------------------------------------------------------------------ 
\section{Target Platform Description}
% ------------------------------------------------------------------ 

{\qcc} is a cross compiler:  code can be generated for a target
platform different from the platform the compiler is executed on.  The
target platform can be chosen at run-time of the compiler. 
Consequently, targets must be described by an {\ocaml} value that can
be passed at run-time (rather than by a module, which can not). 

<<target.mli>>=
<<type map>>
<<type cc>>
<<type t>>

<<exported functions>>
val space : ('au, 'cc) t -> Rtl.space -> Space.t
@ 

The [[space]] function returns information about a particular space.
It is a checked run-time error to ask about a space not on the list
for the target.

<<type t>>=
type ('automaton, 'cc) t = { <<components of [[t]]>> }
@

Every target has a descriptive name.
<<components of [[t]]>>=
name: string;
@

A target is described by many small informations like pointer sizes
and one bigger chunk that describe calling conventions.  A single
platform can implement many calling conventions, which are identified
by names.  Calling conventions are not only selected at run-time, we
also intend to construct them at run-time.  For the time being,
however, we will rely on a fixed set of calling conventions.  

% ------------------------------------------------------------------ 
\subsection{Calling Convention}
% ------------------------------------------------------------------ 

A calling convention includes specifications for automata that
implement calling conventions.  In {\PAL} parameters are passed in
three different contexts:  into procedures, into continuations, and
out of both using [[return]].  Therefore, three different
specifications exist.

The [[allocatable]] field is mutable so that it can easily be modified by
a backplane function. This is useful for running tests and specifying a set
of registers.
<<type cc>>=
type 'automaton cc' =      
    { sp:           Rtl.loc         (* stack pointer                      *)
    ; return:       Rtl.rtl         (* machine instr passed to Cfg.return *)
       (* NEEDS TO TAKE ALTS AND INDEX AS PARAMETER *)
    ; proc:         'automaton  (* pass parameter to a procedure      *)
    ; cont:         'automaton  (* pass parameter to a continuation   *)
    ; ret:          'automaton  (* return values                      *)
    ; cutto  : Mflow.cut_args map    (* newpc * newsp map*)
    ; mutable allocatable:  Register.t list (* regs for reg-allocation            *)
    (* THIS TYPE SHOULD INCLUDE INFORMATION ABOUT ALTERNATE RETURN CONTINUATIONS,
       IN PARTICULAR, HOW BIG IS EACH SLOT, AND DOES IT HOLD AN INSTRUCTION OR
       AN ADDRESS? *)
    ; stack_slots:  'automaton (* where private data go *)
    }
@ 
Continuations, spill locations and other private data of a procedures
lives on the run-time stack. These locations are issued by an
[[Automaton2.t]] value. The specification for that automaton is
determined by the calling convention.

To obtain a calling convention, pass its name to the [[cc]] component
which will return the convention response.  It is a checked run-time
error to ask for an unknown calling convention.
WOULD Not\_found BE A BETTER EXCEPTION TO RAISE? THE ERROR MODULE BELONGS
TO THE FRONTEND.

<<components of [[t]]>>=
cc: string -> 'cc; (* raises Error.Exn if name is unknown *)
@ 
Even though the stack pointer depends on the calling convention, the
virtual frame pointer is the same everywhere.
(Its width is target-dependent.)
<<components of [[t]]>>=
vfp : Rtl.exp;   (* the (immutable) virtual frame pointer *)
   (* always equal to Vfp.mk T.pointersize *)
@

% ------------------------------------------------------------------ 
\subsection{Bits and Pieces}
% ------------------------------------------------------------------ 

Many of the following characteristics of a target are more or less
obvious.  A {\PAL} source can name hardware registers for variables. 
The [[register]] component provides the location for a given name.  We
could remember the width for type checking as well but we are wearing
our assembler hats for now.

Field [[alignment]] is the alignment required to load or store a word
of size [[pointersize]].
<<components of [[t]]>>=
byteorder:      Rtl.aggregation   ; (* big/little endian, id *)
wordsize:       int               ; (* bits *)
pointersize:    int               ; (* bits *)
alignment:      int               ; (* alignment of word access *)
memsize:        int               ; (* smallest addressable unit, typically 8 *)
float:          string            ; (* "ieee754" float representation    *)
charset:        string            ; (* "latin1"  character encoding      *)
globals:        'automaton   ; (* Automaton to allocate global vars *)
@

A target has many address spaces:  main memory, different register
sets, temporaries.  A [[Rtl.loc]] value describes a location within
such a space.  Each space is homogeneous in the sense that all its
cells have the same width.  When cells within one space are aggregated,
a common aggregation scheme is used, described by a space-specific
[[Rtl.aggregation]] value.  The cells within a space are addressed by
an integer expression denoting their \emph{address}.  All address
expressions for a space share a common width.  For example, memory
might by addressed by 32-bit wide addresses, registers by 5-bit wide
addresses. 
                
The [[spaces]] list enumerates all spaces used to compile for the
machine, including temporary spaces as well as the real hardware
spaces.
No space appears more than once on the list.
<<components of [[t]]>>=
spaces:          Space.t list;
@

Variable placers may or may not need to distinguish between integer and address spaces,
depending on this flag.
<<components of [[t]]>>=
distinct_addr_sp:  bool;
@

<<components of [[t]]>>=
data_section:   string;          (* ASM section for global regs *)
@

Code goes into the \emph{text} section, memory allocated for global
registers goes into the [[data_section]].

% ------------------------------------------------------------------ 
\subsection{RTLs for the Control-Flow Graph}
% ------------------------------------------------------------------ 

The nodes in the control-flow graph (module \module{cfg}) contain
{\rtl}s.  For example, a [[jump]] node takes an {\rtl} and not an
expression for the target.  The construction of these {\rtl}s is target
specific and so we provide [[embed]] functions in each target.
For debugging of the {\cfg} we also like to re-construct the expressions
from these {\rtl}s.  We provide matching [[project]] functions to obtain
the original expressions \emph{if the supplied {\rtl}s} were constructed
by the construction functions.  Any attempt to do otherwise results in
an unchecked run-time error. 

We can also negate the condition in a conditional-branch by calling
[[bnegate]].

The {\rtl}s do not have to represent machine instructions. It suffices
to create {\rtl}s that the code expander can recognize as jumps, calls,
and so on. 
<<type map>>=
type ('lo, 'hi) map'  = ('lo, 'hi) Ep.map
      = { embed   : 'lo -> 'hi
        ; project : 'hi -> 'lo
        }
type 'a map  = ('a, Rtl.rtl) map'
@
<<components of [[t]]>>=
bnegate:        Rtl.rtl -> Rtl.rtl ;
goto:           Rtl.exp map ;
jump:           Rtl.exp map ;
call:           Rtl.exp map ;
branch:         (Rtl.exp * Rtl.exp) map; (* condition, target *)
                    (* EXPLAIN ARGUMENTS TO THIS FUNCTION *)
@

% ------------------------------------------------------------------ 
\subsection{Identify Special Locations}
% ------------------------------------------------------------------ 

Every target has a global register for the current floating point
rounding mode. The register is handed out by the [[globals]] automaton.
We also provide here, where it can be used to synthesize
floating-point expressions and to identify the rounding modes:
it must always be save to compare [[rounding_mode]] for equality.
<<components of [[t]]>>=
rounding_mode : Rtl.loc;
@

% ------------------------------------------------------------------ 
\subsection{Named Hardware Registers}
% ------------------------------------------------------------------ 

If a target provides names hardware registers, a user can request them
for a global {\PAL} register. A target advertises a map of known
hardware registers. 

<<components of [[t]]>>=
named_locs:    Rtl.loc Strutil.Map.t;
@

% ------------------------------------------------------------------ 
\subsection{Temporaries, Register Allocation}
% ------------------------------------------------------------------ 

The register allocator (see \module{colorgraph.nw}) needs
target-specific informations about hardware registers and temporaries.
In particular:

<<exported functions>>=
val is_tmp : ('au, 'cc) t -> Rtl.space -> bool  (* partially apply me *)
val fits:    ('au, 'cc) t -> Rtl.space -> Register.t -> bool
@
\begin{itemize}
\item [[fits t sp r]] is true, if (hardware) register [[r]] can hold any 
      value from space [[sp]].  It is an unchecked run-time error
      unless [[sp]] is a temporary space from the target~[[t]].

\item [[is_tmp t sp]] is true, if [[sp]] denotes a {\rtl} space that
      holds temporaries.  It should be partially applied for efficiency.
\end{itemize}
@
When the register allocator (see ~module{linscan}) must spill, it has to
create {\rtl}s that move values from registers to memory (spill) and
vice versa (reloads).  Here are two functions to create such {\rtl}s:
THE FIRST ARGUMENT ALMOST CERTAINLY SHOULD BE A [[Proc.t]].
<<components of [[t]]>>=
spill:  (Rtl.space -> Space.t) -> Register.t -> Automaton.loc -> Rtl.rtl list;
reload: (Rtl.space -> Space.t) -> Register.t -> Automaton.loc -> Rtl.rtl list;
@ 
The RTLs should be returned in \emph{execution order}, i.e., the first
element of the list is the first to be executed.  \emph{ALERT! Perhaps
we ought to revisit these interfaces, since the role of the first
argument is baffling. ---NR} 
@

% ------------------------------------------------------------------ 
\subsection{Compatibility with Source Code}
% ------------------------------------------------------------------ 

A {\PAL} source code advertises some target properties that of course
must match the actual target. The expected properties are recorded in
the fat environment (\module{fenv}). The [[check]] function compares an
actual target with the expectations in an environment and 
raises an error exception in case of inconsistencies.

<<target.mli>>=
(*
 * val check: t -> Fenv.Clean.env -> unit  (* Error.ErrorExn *)
 *)
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

The implementation does not hold any surprises. We use module [[Map]]
to implement lookup tables for registers and calling conventions.

<<target.ml>>=
module R       = Rtl
module S       = Space
module RP      = Rtl.Private
<<type map>>
<<type cc>>
<<type t>>

@

<<target.ml>>=
let space t s = List.find (fun x -> x.Space.space = s) t.spaces
@
<<target.ml>>=
let is_tmp { spaces = spaces } =
  List.fold_right
    (fun s rest ->
      match s.Space.classification with
      | Space.Temp _ -> (fun c -> c = s.Space.space || rest c)
      | _ -> rest)
    spaces
    (fun _ -> false)
@ 
<<target.ml>>=
let space_fits tmp =
  match tmp.Space.classification with
  | Space.Temp {Space.stands_for=hw; Space.index_ok=locset} ->
      fun (hw', idx, width) -> hw = hw' && locset idx
  | _ ->
		Impossible.impossible
			("space_fits called on non-temp of space " ^ String.make 1 tmp.Space.space)

let fits t space =
  try
    space_fits (List.find (fun s -> s.Space.space = space) t.spaces)
  with Not_found -> assert false
