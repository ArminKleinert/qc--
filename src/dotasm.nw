
% ------------------------------------------------------------------ 
\section{Assembler Interface to DOT}
% ------------------------------------------------------------------ 

This module implements an assembler that emits every procedure as a
graph in \textsc{dot} format.

<<dotasm.mli>>=
val asm: unit -> Asm3.assembler
@                      

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

Most assembler directives do nothing. We are only interested in the
control-flow-graphs that are part of an instruction. 

<<dotasm.ml>>=
module Asm = Asm3

exception Unsupported of string
let unsupported msg = raise (Unsupported msg)

<<Make>>
let asm () = new asm ()
@


% ------------------------------------------------------------------ 
\subsubsection{Classes for symbols, instructions, and addresses}
% ------------------------------------------------------------------ 


<<Make>>=
class addr: Asm.reladdr = object
    method ast   = unsupported "Dotasm.addr#ast"
    method add x = new addr
    method sub x = new addr
end

class symbol (n:string) : Asm.symbol = object
    method text    = n
    method reladdr = new addr
end
@

% ------------------------------------------------------------------ 
\subsubsection{The assembler class}
% ------------------------------------------------------------------ 

<<Make>>=
class asm () : Asm.assembler =
object (this)
    val mutable _section = "this can't happen"

    (* etc *)
    method reladdr (k:Bits.bits) = new addr

    (* declarations *)
    method import s = new symbol s
    method export s = new symbol s
    method local  s = new symbol s

    (* sections *)
    method section s = _section <- s
    method current   = _section

    (* definitions *)
    method label s   = ()
    method const s b = ()

    (* locations *)

    method org n    = ()
    method align n  = ()
    method addloc n = ()

    (* instructions *)
    method instr (i:Asm.instruction) = 
        print_endline i#text
        

    method zeroes n = ()
    method value v = ()
    method addr  a = ()
    method comment s = ()
    method emit = ()
end



