
\input{../config/macros.tex}

% l2h substitution cfg CFG
% l2h substitution dots ...
% l2h substitution AST AST
% l2h substitution ast AST
% l2h substitution rtl RTL
% l2h substitution ir IR
% l2h substitution noweb NOWEB
% l2h substitution qcc QC--
% l2h substitution C C--
% l2h substitution PAL C--
% l2h substitution pal C--
% l2h substitution asdl ASDL
% l2h substitution ocaml OCaml
% l2h substitution forall forall
% l2h macro module 1 <a href="#$1.html"><tt>#1.nw</tt></a>

% ------------------------------------------------------------------ 
\section{Procedure Intermediate Representation}
% ------------------------------------------------------------------ 

The \module{ast3ir} module translates {\PAL} {\AST} to abstract assembly
code, where each instruction represents an entire procedure. A procedure
is represented by a control-flow graph and some accompanied
informations. This module provides a data type for this intermediate
representation of a procedures.

The data type provided here is in-complete and there will change. The
main purpose of this module is to provide a centralized defintion and
documentation for it.

<<type t>>=
type t = 
    { name:     string              (* of procedure, not mangled *)
    ; cc:       Target2.cc          (* calling convention *)    
    ; cfg:      Cfg3.t              (* control-flow graph *)
    ; mangle:   (string->string)    (* mangler for all names in this type*)
    ; incoming: Area.t              (* stack - incoming area *)
    ; outgoing: Area.t              (* stack - outgoing area *)
    ; stackd:   Area.t              (* stack - user stack data *)
    ; priv:     Automaton.t         (* stack - spill slots etc - still open *)
    ; eqns:     Const.t             (* eqns for compile time consts *)    
    ; mutable frozen:   bool        (* if true, don't touch this! *)
    ; freeze:   (t -> unit)         (* fix stack, final substitutions *)    
    }
@
 
\begin{itemize}
\item [[name]]:     the name of the procedure represented by this.
\item [[cc]]:       calling convention for this procedure.    
\item [[cfg]]:      the control-flow graph of the procedure.
\item [[mangle]]:   if any name present in this data type is emitted to 
                    an assembler it must be mangled with the [[mangle]]
                    function. It ensures, that the syntax of the actual
                    assembler is respeced.

\item [[incoming]]: stack area for incoming parameters.
\item [[outgoing]]: stack area for outgoing parameters.
\item [[stackd]]:   User stack data, from the [[stack data]] construct.
\item [[priv]]:     Automaton that provides register-like \emph{memory}
                    locations for spill slots, continuations, etc. The 
                    memory will be allocated on the stack.
\item [[eqns]]:     Constraints for symbolic compile-time constants.
                    They are introduced by [[Area.t]] values that are
                    concatenated and overlayed to form a procedure's
                    stack frame.
\item [[frozen]]:   If [[true]], don't mutate this value. It indicates,
                    that all final substitutions have been applied to
                    the [[cfg]], thus fixing its stack frame layout.

\item [[freeze]]:   Apply to this value to apply all outstanding
                    substitutions. Causes [[frozen]] to become [[true]].                        
\end{itemize}

<<proc.mli>>=
<<type t>> 
<<proc.ml>>= 
<<type t>> 
@
