% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

\section{SPARC Recognizer}

<<sparcrec.mli>>=
val to_asm : Rtl.rtl -> string
val is_instruction : Rtl.rtl -> bool
@ 

A few abbreviations.
<<modules>>=
module R  = Rtl
module RU = Rtlutil
module RP = Rtl.Private
module SS = Space.Standard32
module Down = Rtl.Dn
module Up   = Rtl.Up
@ 
<<sparcrec.mlb>>=
%head {: <<modules>> 
         <<code to precede the labeler>>
      :}
%tail {: <<code to follow the labeler>>
      :}

%term <<names of types of terminals>>

%%
<<rules>>
@ 

\subsection{Utilities}
<<code to precede the labeler>>=
let cat = String.concat ""
let infinity = Camlburg.inf_cost
let guard b = if b then 0 else infinity

let const32 b =
  assert (Bits.width b = 32);
  Nativeint.to_string (Bits.U.to_native b)

let const64 b =
  assert (Bits.width b = 64);
  let hi32 = Bits.Ops.lobits 32 (Bits.Ops.shrl b (Bits.U.of_int 32 64)) in
  let lo32 = Bits.Ops.lobits 32 b in
  (Nativeint.to_string (Bits.U.to_native hi32),
   Nativeint.to_string (Bits.U.to_native lo32))

exception Error of string
let sprintf   = Printf.sprintf
let error msg = raise (Error msg)

let rspace = ('r', R.BigEndian, Cell.of_size 32)
let spl = RP.Reg(rspace, 14, R.C 1)
let sp  = RP.Fetch(spl, 32)
let ral = RP.Reg(rspace, 31, R.C 1)
let ra  = RP.Fetch(ral, 32)

let idiomatic_reg_name n =
  if n = 14 then "%sp"
  else if n = 30 then "%fp"
  else if n >= 0 && n < 8 then sprintf "%%g%i" n
  else if n < 16 then sprintf "%%o%i" (n - 8)
  else if n < 24 then sprintf "%%l%i" (n - 16)
  else if n < 32 then sprintf "%%i%i" (n - 24)
  else Impossible.impossible (sprintf "Register %%r%i doesn't exist" n)

let positive b = Bits.Ops.gt b (Bits.zero 32)
let negative b = Bits.Ops.lt b (Bits.zero 32)

let in_proc = ref false
@ 

\subsection{Recognizer terminals, nonterminals, and constructors}

<<names of types of terminals>>=
n w bits symbol
@ 

\subsection{Recognizer Rules}

\paragraph{Constants}
<<rules>>=
lconst : Link(symbol, w) {: symbol#mangled_text :}
const  : Bits(b:bits) [{: guard (Bits.width b = 32) :}]  {: const32 b :}
pos    : Bits(b:bits) [{: guard (Bits.width b = 32 && positive b) :}]  {: const32 b :}
neg    : Bits(b:bits) [{: guard (Bits.width b = 32 && negative b) :}]  {: const32 b :}

constx : Bits(b:bits) [{: guard (Bits.width b = 64) :}] {: const64 b :}

four   : Bits(bits)   [{: guard (bits = Bits.S.of_int 4 32) :}] {:():}
one    : Bits(bits)   [{: guard (bits = Bits.S.of_int 1 32) :}] {:():}
@ 

\paragraph{Location Types}
<<rules>>=
rreg   : Fetch(rregl, w) {: rregl :}
rregl  : Reg('r', n:int, w:int) {: idiomatic_reg_name n :}

sreg   : Fetch(sregl, w) {: sregl :}
sregl  : Reg('s', n:int, w:int) {: 
  match n with
  | 0 -> ("%g2", "%g3")
  | 1 -> ("%l0", "%l1")
  | 2 -> ("%l2", "%l3")
  | _ -> Impossible.impossible "Unknown s register" :}

freg   : Fetch(fregl, w) {: fregl :}
fregl  : Reg('f', n:int, w:int) {: sprintf "%%f%i" n :}

xreg   : Fetch(xregl, w) {: xregl :}
xregl  : Reg('x', n:int, w:int)
    {: (sprintf "%%f%i" ((n*2)+8), sprintf "%%f%i" ((n*2)+9)) :}

-- this is stupid, but we don't know how to deal with
-- changing register windows at this point, so this allows
-- us to do an ugly hack.
result_reg   : Fetch(Reg('i', n:int, w:int), w) {: sprintf "%%o%i" n :}
result_regl  : Reg('i', n:int, w:int) {: sprintf "%%i%i" n :}

arg_reg   : Fetch(Reg('o', n:int, w:int), w) {: sprintf "%%i%i" n :}
arg_regl  : Reg('o', n:int, w:int) {: sprintf "%%o%i" n :}

regl : rregl {: rregl :}
regl : result_regl {: result_regl :}
regl : arg_regl {: arg_regl :}

reg : rreg {: rreg :}
reg : result_reg {: result_reg :}
reg : arg_reg {: arg_reg :}

mem   : Fetch(meml, w) {: meml :}
meml  : Mem(reg, w)    {: "[" ^ reg ^ "]" :} -- indirect

reg_or_const : reg   {: reg :}
reg_or_const : const {: const :}

target : lconst {: lconst :}
@ 

\paragraph{Special Locations}
<<rules>>=
pcl:  Reg('c',  0, w:int) {: () :}
npcl: Reg('c',  1, w:int) {: () :}
ccl:  Reg('c',  2, w:int) {: () :}
spl:  Reg('r', 14, w:int) {: () :}
fpl:  Reg('r', 30, w:int) {: () :}
ral:  Reg('r', 31, w:int) {: () :}
cwpl: Reg('k',  0, w:int) {: () :}

pc:  Fetch(pcl,  w) {: () :}
cc:  Fetch(ccl,  w) {: () :}
sp:  Fetch(spl,  w) {: () :}
ra:  Fetch(ral,  w) {: () :}
cwp: Fetch(cwpl, w) {: () :}
@ 

\paragraph{Data movement}
<<rules>>=
-- Seems like the wrong thing to do....
-- should probably be calling fstoi before the move?
inst : Store(dst:regl, Ftoi(src:freg), w)
  {: sprintf "! %s := ftoi(%s)\n\tst %s, [%%sp+%i]\n\tld [%%sp+%i], %s" dst src src (23*4) (23*4) dst :}

inst : Store(dst:fregl, Ftoi(src:freg), w)
  {: sprintf "fstoi %s, %s" src dst :}

-- not sure about this either: fdtoi will it try to
-- store into a register pair?
inst : Store(dst:fregl, Ftoi(src:xreg), w)
  {: sprintf "! dubios ftoi\n\tfdtoi %s, %s" (fst src) dst :}

inst : Store(dst:fregl, Itof(src:reg), w)
  {: sprintf "st %s, [%%sp+%i]\n\tld [%%sp+%i], %s" src (23*4) (23*4) dst :}
inst : Store(dst:fregl, Itof(src:freg), w)
  {: sprintf "fitos %s, %s" src dst :}
inst : Store(dst:xregl, Itof(src:freg), w)
  {: sprintf "fitod %s, %s" src (fst dst) :}

inst : Store(dst:fregl, Ftof(src:freg), w)
  {: sprintf "fmovs %s, %s" src dst :}
inst : Store(dst:xregl, Ftof(src:freg), w)
  {: sprintf "fstod %s, %s" src (fst dst) :}
inst : Store(dst:fregl, Ftof(src:xreg), w)
  {: sprintf "fdtos %s, %s" (fst src) dst :}

-- load symbol
inst : Store(dst:regl, src:lconst, w)
  {: sprintf "set %s, %s" src dst :}

-- load immediate
inst : Store(dst:regl, src:const, w)
  {: sprintf "set %s, %s" src dst :}

inst : Store(dst:sregl, src:constx, w)
  {: let (dst1, dst2) = dst in
     let (src1, src2) = src in
     sprintf "set %s, %s\n\tset %s, %s" src1 dst1 src2 dst2
  :}

inst : Store(dst:sregl, Sparcmkj(x:reg, y:reg), w)
  {: let (dh, dl) = dst in
     sprintf "mov %s, %s\n\tmov %s, %s" x dh y dl :}

-- register move
inst : Store(dst:regl, src:reg, w)
  {: sprintf "mov %s, %s" src dst :}
-- here we start cheating...
inst : Store(dst:fregl, src:reg, w)
  {: sprintf "! cheating move\n\tst %s, [%%sp+%i]\n\tld [%%sp+%i], %s" src (23*4) (23*4) dst :}
inst : Store(dst:regl, src:freg, w)
  {: sprintf "! cheating move\n\tst %s, [%%sp+%i]\n\tld [%%sp+%i], %s" src (23*4) (23*4) dst :}
inst : Store(dst:sregl, src:xreg, w)
  {: let (dst, _) = dst in
     let (src, _) = src in
     sprintf "! cheating move\n\tstd %s, [%%sp+%i]\n\tldd [%%sp+%i], %s" src (24*4) (24*4) dst :}
inst : Store(dst:regl, Loword(src:sreg), w)
  {: let (_, src) = src in
     sprintf "mov %s, %s" src dst :}

inst : Store(dst:sregl, Sparchitolo(x:sreg, y:sreg), w)
  {: let (xh, xl) = x in
     let (yh, yl) = y in (* unnecessary *)
     let (dh, dl) = dst in
     sprintf "! shrl %s, %s, %s\n\tmov %s, %s\n\tmov %%g0, %s" xh yh dh xh dl dh :}

inst : Store(dst:sregl, Sparclotohi(x:sreg, y:sreg), w)
  {: let (xh, xl) = x in
     let (yh, yl) = y in (* unnecessary *)
     let (dh, dl) = dst in
     sprintf "! shl %s, %s, %s\n\tmov %s, %s\n\tmov %%g0, %s" xh yh dh xl dh dl :}

inst : Store(dst:sregl, Zxword(x:reg), w)
  {: sprintf "mov %s, %s\n\tmov %%g0, %s" x (snd dst) (fst dst) :}

-- memory load
inst : Store(dst:regl, src:mem, w)
  {: if w = 64 then sprintf "ldx %s, %s" src dst
     else sprintf "ld %s, %s" src dst :}
inst : Store(dst:regl, Zxbyte(src:mem), w)
  {: sprintf "ldub %s, %s" src dst :}
inst : Store(dst:regl, Zxhalf(src:mem), w)
  {: sprintf "lduh %s, %s" src dst :}
inst : Store(dst:sregl, Zxword(src:mem), w)
  {: let (dh, dl) = dst in
     sprintf "ld %s, %s\n\tset %%g0, %s" src dl dh :}

inst : Store(dst:regl, Sxbyte(src:mem), w)
  {: sprintf "ldsb %s, %s" src dst :}
inst : Store(dst:regl, Sxhalf(src:mem), w)
  {: sprintf "ldsh %s, %s" src dst :}

inst : Store(dst:fregl, src:mem, w)
  {: sprintf "ld %s, %s" src dst :}
inst : Store(dst:xregl, src:mem, w)
  {: sprintf "ldd %s, %s" src (fst dst) :}
inst : Store(dst:sregl, src:mem, w)
  {: sprintf "ldd %s, %s" src (fst dst) :}

-- memory store
inst : Store(dst:meml, src:reg, w)
  {: sprintf "st %s, %s" src dst :}
inst : Store(dst:meml, Lobyte(src:reg), w)
  {: sprintf "stb %s, %s" src dst :}
inst : Store(dst:meml, Lohalf(src:reg), w)
  {: sprintf "sth %s, %s" src dst :}

inst : Store(dst:meml, Loword(src:sreg), w)
  {: let (_, src) = src in
     sprintf "st %s, %s" src dst :}

inst : Store(dst:meml, src:freg, w)
  {: sprintf "st %s, %s" src dst :}
inst : Store(dst:meml, src:xreg, w)
  {: sprintf "std %s, %s" (fst src) dst :}
inst : Store(dst:meml, src:sreg, w)
  {: sprintf "std %s, %s" (fst src) dst :}

-- memory store to offset
-- note that y must be a 13-bit constant...probably need a different
-- rule that can split 32-bit constants.
inst : Store(Mem(Add(x:reg, y:const),mw:w), src:reg, w)
  {: sprintf "st %s, [%s+%s]" src x y :}
inst : Store(Mem(Add(x:reg, y:const),mw:w), src:freg, w)
  {: sprintf "st %s, [%s+%s]" src x y :}
inst : Store(Mem(Add(x:reg, y:const),mw:w), src:sreg, w)
  {: sprintf "std %s, [%s+%s]" (fst src) x y :}
inst : Store(Mem(Add(x:reg, y:const),mw:w), src:xreg, w)
  {: sprintf "std %s, [%s+%s]" (fst src) x y :}

-- memory load from offset
inst : Store(dst:regl, Fetch(Mem(Add(x:reg, y:const), mw:w), w), w)
  {: sprintf "ld [%s+%s], %s" x y dst :}
inst : Store(dst:fregl, Fetch(Mem(Add(x:reg, y:const), mw:w), w), w)
  {: sprintf "ld [%s+%s], %s" x y dst :}

inst : Store(dst:sregl, Fetch(Mem(Add(x:reg, y:const), mw:w), w), w)
  {: sprintf "ldd [%s+%s], %s" x y (fst dst) :}
inst : Store(dst:xregl, Fetch(Mem(Add(x:reg, y:const), mw:w), w), w)
  {: sprintf "ldd [%s+%s], %s" x y (fst dst) :}
@ 

\paragraph{Arithmetic}
<<rules>>=
-- add
inst : Store(dst:regl, Add(x:reg_or_const, y:reg), w)
  {: sprintf "add %s, %s, %s" y x dst :}
inst : Store(dst:regl, Add(x:reg, y:reg_or_const), w)
  {: sprintf "add %s, %s, %s" x y dst :}

-- sub
inst : Store(dst:regl, Sub(x:reg, y:reg_or_const), w)
  {: sprintf "sub %s, %s, %s" x y dst :}

-- mul
inst : Store(dst:regl, Mul(x:reg_or_const, y:reg), w)
  {: sprintf "smul %s, %s, %s" y x dst :}
inst : Store(dst:regl, Mul(x:reg, y:reg_or_const), w)
  {: sprintf "smul %s, %s, %s" x y dst :}

-- quot
inst : Store(dst:regl, Quot(x:reg, y:reg_or_const), w)
  {: sprintf "sdiv %s, %s, %s" x y dst :}

-- divu
inst : Store(dst:regl, Divu(x:reg, y:reg_or_const), w)
  {: sprintf "udiv %s, %s, %s" x y dst :}

-- neg
inst : Store(dst:regl, Neg(x:reg_or_const), w)
  {: sprintf "neg %s, %s" x dst :}

-- and
inst : Store(dst:regl, And(x:reg, y:reg_or_const), w)
  {: sprintf "and %s, %s, %s" x y dst :}
inst : Store(dst:regl, And(x:reg_or_const, y:reg), w)
  {: sprintf "and %s, %s, %s" y x dst :}

-- or
inst : Store(dst:regl, Or(x:reg, y:reg_or_const), w)
  {: sprintf "or %s, %s, %s" x y dst :}
inst : Store(dst:regl, Or(x:reg_or_const, y:reg), w)
  {: sprintf "or %s, %s, %s" y x dst :}

inst : Store(dst:sregl, Or(x:sreg, y:sreg), w)
  {: let (dh, dl) = dst in
     let (xh, xl) = x in
     let (yh, yl) = y in
     sprintf "or %s, %s, %s\n\tor %s, %s, %s" xh yh dh xl yl dl
   :}

-- xor
inst : Store(dst:regl, Xor(x:reg, y:reg_or_const), w)
  {: sprintf "xor %s, %s, %s" x y dst :}
inst : Store(dst:regl, Xor(x:reg_or_const, y:reg), w)
  {: sprintf "xor %s, %s, %s" y x dst :}

-- com
inst : Store(dst:regl, Com(x:reg_or_const), w)
  {: sprintf "not %s, %s" x dst :}

-- shl
inst : Store(dst:regl, Shl(x:reg, y:reg_or_const), w)
  {: sprintf "sll %s, %s, %s" x y dst :}

-- shrl
inst : Store(dst:regl, Shrl(x:reg, y:reg_or_const), w)
  {: sprintf "srl %s, %s, %s" x y dst :}

-- Note this doesn't work because sparc srl takes its argument
-- mod 32.  Also we needed temporaries for scratch space.
-- inst : Store(dst:sregl, Shrl(x:sreg, y:sreg), w)
-- {: let (dh, dl) = dst in
--     let (xh, xl) = x in
--     let (yh, yl) = y in
--     String.concat "\n\t"
--      [ sprintf "srl %s, %s, %s" xl yl dl (* dl = xl >> yl *)
--      ; sprintf "neg %s, %s"     yl dh    (* dh = -yl *)
--      ; sprintf "add %s, 32, %s" dh dh    (* dh = 32-yl *)
--      ; sprintf "sll %s, %s, %s" xh dh dh (* dh = xh << (32-yl) *)
--      ; sprintf "or  %s, %s, %s" dl dh dl (* dl = (xl >> yl) | xh << (32-yl) *)
--      ; sprintf "srl %s, %s, %s" xh yl dh (* dh = xh >> yl *)
--      ]
--(*
--     dl = xl >> yl
--     dh = -yl
--     dh = dh + 32
--     dh = xh << dh
--     dl = dl | dh
--     dh = xh >> yl
--*)
--  :}

-- shra
inst : Store(dst:regl, Shra(x:reg, y:reg_or_const), w)
  {: sprintf "sra %s, %s, %s" x y dst :}

-- popcnt: strange, but the SPARC-V9 seems to have population count.
-- This probably won't work with older SPARCs though.
inst : Store(dst:regl, Popcnt(x:reg), w)
  {: sprintf "popc %s, %s" x dst :}

-- fdiv
inst : Store(dst:fregl, Fdiv(x:freg, y:freg), w)
  {: sprintf "fdivs %s, %s, %s" x y dst :}
inst : Store(dst:xregl, Fdiv(x:xreg, y:xreg), w)
  {: sprintf "fdivd %s, %s, %s" (fst x) (fst y) (fst dst) :}

-- fmul
inst : Store(dst:fregl, Fmul(x:freg, y:freg), w)
  {: sprintf "fmuls %s, %s, %s" x y dst :}
inst : Store(dst:xregl, Fmul(x:xreg, y:xreg), w)
  {: sprintf "fmuld %s, %s, %s" (fst x) (fst y) (fst dst) :}

-- fadd
inst : Store(dst:fregl, Fadd(x:freg, y:freg), w)
  {: sprintf "fadds %s, %s, %s" x y dst :}
inst : Store(dst:xregl, Fadd(x:xreg, y:xreg), w)
  {: sprintf "faddd %s, %s, %s" (fst x) (fst y) (fst dst) :}

-- fsub
inst : Store(dst:fregl, Fsub(x:freg, y:freg), w)
  {: sprintf "fsubs %s, %s, %s" x y dst :}
inst : Store(dst:xregl, Fsub(x:xreg, y:xreg), w)
  {: sprintf "fsubd %s, %s, %s" (fst x) (fst y) (fst dst) :}

-- fneg
inst : Store(dst:fregl, Fneg(x:freg), w)
  {: sprintf "fnegs %s, %s" x dst :}

     -- gcc thinks this is okay...
inst : Store(dst:xregl, Fneg(x:xreg), w)
  {: sprintf "fnegs %s, %s\n\tfmovs %s, %s" (fst x) (fst dst)
                                            (snd x) (snd dst) :}
@ 

\paragraph{Control Flow}
<<rules>>=
-- call
next: Store(regl, Add(pc, four), w) {: regl :}
inst: Par(Goto(target), next)
  {: sprintf "call %s, 0\n\tnop" target :}
inst: Par(Goto(reg), next)
  {: sprintf "call %s, 0\n\tnop" reg :}

-- decrement register window and allocate space on the stack
inst : Save(x:sp, y:neg)
  {: if not !in_proc then (in_proc := true; sprintf "save %%sp, %s, %%sp" y)
     else sprintf "! Evil recognizer deleted add %%sp, %s, %%sp" y :}

inst : Save(x:neg, y:sp)
  {: if not !in_proc then (in_proc := true; sprintf "save %%sp, %s, %%sp" x)
     else sprintf "! Evil recognizer deleted add %%sp, %s, %%sp" x :}

inst : Save(x:sp, y:pos)
  {: sprintf "! Evil recognizer deleted add %%sp, %s, %%sp" y :}

inst : Save(x:pos, y:sp)
  {: sprintf "! Evil recognizer deleted add %%sp, %s, %%sp" x :}

-- increment register window and deallocate space on the stack
restore: Store(cwpl, Add(cwp, one), w) {: () :}
inst : Par(Goto(ra), restore)
    {: (in_proc := false; "ret\n\trestore") :}

-- branches
inst: Goto(target) {: sprintf "ba %s\n\tnop" target :}

-- indirect branches
inst: Goto(reg)    {: sprintf "jmp %s\n\tnop" reg :}

-- conditional branches
inst: Store(ccl, Sparcsubcc(x:reg, y:reg_or_const), w)
   {: sprintf "subcc %s, %s, %%g0" x y :}
inst: Store(ccl, Sparcsubcc(x:freg, y:freg), w)
   {: sprintf "fcmps %s, %s\n\tnop" x y :}
inst: Store(ccl, Sparcsubcc(x:xreg, y:xreg), w)
   {: sprintf "fcmpd %s, %s\n\tnop" (fst x) (fst y) :}

inst: Guarded(Sparceq(cc), Goto(target))
   {: sprintf "be %s\n\tnop" target :}
inst: Guarded(Sparcne(cc), Goto(target))
   {: sprintf "bne %s\n\tnop" target :}

inst: Guarded(Sparcge(cc), Goto(target))
   {: sprintf "bge %s\n\tnop" target :}
inst: Guarded(Sparcgeu(cc), Goto(target))
   {: sprintf "bgeu %s\n\tnop" target :}
inst: Guarded(Sparcgt(cc), Goto(target))
   {: sprintf "bg %s\n\tnop" target :}
inst: Guarded(Sparcgtu(cc), Goto(target))
   {: sprintf "bgu %s\n\tnop" target :}

inst: Guarded(Sparcle(cc), Goto(target))
   {: sprintf "ble %s\n\tnop" target :}
inst: Guarded(Sparcleu(cc), Goto(target))
   {: sprintf "bleu %s\n\tnop" target :}
inst: Guarded(Sparclt(cc), Goto(target))
   {: sprintf "bl %s\n\tnop" target :}
inst: Guarded(Sparcltu(cc), Goto(target))
   {: sprintf "blu %s\n\tnop" target :}

inst: Guarded(Sparcfeq(cc), Goto(target))
   {: sprintf "fbe %s\n\tnop" target :}
inst: Guarded(Sparcfne(cc), Goto(target))
   {: sprintf "fbne %s\n\tnop" target :}

inst: Guarded(Sparcfge(cc), Goto(target))
   {: sprintf "fbge %s\n\tnop" target :}
inst: Guarded(Sparcfgt(cc), Goto(target))
   {: sprintf "fbg %s\n\tnop" target :}

inst: Guarded(Sparcfle(cc), Goto(target))
   {: sprintf "fble %s\n\tnop" target :}
inst: Guarded(Sparcflt(cc), Goto(target))
   {: sprintf "fbl %s\n\tnop" target :}
@ 

\paragraph{Other Instructions}
Why is this here?
<<rules>>=
inst : Nop() {: "! Why do you think there should be a nop? " :}
@ 

\paragraph{Diagnostic rules}
<<rules>>=
inst: any [100] {: "<" ^ any ^ ">" :}

any : True  () {: "True"  :}
any : False () {: "False" :}
any : Link(symbol, w) {: "Link(" ^ symbol#mangled_text ^ "," ^ string_of_int w ^ ")" :}
any : Late(string, w) {: "Late(" ^ string ^ "," ^ string_of_int w ^")" :}
any : Diff(c1:any,c2:any) {: "Diff(" ^ c1 ^ "," ^ c2 ^ ")" :}
any : Bits(bits)     {: sprintf "Bits(%s)" (Bits.to_string bits) :}

any : Fetch (any, w) {: "Fetch(" ^ any ^ "," ^ string_of_int w ^ ")" :}

any : And(x:any, y:any) {: "And(" ^ x ^ ", " ^ y ^ ")" :}
any : Or(x:any, y:any)  {: "Or("  ^ x ^ ", " ^ y ^ ")" :}
any : Xor(x:any, y:any) {: "Xor(" ^ x ^ ", " ^ y ^ ")" :}
any : Com(x:any) {: "Com(" ^ x ^ ")" :}


any : Add(x:any, y:any) {: "Add(" ^ x ^ ", " ^ y ^ ")" :}
any : Mul(x:any, y:any) {: "Mul(" ^ x ^ ", " ^ y ^ ")" :}
any : Fadd(x:any, y:any) {: sprintf "Fadd(%s, %s)" x y :}
any : Fsub(x:any, y:any) {: sprintf "Fsub(%s, %s)" x y :}
any : Fmul(x:any, y:any) {: sprintf "Fmul(%s, %s)" x y :}
any : Fdiv(x:any, y:any) {: sprintf "Fdiv(%s, %s)" x y :}

any : Fneg(any) {: sprintf "Fneg(%s)" any :}
any : Fabs(any) {: sprintf "Fabs(%s)" any :}

any : BitInsert(x:any, y:any, z:any) {: sprintf "BitInsert(%s, %s, %s)" x y z :}
any : BitExtract(lsb:any, y:any, n:w) {: sprintf "BitExtract(%s, %s, %d)" lsb y n :}
any : Slice(n:w, lsb:n, y:any) {: sprintf "Slice(%d, %d, %s)" n lsb y :}

any : Sx(any) {: "Sx(" ^ any ^ ")" :}
any : Zx(any) {: "Zx(" ^ any ^ ")" :}
any : F2f(n:w, w, any) {: sprintf "F2f(%d, %d, %s)" n w any :}
any : F2i(n:w, w, any) {: sprintf "F2i(%d, %d, %s)" n w any :}
any : I2f(n:w, w, any) {: sprintf "I2f(%d, %d, %s)" n w any :}
any : Lobits(any, w) {: "Lobits(" ^ any ^ ", " ^ string_of_int w ^ ")" :}
any : Mem(any, w) {: "Mem(" ^any ^ ")" :}
any : Reg  (char, n:int, w:int) {: sprintf "Reg(%s, %d)"   (Char.escaped char) n :}
any : Store (dst:any, src:any, w)
 {: "Store(" ^ dst ^ "," ^ src ^ "," ^ string_of_int w ^ ")" :}
any : Kill(any) {: "Kill(" ^ any ^ ")" :}

any : Guarded(guard:any, any) {: "Guarded(" ^ guard ^ "," ^ any ^ ")" :}
any : Par(l:any, r:any) {: "Par(" ^ l ^ "," ^ r ^ ")" :}
any : Goto(any) {: "Goto(" ^ any ^ ")" :}
@ 

\subsection{Interfacing {\rtl}s with the Expander}

<<special cases for particular operators>>=
| RP.App(("sub",   [w]), [x; y])  -> conSub    (exp x) (exp y)
| RP.App(("add",   [w]), [x; y])  -> conAdd    (exp x) (exp y)
| RP.App(("mul",   [32]), [x; y]) -> conMul    (exp x) (exp y)
| RP.App(("neg",   [w]), [x])     -> conNeg    (exp x)
| RP.App(("quot",  [w]), [x; y])  -> conQuot   (exp x) (exp y)
| RP.App(("divu",  [w]), [x; y])  -> conDivu   (exp x) (exp y)
(* maybe can be implemented with mulx instruction for SPARC 9
| RP.App(("mulx",  [32;64]), [x; y]) -> conMulx (exp x) (exp y)
*)

| RP.App(("and",   [w]), [x; y]) -> conAnd    (exp x) (exp y)
| RP.App(("or",    [w]), [x; y]) -> conOr     (exp x) (exp y)
| RP.App(("xor",   [w]), [x; y]) -> conXor    (exp x) (exp y)
| RP.App(("com",   [w]), [x])    -> conCom    (exp x)

| RP.App(("shl",   [w]), [x; y]) -> conShl    (exp x) (exp y)
| RP.App(("shrl",  [w]), [x; y]) -> conShrl   (exp x) (exp y)
| RP.App(("shra",  [w]), [x; y]) -> conShra   (exp x) (exp y)

| RP.App(("popcnt",[w]), [x   ]) -> conPopcnt (exp x)

| RP.App(("lobits",[32;8]),  [x]) -> conLobyte (exp x)
| RP.App(("lobits",[32;16]), [x]) -> conLohalf (exp x)
| RP.App(("lobits",[64;32]), [x]) -> conLoword (exp x)
| RP.App(("zx", [8; 32]),    [x]) -> conZxbyte (exp x)
| RP.App(("zx", [16;32]),    [x]) -> conZxhalf (exp x)
| RP.App(("zx", [32;64]),    [x]) -> conZxword (exp x)
| RP.App(("sx", [8; 32]),    [x]) -> conSxbyte (exp x)
| RP.App(("sx", [16;32]),    [x]) -> conSxhalf (exp x)

| RP.App(("sparc_subcc", [w]), [x; y]) -> conSparcsubcc (exp x) (exp y)
| RP.App(("sparc_eq",    [w]), [x]) -> conSparceq  (exp x)
| RP.App(("sparc_ne",    [w]), [x]) -> conSparcne  (exp x)
| RP.App(("sparc_ge",    [w]), [x]) -> conSparcge  (exp x)
| RP.App(("sparc_geu",   [w]), [x]) -> conSparcgeu (exp x)
| RP.App(("sparc_gt",    [w]), [x]) -> conSparcgt  (exp x)
| RP.App(("sparc_gtu",   [w]), [x]) -> conSparcgtu (exp x)
| RP.App(("sparc_le",    [w]), [x]) -> conSparcle  (exp x)
| RP.App(("sparc_leu",   [w]), [x]) -> conSparcleu (exp x)
| RP.App(("sparc_lt",    [w]), [x]) -> conSparclt  (exp x)
| RP.App(("sparc_ltu",   [w]), [x]) -> conSparcltu (exp x)

| RP.App(("sparc_feq",    [w]), [x]) -> conSparcfeq  (exp x)
| RP.App(("sparc_fne",    [w]), [x]) -> conSparcfne  (exp x)
| RP.App(("sparc_fge",    [w]), [x]) -> conSparcfge  (exp x)
| RP.App(("sparc_fgt",    [w]), [x]) -> conSparcfgt  (exp x)
| RP.App(("sparc_fle",    [w]), [x]) -> conSparcfle  (exp x)
| RP.App(("sparc_flt",    [w]), [x]) -> conSparcflt  (exp x)

| RP.App(("fdiv", [w]), [x; y; rm]) -> conFdiv (exp x) (exp y)
| RP.App(("fmul", [w]), [x; y; rm]) -> conFmul (exp x) (exp y)
| RP.App(("fadd", [w]), [x; y; rm]) -> conFadd (exp x) (exp y)
| RP.App(("fsub", [w]), [x; y; rm]) -> conFsub (exp x) (exp y)
| RP.App(("fneg", [w]), [x])        -> conFneg (exp x)

| RP.App(("i2f", [w;w']), [x; rm]) -> conItof (exp x)
| RP.App(("f2i", [w;w']), [x; rm]) -> conFtoi (exp x)
| RP.App(("f2f", [w;w']), [x; rm]) -> conFtof (exp x)

| RP.App(("sparc_hi2lo", [64]), [x;y]) -> conSparchitolo (exp x) (exp y)
| RP.App(("sparc_lo2hi", [64]), [x;y]) -> conSparclotohi (exp x) (exp y)
| RP.App(("sparc_mkj", []), [x;y]) -> conSparcmkj (exp x) (exp y)

| RP.App((("add"|"sub"|"mul"|"sx"|"zx"|"lobits"|"bitInsert"|
           "bitExtract"|"fabs"|"fneg"|"fdiv"|"fmul"|"fsub"|"fadd"|"f2f"|"f2i"|
           "i2f"|"and"|"or"|"xor"|"com") as op, ws), xs)->
    Impossible.impossible
      (Printf.sprintf
         "operator %%%s specialized to [%s] & applied to %d arguments"
         op (String.concat "; " (List.map string_of_int ws)) (List.length xs))
@
And now we convert between RTLs and Burg constructors.
<<code to follow the labeler>>=  
let unimp = Impossible.unimp
let const = function
  | RP.Late(s,w)              -> unimp "sparc: late constants"
  | RP.Bool(b)                -> unimp "sparc: bool"
  | RP.Link(s,_,w)            -> conLink s w
  | RP.Diff _                 -> error "PIC not supported"
  | RP.Bits(b)                -> conBits(b)
<<code to follow the labeler>>=  
let rec exp = function
  | RP.Const(k)               -> const (k)
  | RP.Fetch(l,w)             -> conFetch (loc l) w
  <<special cases for particular operators>>
  | RP.App((o,_),_)           -> error ("unknown operator " ^ o)
<<code to follow the labeler>>=  
and loc l = match l with
  | RP.Mem(('m', aff, _), w, e, ass) -> conMem (exp e) w
  | RP.Reg((sp, _, _), i, w)         -> conReg sp i w 
  | RP.Mem(_, _, _, _)        -> error "non-mem, non-reg cell"
  | RP.Var _ | RP.Global _    -> error "var found"
  | RP.Slice(w,i,l)           -> unimp "sparc: slice locations"
@ 
We recognize some special forms of single effects.  When is npc used
and when is pc used?

How to handle returns:

 ret  is really jmpl %i7+8, %g0
 retl is really jmpl %o7+8, %g0
 
this is a bit of a problem for our code because the machinery has no
idea that the return address is being placed in different registers
maybe we should tell it that %i7 is the return address, which is a
non-volatile register, so that it won't try to save and resore the
value on the stack, which is pointless.  Should be okay as long as %o7
is mentioned as volatile and isn't available to pass a parameter on a
call.  For now, we will just be using the ``ret'' instruction because
we don't do the so-called ``leaf optimization''.
<<code to follow the labeler>>=  
and effect = function
  | RP.Store(RP.Reg(('c',_,_), i, c), r, _)
    when (i = 1 (* i = npc *)) -> conGoto (exp r)
(*
  | RP.Store(RP.Reg('c',i, _), r, w)  -> error ("set $c["^string_of_int i^"]")
*)
  | RP.Store(maybe_spl, RP.App(("add",_), [x;y]), _)
    when (RU.Eq.loc maybe_spl spl && (RU.Eq.exp x sp || RU.Eq.exp y sp)) ->
      conSave (exp x) (exp y)
  | RP.Store(l,e,w)                   -> conStore (loc l) (exp e) w
  | RP.Kill(l)                        -> unimp "sparc: kill effect"
@
We attempt to recognize register pairs.
<<code to follow the labeler>>=  
and regpair = function
  | _ -> Impossible.impossible "Argument is not a register pair"
@
<<code to follow the labeler>>=
and rtl (RP.Rtl es) = geffects es
and geffects = function
    | []          -> conNop ()
    | [g, s]      -> guarded g s
    | (g, s) :: t -> conPar (guarded g s) (geffects t)
and guarded g eff = match g with
  | RP.Const(RP.Bool b) -> if b then effect eff else conNop()
  | _ -> conGuarded (exp g) (effect eff)
@ 

\subsection{The exported recognizer}

We try not to immediately halt if something goes wrong but instead drop error messages into the assembly language.

<<code to follow the labeler>>=
let errmsg r msg =
  List.iter prerr_string
    [ "recognizer error: "; msg; " on "; RU.ToString.rtl r; "\n" ]

let to_asm r =
  try
    let plan = rtl (Down.rtl r) in
    plan.inst.Camlburg.action ()
  with 
  | Camlburg.Uncovered -> cat [" not an instruction: " ; RU.ToString.rtl r]
  | Error msg -> (errmsg r msg; " error in recognizer: " ^ msg)

let is_instruction r =
  try
    let plan = rtl (Down.rtl r) in
    plan.inst.Camlburg.cost < 100  (* should be true, but shade this... *)
  with 
  | Camlburg.Uncovered -> false
  | Error msg -> (errmsg r msg; false)
@ 
