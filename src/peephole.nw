% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=2 sw=2 et: 
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
% 

% inc: \usepackage{nchicago}


\section{Peephole Optimization}


The idea behind peephole optimization is simple.
Suppose you have the following program:
\begin{verbatim}
  t1 := 12
  t2 := sp + t1
\end{verbatim}
After the first assignment, you know as an ``available expression''
that [[t1 == 12]].
You can therefore do a forward substitution of [[12]]~for~[[t1]],
yielding
\begin{verbatim}
  t1 := 0
  t2 := sp + 12
\end{verbatim}
With luck, the assignment to~[[t1]] becomes dead, and a later
dead-assignment elimination will eliminate it.
Congratulations!  You have a peephole optimizer.

This module implements a forward dataflow pass that does the forward
substitution.
It's very pessimistic about available expressions, assuming that they
are empty at the start of each basic block.
For cleaning up the output of the generic expander, this is just fine.
<<peephole.mli>>=
val subst_forward : 'a -> Oast2ir.proc -> bool
@ 

\subsection{Implementation}

This is a forward dataflow problem.
<<peephole.ml>>=
module G  = Cfgx.M
module P  = Proc
module RP = Rtl.Private
module RU = Rtlutil
module Dn = Rtl.Dn
module Up = Rtl.Up
module SS = Strutil.Set
module T  = Target

module ToString = RU.ToString
<<utilities>>
@ 
<<peephole.ml>>=
module D  = Dataflow.Make (G)

let () = Debug.register "peephole" "peephole optimizer"
let peephole = "peephole"  (* avoid allocating again and again... *)

let subst_forward _ proc =
  let ok =
    if Debug.on "peephole" then
      (fun i -> if proc.P.target.T.is_instruction i then true
                else (Printf.eprintf "### rejected substitution %s\n"
                           (ToString.rtl i); false))
    else
      proc.P.target.T.is_instruction in
  let changed = ref false in
  let init = Avail.empty in
  let split _ = Avail.empty in
  let merge _ _ = false in
  let replace =
    if Debug.on "peephole" then
      (fun rtl old ->
        Printf.eprintf "Replacing old rtl %s\n     with new rtl %s\n"
          (ToString.rtl old) (ToString.rtl rtl);
        rtl) 
    else
      (fun rtl _ -> rtl) in
  <<propagation>>
  let fwd = D.fwd_iteration { D.split_info = split; D.merge_split_info = merge
                            ; D.init_info = init; D.propagate = propagate } in
  (try ignore (fwd proc.P.cfg) with G.Tx.Exhausted -> ()); 
  !changed
@ 
According to Jack Davidson, we should try two substitutions, not just
one, when peephole optimizing.
<<propagation>>=
let propagate node avail =
  <<substitution>>
  let update rtl =
    G.Tx.start_exn peephole;
    G.update_instr (replace rtl) node;
    changed := true;
    G.Tx.finish () in
  let () = 
    match G.to_executable node with
    | Some rtl ->
        if G.kind node <> G.StackAdjust then
          Debug.eprintf "peephole" "=> Considering %s\n" (ToString.rtl rtl);
          let try_pair l l' resume =
            let rtl' = subst2 l l' rtl in
            if ok rtl' then update rtl' else resume () in
          let try_one l resume =
            let rtl' = subst1 l rtl in
            if ok rtl' then update rtl' else resume () in
          let cs = candidates (Dn.rtl rtl) in
          search_pairs cs (wrap2 try_pair) (fun () -> search cs (wrap try_one)
                          (fun () -> ()))
    | None -> () in
  match G.kind node with
  | G.Instruction | G.Assertion ->
      (match G.to_instr node with
      | None -> Impossible.impossible "instruction/assertion with no RTL"
      | Some rtl -> Avail.forward rtl avail)
  | _ -> Avail.empty  (* rank pessimism *) in
@ 
<<substitution>>=
let candidates rtl =
  let add loc pairs = match loc with
  | RP.Reg _ when not (List.mem_assoc loc pairs) ->
      (match Avail.in_loc avail loc with
      | Some e -> (loc, e) :: pairs
      | None -> pairs)
  | _ -> pairs in
  RU.Fold.LocFetched.rtl add rtl [] in

let rec search list succ fail = match list with
| [] -> fail()
| x :: xs -> succ x (fun () -> search xs succ fail) in

let rec search_pairs list succ fail = match list with
| [] -> fail ()
| x :: xs -> search xs (fun x' resume -> succ x x' resume)
                       (fun () -> search_pairs xs succ fail) in

let subst1 (loc, e) rtl =
  Simplify.rtl (RU.Subst.Fetch.rtl ~guard:((=) loc) ~fetch:(fun _ _ -> e) rtl) in

let subst2 (loc,e) (loc',e') rtl =
  Simplify.rtl (RU.Subst.Fetch.rtl ~guard:(fun l -> l = loc || l = loc')
                                   ~fetch:(fun l _ -> if l = loc then e else e') rtl)in
@ 
<<utilities>>=
let is_copy rtl = match Dn.rtl rtl with
| RP.Rtl [(RP.Const (RP.Bool true),
           RP.Store(RP.Reg _, RP.Fetch(RP.Reg _, _), _))] -> true
| _ -> false
@ 
<<utilities>>=
let () =
  Debug.register "peephole-search"
    "search for a substitutable location in peephole optimizer"

let wrap = 
  if Debug.on "peephole-search" then
    (fun succ l resume ->
      Printf.eprintf "Substituting for %s\n" (ToString.loc (Up.loc (fst l)));
      succ l (fun () ->
        (Printf.eprintf "Abandoning %s\n" (ToString.loc (Up.loc (fst l))); resume())))
  else
    (fun succ -> succ)

let wrap2 = 
  if Debug.on "peephole-search" then
    (fun succ l l' resume ->
      Printf.eprintf "Substituting for %s and %s\n" (ToString.loc (Up.loc (fst l))) 
        (ToString.loc (Up.loc (fst l')));
      succ l l' (fun () ->
        (Printf.eprintf "Abandoning %s and %s\n" (ToString.loc (Up.loc (fst l))) (ToString.loc (Up.loc (fst l'))); resume())))
  else
    (fun succ -> succ)
@ 
Here's a nasty backtracking search for a substitutable location.
<<old substitution>>=
let subst_one rtl avail succ fail =
  let is_some = function Some _ -> true | None -> false in
  let substitute loc =
    match Avail.in_loc avail loc with
    | Some e -> RU.Subst.rhs_exp ~guard:((=) loc) ~map:(fun _ _ -> e) rtl
    | None -> Impossible.impossible "available location is not available?!" in
  let substitutable exp =
    RU.Find.Loc.exp (fun l -> is_some (Avail.in_loc avail l)) exp in
  let rec find_loc succ fail = function
    | [] -> fail ()
    | (guard, RP.Kill loc) :: es ->
        let resume () = find_loc succ fail es in
        let succ = wrap succ in
        ( match substitutable guard with Some l -> succ l resume | None -> resume ())
    | (guard, RP.Store (loc, rhs, w)) :: es ->
        let succ = wrap succ in
        let r1 () =
          let resume () = find_loc succ fail es in
          match substitutable rhs with Some l -> succ l resume | None -> resume() in
        match substitutable guard with Some l -> succ l r1 | None -> r1 () in
  let RP.Rtl effs = Dn.rtl rtl in
  find_loc (fun loc resume -> succ (substitute loc) resume) fail effs

type void = Void of void
let _ = (subst_one : Rtl.rtl -> Avail.t -> (Rtl.rtl -> (unit->void) -> void) -> (unit->void) -> void)
