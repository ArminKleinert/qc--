% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

\section{X86 registers}

My goal here is to avoid knowing anything about instructions.
The parameters represent the machine instructions to implement
[[return]] and [[cut to]].
<<x86regs.mli>>=
val rspace : Register.space
val eax : Register.t
val ecx : Register.t
val edx : Register.t
val ebx : Register.t
val esp : Register.t
val ebp : Register.t
val esi : Register.t
val edi : Register.t

val ah : Rtl.loc
val ax : Rtl.loc
val cl : Rtl.loc

val espace : Register.space
val fpuctl : Rtl.loc
val fputag : Rtl.loc
val fpustatus : Rtl.loc
val fpcc   : Rtl.loc

val regname8 : lsb:int -> base:int -> string
@
<<x86regs.ml>>=
module R = Rtl
let rspace = ('r', Rtl.Identity, Cell.of_size 32)
let eax = (rspace, 0, Register.C 1)
let ecx = (rspace, 1, Register.C 1)
let edx = (rspace, 2, Register.C 1)
let ebx = (rspace, 3, Register.C 1)
let esp = (rspace, 4, Register.C 1)
let ebp = (rspace, 5, Register.C 1)
let esi = (rspace, 6, Register.C 1)
let edi = (rspace, 7, Register.C 1)

let ah = R.slice  8 ~lsb:8 (R.reg eax)
let ax = R.slice 16 ~lsb:0 (R.reg eax)
let cl = R.slice  8 ~lsb:0 (R.reg ecx)
@ 
<<x86regs.ml>>=
let espace = ('e', Rtl.Identity, Cell.of_size 16)
let fpuc n = Rtl.reg (espace, n, Rtl.C 1)
let fpuctl    = fpuc 0
let fputag    = fpuc 2
let fpustatus = Rtl.reg (espace, 1, Rtl.C 1)
let fpcc = Rtl.slice 3 ~lsb:8 fpustatus (* ignores bit 14 == C3 [probably OK] *)
@ 
<<x86regs.ml>>=
let r8_lo  = [| "%al"; "%cl"; "%dl"; "%bl"|]
let r8_hi  = [| "%ah"; "%ch"; "%dh"; "%bh"|]

let regname8 ~lsb ~base =
  if lsb = 0 then Array.get r8_lo base else Array.get r8_hi base
