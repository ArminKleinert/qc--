% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
@
\section{Available expressions}

The purpose of this module is to help compute a set of ``available
expressions.''
This set is really a set of equalities that represent facts we know
about the state of the machine at a program point.
Each such equality identifies the contents of some location with the
value of some expression.
The equalities can drive both redundancy elimination and forward
substitution (peephole optimization).

Here are the constructors.
If~[[a]] is the set of expressions available immediately before an
RTL~[[r]], then [[forward a r]] is the set of expressions available
immediately after~[[r]].
<<avail.mli>>=
type t   (* a set of available expressions *)
val empty : t  (* the empty set *)
val forward : Rtl.rtl -> t -> t
@ 
To observe for forward substitution, we need to know what expression a
location holds.
To observe for redundancy elimination, we need to know what location
holds an expression.
<<avail.mli>>=
val in_loc  : t -> Rtl.Private.loc -> Rtl.Private.exp option
val has_exp : t -> Rtl.Private.exp -> Rtl.Private.loc option
@ 
We can substitute for locations that are known to be available.
When calling [[subst_exp a ls e]], it is a checked run-time error for
list [[ls]] to contain a location that is not availabe in~[[a]].
<<avail.mli>>=
val subst_exp : t -> Rtl.Private.loc list -> Rtl.Private.exp -> Rtl.Private.exp
@ 


\subsection{Implementation}


<<avail.ml>>=
module R   = Rtl
module RP  = Rtl.Private
module RU  = Rtlutil
module Up  = Rtl.Up
module Dn  = Rtl.Dn
module Re  = Register
module S   = RU.ToReadableString
let () = Debug.register "avail" "available expressions"
let debug = Debug.on "avail"
@ 
The implementation is designed to try to maximize sharing and minimize
allocation, not for fast lookup.
<<avail.ml>>=
type t = (RP.loc * RP.exp) list
let empty = []
@ 
<<avail.ml>>=
let in_loc pairs l = try Some (List.assoc l pairs)
                     with Not_found -> None
let has_exp pairs e =
  try Some (fst (List.find (fun (_, e') -> e = e') pairs))
  with Not_found -> None
@ 
THIS CODE IS BROKEN FOR THE CASE WHEN A LEFT-HAND SIDE ALSO APPEARS ON
A RIGHT-HAND SIDE.
IN SUCH A CASE, WE NEED TO SUBSTITUTE FOR THE EXISTING VALUE OF THE
LHS OR WE NEED TO GIVE UP.
(A less serious problem is that we may get multiple equivalents for
the same expression, and it is not clear which one(s) to use.)
<<avail.ml>>=
<<kills>>
<<substitution>>
let forward rtl pairs =
  let locs = locs_killed rtl in
  let alocs = List.map RU.MayAlias.locs' locs in
  let aexps = List.map RU.MayAlias.exp'  locs in
  let add_new_pair l r new_pairs =
    if List.exists (fun aexp -> aexp r) aexps then
      <<if all interfering locations can be substituted, keep [[l, r]]; otherwise not>>
    else
      (l, r) :: new_pairs in
  let invalidated (l, r) =
    List.exists (fun aloc -> aloc l) alocs || List.exists (fun aexp -> aexp r) aexps in
  let pairs =
    if List.exists invalidated pairs then
      List.filter (fun p -> not (invalidated p)) pairs
    else
      pairs in
  (* massive pessimism: do registers only *)
  let extend guarded pairs = match guarded with
  | RP.Const (RP.Bool true), RP.Store(RP.Reg _ as l, r, _) -> add_new_pair l r pairs
  | _ -> pairs in
  let RP.Rtl effects = Dn.rtl rtl in
  let pairs = List.fold_right extend effects pairs in
  if debug then
    begin
      Printf.eprintf "avail: forwarding past %s yields\n" (S.rtl rtl);
      List.iter
        (fun (l, r) -> Printf.eprintf "avail:   %s == %s\n"
                                      (S.loc (Up.loc l)) (S.exp (Up.exp r))) pairs;
    end;
  pairs
@ 
<<if all interfering locations can be substituted, keep [[l, r]]; otherwise not>>=
let badlocs = List.filter (fun l -> RU.MayAlias.exp' l r) locs in
if List.for_all (fun l -> List.mem_assoc l pairs) badlocs then
  (l, subst_exp pairs badlocs r) :: new_pairs
else
  new_pairs
@ 
We never remember a memory location, so we need only to identify
registers that are killed.
<<kills>>=
let locs_killed rtl =
  let add l locs = if List.mem l locs then locs else l :: locs in
  RU.FullReadWriteKill.fold ~write:add ~kill:add ~read:(fun _ locs -> locs)
    rtl []
@ 
<<substitution>>=
let subst_exp a ls e =
  RU.Subst.Fetch.exp' ~guard:(fun l -> List.mem l ls)
    ~fetch:(fun l w -> List.assoc l a) e
