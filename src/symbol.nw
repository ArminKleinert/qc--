
% ------------------------------------------------------------------ 
\section{Assembler Symbols and Relocatable Addresses}
% ------------------------------------------------------------------ 

Labels and procedures in a {\PAL} compilation unit become symbols in the
assembler output. The exact representation of a symbol depends on the
assembler at hand. We hide the details behind a class type. Each
assembler provides methods to create symbols that fits it. Relocatable
addresses are similar to symbols in the sense that their representation
is also depends on the assembler at hand. Both symbols and relocatable
addresses escape the assembler that defines them and they become part of
{\rtl}s. For this reason they are factored out from module \module{asm3}
that defines an assembler.

<<class types>>=
class type reladdr = object
    method ast:     Ast.expr        (* AST representation of this *)
                                    (* add more methods as needed *)

    method add: reladdr -> reladdr  (* add to this        *)
    method sub: reladdr -> reladdr  (* subtract from this *)
end

class type symbol = object
    method text:    string          (* text representation of this *)
    method reladdr: reladdr         (* this as a reladdr *)
end
@

<<symbol.mli>>=
<<class types>>
<<symbol.ml>>=
<<class types>>
@

