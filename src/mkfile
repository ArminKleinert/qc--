################################################################
# $Id$ 
################################################################
#
# Before you start:
# (1) this module depends on other directories. Go to the toplevel 
#     directory and call: "mk". From there on you can work locally 
#     in this directory. 
#
# ------------------------------------------------------------------ 
# How to add a new foo.mli or foo.ml contained in a foo.nw file:
# (1) add foo.ml  to ML,  *after* all files it depends on
# (2) add foo.mli to MLI, keep the list in alphabetical order
#
# If you have troubles with undefined symbols during compilation or
# linking, check these two variables. Rebuild dependencies if
# necessary.
# 
# Useful targets to create documentation from foo.nw:
# foo.html          - make foo.html from foo.nw
# foo.dvi           - make foo.dvi  from foo.nw
#
# ------------------------------------------------------------------ 
# N.B. in building this mkfile, when we have a choice between making
# the mkfile clean and making mk's output readable, we make mk's output
# readable.

NAME =      qc--
VERSION =   `date +%Y%m%d`

################################################################
# paths
################################################################

TOP    =    ..
LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man

################################################################
# (high level) virtual targets
# be careful to use only variables that are defined above
################################################################
# INTERP = evaluating | residualizing
# change the variable below to extract the right variant 
# from *.nw files

INTERP =    evaluating
DEPEND =    DEPEND.$INTERP


all:V:      $NAME
all.opt:V:  $NAME.opt

update:V:   $BINDIR/$NAME                 \
            $MANDIR/man1/$NAME.1          \
            $MANDIR/man1/${NAME}grammar.1 \

update.opt:V: $BINDIR/$NAME.opt            \
            $MANDIR/man1/$NAME.1          \
            $MANDIR/man1/${NAME}grammar.1 \

dvi:V:      $NAME.dvi
ps:V:       $NAME.ps

depend:V:   $DEPEND

test:VQ:     
            echo "you can run 'mk test' only from the toplevel ($TOP)"
            exit 1

clean:V:        
            rm -f *.cmo *.cmx *.o
            rm -f *.asdl *.view *.smlview
            rm -f *.cmi
            rm -f *.ml *.mli *.c *.mly *.mll this.in
            rm -f *.sig *.sml
            rm -f *.dvi *.log *.aux *.bbl *.blb *.blg
            rm -f parse.output
            rm -f *.html *.1 *.ps *.pod
            rm -f *~
            rm -f *.inc
    
clobber:V:  clean
            rm -f $NAME $NAME.opt newer
            

################################################################
# important file sets
################################################################

# The order of files defines the link order.  So if you have troubles
# with undefined symbols during linking re-order this list
# accordingly.  No module must use any of its successors.

ML =            uint64.ml     \
                impossible.ml \
                aux.ml        \
                str.ml        \
                idgen.ml      \
                error.ml      \
                base.ml       \
                bits.ml       \
                bitops.ml     \
                this.ml       \
                ast.ml        \
                astUtil.ml    \
                parse.ml      \
                types.ml      \
                mangle.ml     \
                expcheck.ml   \
                rtl.ml        \
                rtlop.ml      \
                dummy.ml      \
                fenv.ml       \
                topsort.ml    \
                scan.ml       \
                astpp.ml      \
                rtleval.ml    \
                elab.ml       \
                eqn.ml        \
                const.ml      \
                register.ml   \
                rtlutil.ml    \
		        expander.ml   \
                area.ml       \
                automaton.ml  \
                target2.ml    \
                asm2.ml       \
                asm2ast.ml    \
                rtl2ast.ml    \
                cfg3.ml       \
                cfgutil.ml    \
                proc.ml       \
                copyinout.ml  \
                ast3ir.ml     \
                live.ml       \
                interval.ml   \
                lifetime.ml   \
                linscan.ml    \
                cmdline.ml    \
                driver.ml     \
                main.ml       \

# interfaces in alphabetical order

MLI =           area.mli       \
                asm2.mli       \
                asm2ast.mli    \
                ast.mli        \
                ast3ir.mli     \
                astUtil.mli    \
                astpp.mli      \
                automaton.mli  \
                aux.mli        \
                base.mli       \
                bitops.mli     \
                bits.mli       \
                cfg3.mli       \
                cfgutil.mli    \
                cmdline.mli    \
                const.mli      \
                copyinout.mli  \
                driver.mli     \
                dummy.mli      \
                elab.mli       \
                eqn.mli        \
                error.mli      \
		        expander.mli   \
                expcheck.mli   \
                fenv.mli       \
                idgen.mli      \
                impossible.mli \
                interval.mli   \
                lifetime.mli   \
                linscan.mli    \
                live.mli       \
                main.mli       \
                mangle.mli     \
                parse.mli      \
                proc.mli       \
                register.mli   \
                rtl.mli        \
                rtl2ast.mli    \
                rtleval.mli    \
                rtlop.mli      \
                rtlutil.mli    \
                scan.mli       \
                str.mli        \
                target2.mli    \
                this.mli       \
                topsort.mli    \
                types.mli      \
                uint64.mli     \

CMO =           `echo $ML       | sed 's/\.ml/.cmo/g'`
CMX =           `echo $ML       | sed 's/\.ml/.cmx/g'`

# The following list of files are scanned for dependencies. They are
# extracted from Noweb source files, or generated from files which are
# extracted from Noweb files. Add files here that are not in ML or MLI
# and that you want to be scanned.

SCAN =          $ML $MLI        \
                rtldebug.mli rtldebug.ml

################################################################
# rules and tools 
################################################################

<../config/ocaml.mk

OCAMLC_FLAGS =  -I $LIBDIR -g
OCAMLO_FLAGS =  -I $LIBDIR -ccopt -static

<../config/noweb.mk

CC =            gcc

################################################################
# binaries
################################################################

OBJ =           uint64p.o
CMOLIBS =       cllib.cma  asdl.cma  lua.cma
CMXLIBS =       cllib.cmxa asdl.cmxa lua.cmxa

$NAME:          depend-check $CMO $OBJ
                $OCAMLC $OCAMLC_FLAGS -custom -o $target $CMOLIBS $OBJ $CMO 

$NAME.opt:      $CMX $OBJ
                $OCAMLO $OCAMLO_FLAGS -o $target $CMXLIBS $OBJ $CMX

# an OCaml interpreter with all our C code compiled in

ocamli:         $OBJ uint64.cmo
                $OCAMLTOP -custom -o $target uint64.cmo $OBJ 

################################################################
# copy files to their official directories
################################################################

$BINDIR/$NAME:          $NAME
                        cp $prereq $target

$BINDIR/$NAME.opt:      $NAME.opt
                        cp $prereq $target

$MANDIR/man1/$NAME.1:   $NAME.1
                        cp $prereq $target

$MANDIR/man1/${NAME}grammar.1:   ${NAME}grammar.1
                        cp $prereq $target


################################################################
# LaTeX documentation
################################################################
# Files we generate documentation from

HTML =          `echo *.nw                             | sed 's/\.nw/.html/g'`
INC  =          `echo *.nw  ../cllib/*.nw ../test/*.nw | sed 's/\.nw/.inc/g'`


$NAME.dvi:      $INC

html:V:         $HTML 

# modules.tex can be used in qc--.tex where documentation for
# individual modules is included

modules.tex:V: $INC
    echo $INC | sed 's!\([a-z0-9./]*inc\)!\\input{\1}!g' | fmt -w 10 > $target

################################################################
# C code
################################################################

uint64.cmo      \
uint64.cmx:     uint64p.o

uint64p.o:      uint64p.c
                $OCAMLC $OCAMLC_FLAGS -c $prereq

################################################################
# asdl
################################################################

# ASDL does not support seperate compilation:  modules referring to
# each other must be in one file.  To overcome this limitation we
# concatenate all asdl files to one file and pass it to the asdlGen
# compiler. The noweb files defining the asdl files also contain 
# views for some of the definined types. So first all asdl files are
# concatenated and then all views.

ASDL =          ast.asdl   
VIEWS =         ast.view  
SMLVIEWS =      

ocaml.asdl:     $ASDL $VIEWS
                cat $ASDL           >  $target
                echo "view OCaml {" >> $target
                cat $VIEWS          >> $target
                echo "}"            >> $target

sml.asdl:       $ASDL $SMLVIEWS
                cat $ASDL           >  $target
                echo "view SML {"   >> $target
                cat $SMLVIEWS       >> $target
                echo "}"            >> $target

ast.ml          \
ast.mli         \
astUtil.ml      \
astUtil.mli:    ocaml.asdl
                asdlGen --ocaml --pickler=sexp $prereq

ast.sml         \
ast.sig         \
astUtil.sml     \
astUtil.sig:    sml.asdl                
                asdlGen --sml --pickler=sexp $prereq

################ special cases, primarily for multiple sources in one .nw
#
# these rules clutter up the mkfile, but they make the output from mk,
# and especially from mk- n, more readable, so they are worth it.
#
# we don't use the nocond filter here because currently all our
# conditional code happens to be in the general case.

interval.mli: lifetime.nw
    $NOTANGLE -L"$LINE" -R$target $prereq > $target
interval.ml: lifetime.nw
    $NOTANGLE -L"$LINE" -R$target $prereq > $target

uint64p.c:      uint64.nw
    $NOTANGLE -L -R$target $prereq > $target

topsorttest.ml: topsort.nw
    $NOTANGLE -L"$LINE" -R$target $prereq > $target


cmdline.ml: main.nw
    $NOTANGLE -L"$LINE" -R$target $prereq > $target
cmdline.mli: main.nw
    $NOTANGLE -L"$LINE" -R$target $prereq > $target
this.mli: main.nw
    $NOTANGLE -L"$LINE" -R$target $prereq > $target
this.in: main.nw
    $NOTANGLE -L"$LINE" -R$target $prereq > $target

astpp.mli:  ast.nw
    $NOTANGLE -L"$LINE" -R$target $prereq > $target
astpp.ml:   ast.nw
    $NOTANGLE -L"$LINE" -R$target $prereq > $target

parse.mly:  parser.nw
    $NOTANGLE -R$target $prereq > $target
scan.mll:       parser.nw
    $NOTANGLE -R$target $prereq > $target
scan.mli:       parser.nw
    $NOTANGLE -L"$LINE" -R$target $prereq > $target

#
# LaTeX documentation for non OCaml code
#

uint64.inc:     uint64.nw
                $NOWEAVE -delay -autodefs c -index $prereq > $target

newer.inc:      newer.nw
                $NOWEAVE -delay -autodefs c -index $prereq > $target


ast.inc:        ast.nw         
                $NOWEAVE -delay $prereq > $target

#
# include the yacc grammar in the manual for reference
#

$NAME.pod:      main.nw 
    $NOTANGLE -R$target $prereq > $target

${NAME}grammar.pod:      main.nw parse.output
    $NOTANGLE  -R$target $prereq > $target
    echo '/##grammar##/d
    .r !grep "^  *[0-9]" parse.output
    wq' | ed ${NAME}grammar.pod

################################################################
# include version and name information
################################################################

this.ml:        this.in mkfile
                sed     -e "s/@this@/$NAME-$VERSION/"\
                        -e "s/@arch@/$ARCH/"\
                        this.in > $target

################################################################
# recalculate dependencies
# make sure that generators are ran first
################################################################
#

$DEPEND:    $SCAN
            $OCAMLDEP $prereq > $DEPEND
            

# make sure DEPEND is up to date
depend-check:VQ: newer
    # check for $DEPEND
    if ./newer $DEPEND mkfile; then true;
    else
      echo "$DEPEND is out of date; you must run 'mk depend' before continuing" 1>&2
      exit 1
    fi

newer: newer.c
    $CC -o $target $prereq


<$DEPEND


# vim:tw=72:ts=4:et:
