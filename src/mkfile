################################################################
# $Id$ 
################################################################
#
# Before you can do anything useful in this directory ../lib
# must contain the right set of libraries. So call 'mk' one time
# on the top level (..) first and then work locally in this directory.
#
# all               - creat new byte code binary
#
# depend            - rebuild dependencies
#
# update            - create native code binary and
#                     update external directories 
#                     (../bin ../man ../lib)
#
# ocamli            - OCaml interpreter with C modules compiled in
#
# html dvi ps       - create documentation
#
# clean             - remove everything but real sources
#
#
# foo.html          - make foo.html from foo.nw
# foo.dvi           - make foo.dvi  from foo.nw
#


# N.B. in building this mkfile, when we have a choice between making
# the mkfile clean and making mk's output readable, we make mk's output
# readable.


NAME =      qc--
VERSION =   `date +%Y%m%d`

################################################################
# paths
################################################################

TOP    =    ..
LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man

################################################################
# (high level) virtual targets
################################################################

all:V:          $NAME

################################################################
# rules and tools for OCaml
################################################################

<../config/ocaml.mk

# compiler flags used by the rules just included
# we compile byte code for profiling

# OCAMLC =        ocamlcp -p f    
OCAMLC_FLAGS =  -I $LIBDIR -g
OCAMLO_FLAGS =  -I $LIBDIR 

################################################################
# rules and tools for Noweb
################################################################

# INTERP = evaluating | residualizing
# change the variable below to extract the right variant 
# from *.nw files

INTERP =    evaluating
<../config/noweb.mk

# file where we record dependencies
DEPEND=DEPEND.$INTERP

################################################################
# important file sets
################################################################

# The order of files defines the link order.  So if you have troubles
# with undefined symbols during linking re-order this list
# accordingly.  No module must use any of its successors.

ML =            uint64.ml    \
                impossible.ml\
                aux.ml       \
                idgen.ml     \
                srcmap.ml    \
                error.ml     \
                bits.ml      \
                bitops.ml    \
                this.ml      \
                ast.ml       \
                astUtil.ml   \
                parse.ml     \
                env.ml       \
                types.ml     \
                value.ml     \
                mangle.ml    \
                fenv.ml      \
                topsort.ml   \
                scan.ml      \
                astpp.ml     \
                elab.ml      \
                rtl.ml       \
                rtlutil.ml   \
		const.ml     \
		consteval.ml \
                automaton.ml \
                target.ml    \
                rtl2ast.ml   \
                acfg.ml      \
                cfg.ml       \
                lowercopy.ml \
		asm2.ml      \
                ast2ir.ml    \
                asm2ast.ml   \
		cmdline.ml   \
                driver.ml    \
                main.ml      \

MLI=`echo $ML | sed 's/\.ml/.mli/g'`

# list all *.ml *.mli souces generated by some tool below
# we need to generated them before we can generated the list
# of dependencies (see target depend)
# N.B. $GENERATED includes names from both $ML and $MLI

GENERATED =     this.ml     \
                scan.ml     \
                parse.ml    \
                parse.mli   \
                ast.mli     \
                ast.ml      \
                astUtil.ml  \
                astUtil.mli \

MLY =	parse.mly
MLL =	scan.mll

src:V: $ML $MLI $MLY $MLL

CMO =           `echo $ML       | sed 's/\.ml/.cmo/g'`
CMX =           `echo $ML       | sed 's/\.ml/.cmx/g'`
OBJ =           `echo $ML       | sed 's/\.ml/.o/g'`

################################################################
#
# Files we generate documentation from

HTML =          `echo *.nw                             | sed 's/\.nw/.html/g'`
INC  =          `echo *.nw  ../cllib/*.nw ../test/*.nw | sed 's/\.nw/.inc/g'`

################################################################

$NAME.dvi:      $INC

dvi:V:          $NAME.dvi
ps:V:           $NAME.ps
html:V:         $HTML


################ special cases, primarily for multiple sources in one .nw
#
# these rules clutter up the mkfile, but they make the output from mk,
# and especially from mk- n, more readable, so they are worth it.
#
# we don't use the nocond filter here because currently all our
# conditional code happens to be in the general case.

lowercopy.mli: cfg.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target
lowercopy.ml: cfg.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target
acfg.mli: cfg.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target
acfg.ml: cfg.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target

uint64p.c:      uint64.nw
	$NOTANGLE -L -R$target $prereq > $target

topsorttest.ml: topsort.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target


cmdline.ml: main.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target
cmdline.mli: main.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target
this.mli: main.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target
this.in: main.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target

astpp.mli: 	ast.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target
astpp.ml:	ast.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target

parse.mly:	parser.nw
	$NOTANGLE -R$target $prereq > $target
scan.mll:       parser.nw
	$NOTANGLE -R$target $prereq > $target
scan.mli:       parser.nw
	$NOTANGLE -L"$LINE" -R$target $prereq > $target

#
# LaTeX documentation for non OCaml code
#

uint64.inc:     uint64.nw
                $NOWEAVE -delay -autodefs c -index $prereq > $target

ast.inc:        ast.nw         
                $NOWEAVE -delay $prereq > $target

#
# include the yacc grammar in the manual for reference
#

$NAME.pod:      main.nw 
	$NOTANGLE -R$target $prereq > $target

${NAME}grammar.pod:      main.nw parse.output
	$NOTANGLE  -R$target $prereq > $target
	echo '/##grammar##/d
	.r !grep "^  *[0-9]" parse.output
	wq' | ed ${NAME}grammar.pod
                 
################################################################
# C code
################################################################

uint64.cmo      \
uint64.cmx:     uint64p.o

uint64p.o:      uint64p.c
                $OCAMLC $OCAMLC_FLAGS -c $prereq

################################################################
# asdl
################################################################

# ASDL does not support seperate compilation:  modules referring to
# each other must be in one file.  To overcome this limitation we
# concatenate all asdl files to one file and pass it to the asdlGen
# compiler. The noweb files defining the asdl files also contain 
# views for some of the definined types. So first all asdl files are
# concatenated and then all views.

ASDL =          ast.asdl   
VIEWS =         ast.view  
SMLVIEWS =      

ocaml.asdl:     $ASDL $VIEWS
                cat $ASDL           >  $target
                echo "view OCaml {" >> $target
                cat $VIEWS          >> $target
                echo "}"            >> $target

sml.asdl:       $ASDL $SMLVIEWS
                cat $ASDL           >  $target
                echo "view SML {"   >> $target
                cat $SMLVIEWS       >> $target
                echo "}"            >> $target

ast.ml          \
ast.mli         \
astUtil.ml      \
astUtil.mli:    ocaml.asdl
                asdlGen --ocaml --pickler=sexp $prereq

ast.sml         \
ast.sig         \
astUtil.sml     \
astUtil.sig:    sml.asdl                
                asdlGen --sml --pickler=sexp $prereq

################################################################
# binaries
################################################################

OBJ =           uint64p.o
CMOLIBS =       cllib.cma  asdl.cma
CMXLIBS =       cllib.cmxa asdl.cmxa

$NAME:          depend-check $CMO $OBJ
                $OCAMLC $OCAMLC_FLAGS -custom -o $target $CMOLIBS $OBJ $CMO 
                
$NAME.opt:      $CMX $OBJ
                $OCAMLO $OCAMLO_FLAGS -o $target $CMXLIBS $OBJ $CMX
                
# an OCaml interpreter with all our C code compiled in

ocamli:         $OBJ uint64.cmo
                $OCAMLTOP -custom -o $target uint64.cmo $OBJ 

################################################################
# update hierarchy
################################################################

$BINDIR/$NAME:          $NAME.opt
                        cp $prereq $target

$BINDIR/$NAME.prof:     $NAME
                        cp $prereq $target

$MANDIR/man1/$NAME.1:   $NAME.1
                        cp $prereq $target

$MANDIR/man1/${NAME}grammar.1:   ${NAME}grammar.1
                        cp $prereq $target
################################################################
# include version and name information
################################################################

this.ml:        this.in mkfile
		sed 	-e "s/@this@/$NAME-$VERSION/"\
			-e "s/@arch@/$ARCH/"\
		this.in > $target
                
################################################################
# recalculate dependencies
# make sure that generators are ran first
################################################################


depend:V:	src
		$OCAMLDEP *.mli *.ml > $DEPEND

# make sure DEPEND is up to date
depend-check:VQ: newer
	# check for $DEPEND
	if ./newer $DEPEND mkfile; then true;
	else
	  echo "$DEPEND is out of date; you must run 'mk depend' before continuing" 1>&2
	  exit 1
	fi
	
newer: newer.c
	cc -o $target $prereq

#
# create tags for vi(1)
#

tags:V:		src
                mltags *.ml *.mli *.mly

################################################################
# (high level) virtual targets
################################################################

update:V:       $BINDIR/$NAME                 \
                $BINDIR/$NAME.prof            \
                $MANDIR/man1/$NAME.1          \
                $MANDIR/man1/${NAME}grammar.1 \

clean:V:        
	        rm -f *.cmo *.cmx *.o
	        rm -f *.asdl *.view *.smlview
	        rm -f *.cmi
	        rm -f *.ml *.mli *.c *.mly *.mll this.in
	        rm -f *.sig *.sml
	        rm -f *.dvi *.log *.aux *.bbl *.blb *.blg
	        rm -f parse.output
	        rm -f *.html *.1 *.ps *.pod
	        rm -f *~

clobber:V:	clean
	        rm -f $NAME $NAME.opt newer



################################################################
# include dependencies
################################################################

<$DEPEND
