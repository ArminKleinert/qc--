
# ------------------------------------------------------------------ 
# $Id$ 
# ------------------------------------------------------------------ 
#
# Before you can do anything useful in this directory ../lib
# must contain the right set of libraries. So call 'mk' one time
# on the top level (..) first and then work locally in this directory.
#
#
# Useful high level targets
#
# all               - creat new byte code binary
#
# update            - create native code binary and
#                     update external directories 
#                     (../bin ../man ../lib)
#
# html dvi ps       - create documentation
#
# clean             - remove everything but real sources
#

NAME =      qc--
VERSION =   `date +%Y%m%d`

# ------------------------------------------------------------------ 
# paths
# ------------------------------------------------------------------ 

LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man


# ------------------------------------------------------------------ 
# rules and tools for OCaml
# ------------------------------------------------------------------ 

<../config/ocaml.mk

#
# compiler flags used by the rules just included
#

# we compile byte code for profiling

# OCAMLC =        ocamlcp -p f    
OCAMLC_FLAGS =  -I $LIBDIR -g
OCAMLO_FLAGS =  -I $LIBDIR 

# ------------------------------------------------------------------ 
# (high level) virtual targets
# ------------------------------------------------------------------ 

all:V:          $NAME

update:V:       $BINDIR/$NAME                 \
                $BINDIR/$NAME.prof            \
                $MANDIR/man1/$NAME.1          \
                $MANDIR/man1/${NAME}grammar.1 \

clean:V:        nwclean
                rm -f $CMO $CMX $CMI $OBJ
                rm -f $NAME $NAME.opt
                rm -f this.ml scan.ml parse.ml parse.mli
                rm -f ast.ml ast.mli astUtil.ml astUtil.mli
                rm -f *.dvi *.log *.aux *.bbl *.blb *.blg
                rm -f parse.output
                rm -f *.html *.1 *.ps

nwclean:V:
                rm -f *.inc
                rm -f main.ml cmdline.ml cmdline.mli this.in qc--.pod 
                rm -f ast.asdl astpp.mli astpp.ml
                rm -f scan.mll parse.mly
                rm -f main.html ast.html parser.html
                rm -f *.pod

# ------------------------------------------------------------------ 
# important file sets
# ------------------------------------------------------------------ 

MLI =           uint64.mli  \
                srcmap.mli  \
                error.mli   \
                cmdline.mli \
                ast.mli     \
                astUtil.mli \
                parse.mli   \
                env.mli     \
                types.mli   \
                const.mli   \
                fatenv.mli  \
                topsort.mli \

ML =            uint64.ml   \
                srcmap.ml   \
                error.ml    \
                this.ml     \
                ast.ml      \
                astUtil.ml  \
                parse.ml    \
                env.ml      \
                types.ml    \
                const.ml    \
                fatenv.ml   \
                topsort.ml  \
                scan.ml     \
                astpp.ml    \
                check.ml    \
                main.ml     \

# list all *.ml *.mli souces generated by some tool below
# we need to generated them before we can generated the list
# of dependencies (see target depend)

GENERATED =     this.ml scan.ml parse.ml parse.mli


CMO =           `echo $ML       | sed 's/\.ml/.cmo/g'`
CMX =           `echo $ML       | sed 's/\.ml/.cmx/g'`
OBJ =           `echo $ML       | sed 's/\.ml/.o/g'`
CMI =           `echo $ML $MLI  | sed 's/\.mli*/.cmi/g'`

# ------------------------------------------------------------------ 
# Noweb stuff - once this is stable the generic part should go to
# ../config/noweb.mk
# ------------------------------------------------------------------ 

NOWEAVE =       noweave   -filter emptydefn
NOTANGLE =      notangle  -filter emptydefn
CPIF =          cpif
LATEX =         latex
RERUN =         Rerun (LaTeX|to get cross-references right)

LINE =          '# %L "%F"%N'
OCAMLTANGLE =   'for f in $target; do $NOTANGLE -L"$LINE" -R$f $prereq | $CPIF $f; done'
MISCTANGLE  =   'for f in $target; do $NOTANGLE -R$f $prereq | $CPIF $f; done'

HTML =          `echo *.nw       | sed 's/\.nw/.html/g;'`

%.inc:          %.nw
                $NOWEAVE -delay -filter ../config/autodefs.ocaml -index $prereq > $target

uint64.inc:     uint64.nw
                $NOWEAVE -delay -autodefs c -index $prereq > $target


%.html:         %.nw
                $NOWEAVE -delay -filter ../config/autodefs.ocaml -index -html -filter l2h $prereq > $target


%.dvi:          %.tex
                $LATEX "\\scrollmode \\input $stem.tex"
                ltxcount=3
                while egrep -s "$RERUN" $stem.log && [ $ltxcount -gt 0 ]
                do
                    $LATEX "\\scrollmode \\input $stem.tex"
                    ltxcount=`expr $ltxcount - 1`
                done

%.ps:           %.dvi
                dvips -Ppdf -o $target $prereq

$NAME.dvi:      main.inc         \
                ast.inc          \
                parser.inc       \
                srcmap.inc       \
                error.inc        \
                env.inc          \
                types.inc        \
                fatenv.inc       \
                const.inc        \
                topsort.inc      \
                check.inc        \
                uint64.inc       \
                ../cllib/pp.inc  \
                ../cllib/pc.inc  \
                ../cllib/rx.inc  \
                ../cllib/rc.inc  \
                ../cllib/lc.inc  \
                ../test/test.inc \

dvi:V:          $NAME.dvi
ps:V:           $NAME.ps
html:V:         $HTML

# ------------------------------------------------------------------  
# sources generated from noweb sources
# ------------------------------------------------------------------  

bits.mli        \
bits.ml:        bits.nw
                eval $OCAMLTANGLE

uint64.mli      \
uint64.ml       \
uint64p.c:      uint64.nw
                eval $OCAMLTANGLE

value.ml:       value.nw
                eval $OCAMLTANGLE

check.mli       \
check.ml:       check.nw
                eval $OCAMLTANGLE

fatenv.mli      \
fatenv.ml:      fatenv.nw
                eval $OCAMLTANGLE

const.mli       \
const.ml:       const.nw
                eval $OCAMLTANGLE

topsorttest.ml  \
topsort.mli     \
topsort.ml:     topsort.nw
                eval $OCAMLTANGLE

types.mli       \
types.ml:       types.nw
                eval $OCAMLTANGLE

env.mli         \
env.ml:         env.nw
                eval $OCAMLTANGLE

error.mli       \
error.ml:       error.nw
                eval $OCAMLTANGLE

this.mli        \
this.in         \
main.ml         \
cmdline.mli:    main.nw
                eval $OCAMLTANGLE

astpp.mli       \
astpp.ml:       ast.nw
                eval $OCAMLTANGLE

ast.asdl:       ast.nw
                eval $MISCTANGLE

parse.mly       \
scan.mll:       parser.nw
                eval $MISCTANGLE

#
# include the yacc grammar in the manual for reference
#

$NAME.pod:      main.nw 
                eval $MISCTANGLE

${NAME}grammar.pod:      main.nw parse.output
                eval $MISCTANGLE
                echo '/##grammar##/d
                     .r !grep "^  *[0-9]" parse.output
                     wq' | ed ${NAME}grammar.pod
                 
#
# use autodefs.asdl - not part of noweb 2.9
#

ast.inc:        ast.nw         
                $NOWEAVE -delay $prereq > $target

srcmap.mli      \
srcmap.ml:      srcmap.nw
                eval $OCAMLTANGLE
                
# ------------------------------------------------------------------ 
# C code
# ------------------------------------------------------------------ 

uint64.cmo      \
uint64.cmx:     uint64p.o

uint64p.o:      uint64p.c
                $OCAMLC $OCAMLC_FLAGS -c $prereq

# ------------------------------------------------------------------ 
# asdl
# ------------------------------------------------------------------ 

ASDL =          asdlGen

%.ml            \
%.mli           \
%Util.ml        \
%Util.mli:      %.asdl
                $ASDL --ocaml --pickler=sexp $prereq 


# ------------------------------------------------------------------ 
# binaries
# ------------------------------------------------------------------ 

OBJ =           uint64p.o
CMOLIBS =       cllib.cma  asdl.cma
CMXLIBS =       cllib.cmxa asdl.cmxa

$NAME:          $CMO $OBJ
                $OCAMLC $OCAMLC_FLAGS -custom -o $target $CMOLIBS $OBJ $CMO 
                
$NAME.opt:      $CMX $OBJ
                $OCAMLO $OCAMLO_FLAGS -o $target $CMXLIBS $OBJ $CMX
                
#
# an OCaml interpreter with all our C code compiled in
#

ocamli:         $OBJ uint64.cmo
                $OCAMLTOP -custom -o $target uint64.cmo $OBJ 

# ------------------------------------------------------------------ 
# update hierarchy
# ------------------------------------------------------------------ 

$BINDIR/$NAME:          $NAME.opt
                        cp $prereq $target

$BINDIR/$NAME.prof:     $NAME
                        cp $prereq $target

$MANDIR/man1/$NAME.1:   $NAME.1
                        cp $prereq $target

$MANDIR/man1/${NAME}grammar.1:   ${NAME}grammar.1
                        cp $prereq $target
# ------------------------------------------------------------------ 
# include version and name information
# ------------------------------------------------------------------ 

this.ml:        this.in mkfile
		sed 	-e "s/@this@/$NAME-$VERSION/"\
			-e "s/@arch@/$ARCH/"\
		this.in > $target
                
# ------------------------------------------------------------------ 
# recalculate dependencies
# make sure that generators are run first
# ------------------------------------------------------------------ 


depend:V:	$GENERATED
		$OCAMLDEP *.mli *.ml > DEPEND

#
# create tags for vi(1)
#

tags:V:
                mltags *.ml *.mli *.mly

# ------------------------------------------------------------------ 
# include dependencies
# ------------------------------------------------------------------ 

<DEPEND
