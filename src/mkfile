# ------------------------------------------------------------------ 
# $Id$ 
# ------------------------------------------------------------------
# vim:tw=72 ts=8 sw=4 et:
#
# Before you start:
# (1) this module depends on other directories. Go to the toplevel 
#     directory and call: "mk". From there on you can work locally 
#     in this directory. 
#
# ------------------------------------------------------------------ 
# How to add a new foo.mli or foo.ml contained in a foo.nw file:
# (1) add foo.ml  to ML,  *after* all files it depends on
# (2) add foo.mli to MLI, keep the list in alphabetical order
#
# If you have troubles with undefined symbols during compilation or
# linking, check these two variables. Rebuild dependencies if
# necessary.
# 
# Useful targets to create documentation from foo.nw:
# foo.html          - make foo.html from foo.nw
# foo.dvi           - make foo.dvi  from foo.nw
#
# ------------------------------------------------------------------ 
# N.B. in building this mkfile, when we have a choice between making
# the mkfile clean and making mk's output readable, we make mk's output
# readable.

NAME =      qc--
VERSION =   `date +%Y%m%d`

# ------------------------------------------------------------------
# paths
# ------------------------------------------------------------------

TOP    =    ..

<   $TOP/config/config.mk

LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man


MLBURG =    $BINDIR/ocamlburg
MLBURGFIX = $BINDIR/ocamlburgfix

# ------------------------------------------------------------------
# (high level) virtual targets
# be careful to use only variables that are defined above
# ------------------------------------------------------------------
# INTERP = evaluating | residualizing
# change the variable below to extract the right variant 
# from *.nw files

INTERP =    evaluating
DEPEND =    DEPEND

all:V:      $NAME       qc--.lua
all.opt:V:  $NAME.opt   qc--.lua

update:V:       $BINDIR/$NAME     
update.opt:V:   $BINDIR/$NAME.opt

depend:V:   $DEPEND

test:VQ:     
            echo "you can run 'mk test' only from the toplevel ($TOP)"
            echo "developers can run 'mk dtest' or 'mk tx', but don't"
            echo "expect it to mean anything" 
            exit 1

tx:VQ: update
	    cd ../test; mk $MKFLAGS test

dtest:VEQ: add hello cut
	echo hello; ./hello
	echo add; ./add
	echo add 1 2 3 4; ./add 1 2 3 4
	echo cut; ./cut

'^'(add|hello|cut)'$':R: '\1'.c-- qc-- tqc
	./tqc -o $target $stem1.c--

clean.opt:V:    
            rm -f *.cmx *.o
            rm -f *.cmxa *.a

clean:V:    clean.opt
            rm -f *.cmi *.cmo
            rm -f *.cma
            

clobber:V:  clean
            rm -f $DEPEND
            rm -f *.sig 
            rm -f *.ml *.mli *.mll *.mly *.output
            rm -f *.c *.h 
            rm -f this.in
            rm -f *.inc *.tex *.dvi *.log *.aux *.bbl *.blb *.blg *.toc
            rm -f *.html *.ps *.pod
            rm -f *.pod *.1
            rm -f *~
            rm -f *.lua 
            rm -f $NAME $NAME.opt 
            rm -f `find . -type l -print`

# ------------------------------------------------------------------
# important file sets
# ------------------------------------------------------------------

# The order of files defines the link order.  So if you have troubles
# with undefined symbols during linking re-order this list
# accordingly.  No module must use any of its successors.

ML =            topsort.ml       \
                context.ml       \
                eqn.ml           \
                luautil.ml       \
                aux.ml           \
                strutil.ml       \
                idgen.ml         \
                error.ml         \
                this.ml          \
                parse.ml         \
                scan.ml          \
                types.ml         \
                mangle.ml        \
                rtlx.ml          \
                space.ml         \
                rtlop.ml         \
                expcheck.ml      \
                astpp.ml         \
                rtlutil.ml       \
                simplify.ml      \
		ep.ml            \
		cfg.ml           \
		dataflow.ml      \
                live.ml          \
		vfp.ml           \
                rtleqn.ml        \
                block.ml         \
                memalloc.ml      \
                talloc.ml        \
                automaton.ml     \
                automatongraph.ml\
		mflow.ml         \
		call.ml          \
                target.ml        \
                contn.ml         \
                rtldebug.ml      \
                interpemitrtl.ml \
		cfgx.ml          \
                interp.ml        \
                dummy.ml         \
                cfgutil.ml       \
		postexpander.ml  \
                expander.ml      \
		x86call.ml       \
		x86.ml           \
                x86rec.ml        \
		x86asm.ml        \
                mipsrec.ml       \
                mipsasm.ml       \
                mipscall.ml      \
                mips.ml          \
                alphacall.ml     \
                alpharec.ml      \
                alpha.ml         \
                alphaasm.ml      \
                proc.ml          \
                interpemit.ml    \
                asm.ml           \
                fenv.ml          \
                elab.ml          \
                typecheck.ml     \
                interpasm.ml     \
                astasm.ml        \
                dotasm.ml        \
                #cl# asdlasm.ml  \
                placevar.ml      \
                ast2ir.ml        \
                backplane.ml     \
                interval.ml      \
                lifetime.ml      \
                stack.ml         \
                colorgraph.ml    \
                driver.ml        \
                lualink.ml       \
                main.ml          \

# interfaces in alphabetical order

MLI =           alpha.mli         \
                alphaasm.mli      \
                alphacall.mli     \
                alpharec.mli      \
                asm.mli           \
                asdlasm.mli       \
                astasm.mli        \
                ast2ir.mli        \
                astpp.mli         \
                automaton.mli     \
                automatongraph.mli\
                aux.mli           \
                backplane.mli     \
                block.mli         \
		call.mli          \
                cfg.mli           \
                cfgx.mli          \
                cfgutil.mli       \
                colorgraph.mli    \
                context.mli       \
                contn.mli         \
                rtleqn.mli        \
		dataflow.mli      \
                dummy.mli         \
                driver.mli        \
                dotasm.mli        \
                elab.mli          \
                eqn.mli           \
		ep.mli            \
                error.mli         \
                expander.mli      \
                expcheck.mli      \
                fenv.mli          \
                idgen.mli         \
                interp.mli        \
                interpasm.mli     \
                interpemit.mli    \
                interval.mli      \
                lifetime.mli      \
                live.mli          \
                lualink.mli       \
                luautil.mli       \
                mangle.mli        \
                main.mli          \
                memalloc.mli      \
                mips.mli          \
                mipsasm.mli       \
                mipscall.ml       \
                mipsrec.mli       \
		mflow.mli         \
                parse.mli         \
                placevar.mli      \
		postexpander.mli  \
                proc.mli          \
                rtldebug.mli      \
                simplify.mli      \
                rtlop.mli         \
                interpemitrtl.mli \
                rtlutil.mli       \
                rtlx.mli          \
                scan.mli          \
                space.mli         \
                stack.mli         \
                strutil.mli       \
                talloc.mli        \
                target.mli        \
                this.mli          \
                topsort.mli       \
                types.mli         \
                typecheck.mli     \
		vfp.mli           \
		x86.mli           \
		x86call.mli       \
                x86rec.mli        \
		x86asm.mli        \

CMO = ${ML:%.ml=%.cmo}
CMX = ${ML:%.ml=%.cmx}


# The following list of files are scanned for dependencies. They are
# extracted from Noweb source files, or generated from files which are
# extracted from Noweb files. Add files here that are not in ML or MLI
# and that you want to be scanned.

SCAN =          $ML $MLI        \
                rtldebug.mli rtldebug.ml

# ------------------------------------------------------------------
# rules and tools 
# ------------------------------------------------------------------

<../config/ocaml.mk

OCAMLC_FLAGS =  -I $LIBDIR -ccopt -L$LIBDIR -g
PROFILE =
OCAMLO_FLAGS =  -I $LIBDIR -ccopt -L$LIBDIR $PROFILE -ccopt -static 

<../config/noweb.mk
<../config/man.mk

# ------------------------------------------------------------------
# binaries
# ------------------------------------------------------------------

CMOSYS  =       unix.cma str.cma
CMOCMM  =	cllib.cma asdl.cma lua.cma rtllib.cma gen.cma
CMOLIBS =       $CMOSYS $CMOCMM camlburg.cmo

CMXSYS  =       ${CMOSYS:%.cma=%.cmxa}
CMXCMM  =       ${CMOCMM:%.cma=%.cmxa}
CMXLIBS =       $CMXSYS $CMXCMM camlburg.cmx

LIBSLASHCMOLIBS = ${CMOCMM:%=$LIBDIR/%}
LIBSLASHCMXLIBS = ${CMXCMM:%=$LIBDIR/%}

OBJ =           $LIBDIR/uint64p.o

$NAME:          depend-check $CMO $OBJ $LIBSLASHCMOLIBS
                $OCAMLC $OCAMLC_FLAGS -custom -o $target $CMOLIBS $OBJ $CMO 

$NAME.opt:      depend-check $CMX $OBJ $LIBSLASHCMXLIBS
                $OCAMLO $OCAMLO_FLAGS         -o $target $CMXLIBS $OBJ $CMX

# ------------------------------------------------------------------
# copy files to their official directories
# ------------------------------------------------------------------

$BINDIR/$NAME:          $NAME
                        cp $prereq $target

$BINDIR/$NAME.opt:      $NAME.opt
                        cp $prereq $target

# ------------------------------------------------------------------
# LaTeX documentation
# ------------------------------------------------------------------
# Files we generate documentation from

HTML =          `echo *.nw                             | sed 's/\.nw/.html/g'`
INC  =          `echo *.nw  ../cllib/*.nw ../test/*.nw | sed 's/\.nw/.inc/g'`


html:V:         $HTML 

cfg.inc:D: cfg.nw
	noweave -n -filter "xxchunks -summary -merge $prereq" \
	  -filter $OCAMLDEFS -index $prereq > $target


# modules.tex can be used in qc--.tex where documentation for
# individual modules is included

modules.tex:VD: $INC
    echo $INC | sed 's!\([a-z0-9./]*inc\)!\\input{\1}!g' | fmt -w 10 > $target

# ------------------------------------------------------------------ 
# special cases, primarily for multiple sources in one .nw
# ------------------------------------------------------------------ 
# these rules clutter up the mkfile, but they make the output from mk,
# and especially from mk- n, more readable, so they are worth it.
#
# we don't use the nocond filter here because currently all our
# conditional code happens to be in the general case.

interval.mli:D: lifetime.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target
interval.ml:D:  lifetime.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

postexpander.mli:D: expander.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target
postexpander.ml:D:  expander.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

x86target.ml:D:  x86.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target


uint64p.c:D:    uint64.nw
                $NOTANGLE -L -R$target $prereq > $target

topsorttest.ml:D: topsort.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

this.mli:D:     main.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target
this.in:D:      main.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

qc--.lua:D:     luadriver.nw luacompile.nw colorgraph.nw 
                $NOTANGLE -L'$file "%F"%N$line %L%N' -R$target $prereq > $target

parse.mly:D:    parser.nw
                $NOTANGLE -R$target $prereq > $target
scan.mll:D:     parser.nw
                $NOTANGLE -R$target $prereq > $target
scan.mli:D:     parser.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

# ------------------------------------------------------------------ 
# MLburg generated files
# ------------------------------------------------------------------ 

x86rec.mlb:D:   x86rec.nw
	        $NOTANGLE -L"$LINE" -R$target $prereq > $target

x86rec.ml:D:    x86rec.mlb $MLBURG
	        $MLBURG x86rec.mlb  | $MLBURGFIX $target 

mipsrec.mlb:D:  mipsrec.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

mipsrec.ml:D:   mipsrec.mlb $MLBURG
                $MLBURG mipsrec.mlb | $MLBURGFIX $target

alpharec.mlb:D: alpharec.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

alpharec.ml:D:  alpharec.mlb $MLBURG
                $MLBURG alpharec.mlb | $MLBURGFIX $target

# ------------------------------------------------------------------
# include version and name information
# ------------------------------------------------------------------
# The ../doc/qc--.man dependency is across directories; best avoided.

this.ml:D:      this.in qc--.lua ../doc/qc--.man
                sed     -e "s/@this@/$NAME-$VERSION/"   \
                        this.in                         > $target
                echo 'let boot = "'                     >> $target
                sed     -e 's/\\/\\\\/g'                \
                        -e 's/"/\\"/g'                  \
                        qc--.lua                        >> $target    
                echo '"'                                >> $target        
                echo 'let manual ="'                    >> $target
                sed     -e 's/\\/\\\\/g'                \
                        -e 's/"/\\"/g'                  \
                        ../doc/qc--.man                 >> $target    
                echo '"'                                >> $target        
                echo 'let byteorder = "'$config_endian'"' >> $target
                echo 'let arch_os   = "'$config_arch'"'   >> $target    

# ------------------------------------------------------------------
# recalculate dependencies
# make sure that generators are ran first
# ------------------------------------------------------------------

$DEPEND:D:      $SCAN mkfile
                $OCAMLDEP -I $LIBDIR $prereq > $DEPEND
            

# make sure DEPEND is up to date
depend-check:VQ: $BINDIR/newer
    # check for $DEPEND
    if $BINDIR/newer $DEPEND mkfile; then true;
    else
      echo "$DEPEND is out of date;" 1>&2
      echo "you must run 'mk depend' before continuing" 1>&2
      exit 1
    fi


<$DEPEND


showcmo:QV: 
	echo CMO=$CMO
	echo
	echo CMX=$CMX
	echo
	echo LIBSLASHCMOLIBS=$LIBSLASHCMOLIBS
