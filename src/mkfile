# ------------------------------------------------------------------ 
# $Id$ 
# ------------------------------------------------------------------ 
#
# Before you can do anything useful in this directory ../lib
# must contain the right set of libraries. So call 'mk' one time
# on the top level (..) first and then work locally in this directory.
#
# all               - creat new byte code binary
#
# update            - create native code binary and
#                     update external directories 
#                     (../bin ../man ../lib)
#
# ocamli            - OCaml interpreter with C modules compiled in
#
# html dvi ps       - create documentation
#
# clean             - remove everything but real sources
#
#
# foo.html          - make foo.html from foo.nw
# foo.dvi           - make foo.dvi  from foo.nw

NAME =      qc--
VERSION =   `date +%Y%m%d`

# ------------------------------------------------------------------ 
# paths
# ------------------------------------------------------------------ 

LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man

# ------------------------------------------------------------------ 
# (high level) virtual targets
# ------------------------------------------------------------------ 

all:V:          $NAME

# ------------------------------------------------------------------ 
# rules and tools for OCaml
# ------------------------------------------------------------------ 

<../config/ocaml.mk

# compiler flags used by the rules just included
# we compile byte code for profiling

# OCAMLC =        ocamlcp -p f    
OCAMLC_FLAGS =  -I $LIBDIR -g
OCAMLO_FLAGS =  -I $LIBDIR 

# ------------------------------------------------------------------ 
# important file sets
# ------------------------------------------------------------------ 

# The order of files defines the link order.  So if you have troubles
# with undefined symbols during linking re-order this list
# accordingly.  No module must use any of its successors.

ML =            uint64.ml    \
                aux.ml       \
                idgen.ml     \
                srcmap.ml    \
                error.ml     \
                bits.ml      \
                this.ml      \
                ast.ml       \
                astUtil.ml   \
                parse.ml     \
                env.ml       \
                types.ml     \
                value.ml     \
                mangle.ml    \
                fenv.ml      \
                target.ml    \
                topsort.ml   \
                scan.ml      \
                astpp.ml     \
                elab.ml      \
                rtl.ml       \
                automaton.ml \
                rtl2ast.ml   \
                acfg.ml      \
                cfg.ml       \
                lowercopy.ml \
                ast2ir.ml    \
                asm2ast.ml   \
                driver.ml    \
                main.ml      \

# list all *.ml *.mli souces generated by some tool below
# we need to generated them before we can generated the list
# of dependencies (see target depend)

GENERATED =     this.ml     \
                scan.ml     \
                parse.ml    \
                parse.mli   \
                ast.mli     \
                ast.ml      \
                astUtil.ml  \
                astUtil.mli \
                rtl.ml      \
                rtl.mli     \
                rtlUtil.ml  \
                rtlUtil.mli \


CMO =           `echo $ML       | sed 's/\.ml/.cmo/g'`
CMX =           `echo $ML       | sed 's/\.ml/.cmx/g'`
OBJ =           `echo $ML       | sed 's/\.ml/.o/g'`

# ------------------------------------------------------------------ 
# Noweb stuff - once this is stable the generic part should go to
# ../config/noweb.mk
# ------------------------------------------------------------------ 

NOWEAVE =       noweave   -filter emptydefn
NOTANGLE =      notangle  -filter emptydefn
CPIF =          cpif
LATEX =         latex
RERUN =         Rerun (LaTeX|to get cross-references right)

LINE =          '# %L "%F"%N'
OCAMLTANGLE =   'for f in $target; do $NOTANGLE -L"$LINE" -R$f $prereq | $CPIF $f; done'
MISCTANGLE  =   'for f in $target; do $NOTANGLE -R$f $prereq | $CPIF $f; done'

HTML =          `echo *.nw                             | sed 's/\.nw/.html/g'`
INC  =          `echo *.nw  ../cllib/*.nw ../test/*.nw | sed 's/\.nw/.inc/g'`

# ------------------------------------------------------------------ 

# generate a self-contained LaTeX document from a LaTeX file that
# is supposed to be read by \input from a master LaTeX file. This rule
# allows to specify extra packages like tabularx to be included. 
# The here-document ended by EOF relies on a single TAB character at
# the beginning of a line - so don't substitute it for spaces.

%.tex:	%.inc
	cp $stem.inc $stem.tex
	ed -s $stem.tex <<EOF 
	1
	i
	\documentclass{article}
	\usepackage{noweb}
	\usepackage{tabularx}
	\usepackage{hyperref}
	\pagestyle{noweb}
	\noweboptions{}
	\begin{document}
	\nwfilename{$stem.nw}
	\tableofcontents
	\nwbegindocs{}
	.
	\$
	a
	\end{document}
	.
	w
	q
	EOF 

%.inc:          %.nw
                $NOWEAVE -delay -filter ../config/autodefs.ocaml -index $prereq > $target

uint64.inc:     uint64.nw
                $NOWEAVE -delay -autodefs c -index $prereq > $target

%.html:         %.nw
                $NOWEAVE -delay -filter ../config/autodefs.ocaml \
                    -index -html -filter l2h $prereq > $target

%.bbl:          %.bib %.aux
                bibtex $stem 
                    
%.dvi:          %.tex macros.tex
                $LATEX "\\scrollmode \\input $stem.tex"
                ltxcount=3
                while egrep -s "$RERUN" $stem.log && [ $ltxcount -gt 0 ]
                do
                    $LATEX "\\scrollmode \\input $stem.tex"
                    ltxcount=`expr $ltxcount - 1`
                done

%.ps:           %.dvi
                dvips -Ppdf -o $target $prereq

# ------------------------------------------------------------------ 

$NAME.dvi:      $INC

dvi:V:          $NAME.dvi
ps:V:           $NAME.ps
html:V:         $HTML

# ------------------------------------------------------------------  
# sources generated from noweb sources
# ------------------------------------------------------------------  

lowercopy.mli   \
lowercopy.ml    \
acfg.mli        \
acfg.ml         \
cfg.mli         \
cfg.ml:         cfg.nw
                eval $OCAMLTANGLE 

asm2ast.mli     \
asm2ast.ml:     asm2ast.nw
                eval $OCAMLTANGLE

rtl2ast.mli     \
rtl2ast.ml:     rtl2ast.nw
                eval $OCAMLTANGLE

target.mli      \
target.ml:      target.nw
                eval $OCAMLTANGLE

idgen.mli       \
idgen.ml:       idgen.nw
                eval $OCAMLTANGLE

mangle.mli      \
mangle.ml:      mangle.nw
                eval $OCAMLTANGLE

automaton.ml    \
automaton.mli:  automaton.nw
                eval $OCAMLTANGLE

driver.mli      \
driver.ml:      driver.nw
                eval $OCAMLTANGLE

asm2.mli:       asm2.nw
                eval $OCAMLTANGLE

aux.ml          \
aux.mli:        aux.nw
                eval $OCAMLTANGLE

fenv.ml         \
fenv.mli:       fenv.nw
                eval $OCAMLTANGLE

ast2ir.mli      \
ast2ir.ml:      ast2ir.nw
                eval $OCAMLTANGLE

rtl.smlview     \
rtl.view        \
rtl.asdl:       rtl.nw
                eval $MISCTANGLE

bits.mli        \
bits.ml:        bits.nw
                eval $OCAMLTANGLE

uint64.mli      \
uint64.ml       \
uint64p.c:      uint64.nw
                eval $OCAMLTANGLE

value.mli       \
value.ml:       value.nw
                eval $OCAMLTANGLE

elab.mli        \
elab.ml:        elab.nw
                eval $OCAMLTANGLE

topsorttest.ml  \
topsort.mli     \
topsort.ml:     topsort.nw
                eval $OCAMLTANGLE

types.mli       \
types.ml:       types.nw
                eval $OCAMLTANGLE

env.mli         \
env.ml:         env.nw
                eval $OCAMLTANGLE

error.mli       \
error.ml:       error.nw
                eval $OCAMLTANGLE

this.mli        \
this.in         \
main.ml         \
cmdline.mli:    main.nw
                eval $OCAMLTANGLE

astpp.mli       \
astpp.ml:       ast.nw
                eval $OCAMLTANGLE

ast.view        \
ast.asdl:       ast.nw
                eval $MISCTANGLE

parse.mly       \
scan.mll:       parser.nw
                eval $MISCTANGLE

#
# include the yacc grammar in the manual for reference
#

$NAME.pod:      main.nw 
                eval $MISCTANGLE

${NAME}grammar.pod:      main.nw parse.output
                eval $MISCTANGLE
                echo '/##grammar##/d
                     .r !grep "^  *[0-9]" parse.output
                     wq' | ed ${NAME}grammar.pod
                 
#
# autodefs.asdl - not part of noweb 2.9
#

ast.inc:        ast.nw         
                $NOWEAVE -delay $prereq > $target

srcmap.mli      \
srcmap.ml:      srcmap.nw
                eval $OCAMLTANGLE
                
# ------------------------------------------------------------------ 
# C code
# ------------------------------------------------------------------ 

uint64.cmo      \
uint64.cmx:     uint64p.o

uint64p.o:      uint64p.c
                $OCAMLC $OCAMLC_FLAGS -c $prereq

# ------------------------------------------------------------------ 
# asdl
# ------------------------------------------------------------------ 

# ASDL does not support seperate compilation:  modules referring to
# each other must be in one file.  To overcome this limitation we
# concatenate all asdl files to one file and pass it to the asdlGen
# compiler. The noweb files defining the asdl files also contain 
# views for some of the definined types. So first all asdl files are
# concatenated and then all views.

ASDL =          ast.asdl        \
                rtl.asdl        \
                                
VIEWS =         ast.view        \
                rtl.view        \

SMLVIEWS =      rtl.smlview     \


ocaml.asdl:     $ASDL $VIEWS
                cat $ASDL           >  $target
                echo "view OCaml {" >> $target
                cat $VIEWS          >> $target
                echo "}"            >> $target

sml.asdl:       $ASDL $SMLVIEWS
                cat $ASDL           >  $target
                echo "view SML {"   >> $target
                cat $SMLVIEWS       >> $target
                echo "}"            >> $target

ast.ml          \
ast.mli         \
astUtil.ml      \
astUtil.mli     \
                \
rtl.ml          \
rtl.mli         \
rtlUtil.ml      \
rtlUtil.mli:    ocaml.asdl
                asdlGen --ocaml --pickler=sexp $prereq

ast.sml         \
ast.sig         \
astUtil.sml     \
astUtil.sig     \
                \
rtl.sml         \
rtl.sig         \
rtlUtil.sml     \
rtlUtil.sig     : sml.asdl                
                asdlGen --sml --pickler=sexp $prereq

# ------------------------------------------------------------------ 
# binaries
# ------------------------------------------------------------------ 

OBJ =           uint64p.o
CMOLIBS =       cllib.cma  asdl.cma
CMXLIBS =       cllib.cmxa asdl.cmxa

$NAME:          $CMO $OBJ
                $OCAMLC $OCAMLC_FLAGS -custom -o $target $CMOLIBS $OBJ $CMO 
                
$NAME.opt:      $CMX $OBJ
                $OCAMLO $OCAMLO_FLAGS -o $target $CMXLIBS $OBJ $CMX
                
# an OCaml interpreter with all our C code compiled in

ocamli:         $OBJ uint64.cmo
                $OCAMLTOP -custom -o $target uint64.cmo $OBJ 

# ------------------------------------------------------------------ 
# update hierarchy
# ------------------------------------------------------------------ 

$BINDIR/$NAME:          $NAME.opt
                        cp $prereq $target

$BINDIR/$NAME.prof:     $NAME
                        cp $prereq $target

$MANDIR/man1/$NAME.1:   $NAME.1
                        cp $prereq $target

$MANDIR/man1/${NAME}grammar.1:   ${NAME}grammar.1
                        cp $prereq $target
# ------------------------------------------------------------------ 
# include version and name information
# ------------------------------------------------------------------ 

this.ml:        this.in mkfile
		sed 	-e "s/@this@/$NAME-$VERSION/"\
			-e "s/@arch@/$ARCH/"\
		this.in > $target
                
# ------------------------------------------------------------------ 
# recalculate dependencies
# make sure that generators are ran first
# ------------------------------------------------------------------ 


depend:V:	$GENERATED
		$OCAMLDEP *.mli *.ml > DEPEND

#
# create tags for vi(1)
#

tags:V:
                mltags *.ml *.mli *.mly

# ------------------------------------------------------------------ 
# (high level) virtual targets
# ------------------------------------------------------------------ 

update:V:       $BINDIR/$NAME                 \
                $BINDIR/$NAME.prof            \
                $MANDIR/man1/$NAME.1          \
                $MANDIR/man1/${NAME}grammar.1 \

clean:V:        
                rm -f $CMO $CMX $OBJ
                rm -f *.cmi
                rm -f $NAME $NAME.opt
                rm -f *.ml *.mli *.c 
                rm -f *.dvi *.log *.aux *.bbl *.blb *.blg
                rm -f parse.output
                rm -f *.html *.1 *.ps


# ------------------------------------------------------------------ 
# include dependencies
# ------------------------------------------------------------------ 

<DEPEND
