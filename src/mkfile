
# ------------------------------------------------------------------ 
# $Id$ 
# ------------------------------------------------------------------ 

NAME =      qc--
VERSION =   `date +%Y%m%d`

# ------------------------------------------------------------------ 
# paths
# ------------------------------------------------------------------ 

LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man


# ------------------------------------------------------------------ 
# rules and tools for OCaml
# ------------------------------------------------------------------ 

<../config/ocaml.mk

#
# compiler flags used by the rules just included
#

OCAMLC_FLAGS =  -I $LIBDIR
OCAMLO_FLAGS =  -I $LIBDIR

# ------------------------------------------------------------------ 
# (high level) virtual targets
# ------------------------------------------------------------------ 

all:V:          $NAME

update:V:       $BINDIR/$NAME $MANDIR/man1/$NAME.1

clean:V:        nwclean 
                rm -f $CMO $CMX $CMI $OBJ
                rm -f $NAME $NAME.opt
                rm -f this.ml scan.ml parse.ml parse.mli
                rm -f ast.ml ast.mli astUtil.ml astUtil.mli
                rm -f *.dvi *.log *.aux *.bbl *.blb *.blg
                rm -f parse.output
                rm -f *.html *.1 *.ps

nwclean:V:
                rm -f *.inc
                rm -f main.ml cmdline.ml cmdline.mli ast.asdl
                
# ------------------------------------------------------------------ 
# important file sets
# ------------------------------------------------------------------ 

MLI =           error.mli   \
                cmdline.mli \
                ast.mli     \
                astUtil.mli \
                parse.mli   \

ML =            error.ml    \
                this.ml     \
                ast.ml      \
                astUtil.ml  \
                astpp.ml    \
                parse.ml    \
                scan.ml     \
                main.ml     \

# list all *.ml *.mli souces generated by some tool below
# we need to generated them before we can generated the list
# of dependencies (see target depend)

GENERATED =     this.ml scan.ml parse.ml parse.mli


CMO =           `echo $ML       | sed 's/\.ml/.cmo/g'`
CMX =           `echo $ML       | sed 's/\.ml/.cmx/g'`
OBJ =           `echo $ML       | sed 's/\.ml/.o/g;'`
CMI =           `echo $ML $MLI  | sed 's/\.mli*/.cmi/g'`

# ------------------------------------------------------------------ 
# Noweb stuff - once this is stable the generic part should go to
# ../config/noweb.mk
# ------------------------------------------------------------------ 

NOWEAVE =       noweave
NOTANGLE =      notangle
CPIF =          cpif
LATEX =         latex
TIDY =          tidy
RERUN =         Rerun (LaTeX|to get cross-references right)

LINE =          '# %L "%F"%N'
EXTRACT =       'for f in $target; do $NOTANGLE -L"$LINE" -R$f $prereq | $CPIF $f; done'

%.inc:          %.nw
                $NOWEAVE -delay -index -autodefs ocaml $prereq > $target

%.html:         %.tex
                hevea $stem.hva $stem.tex || true
                $TIDY -f /dev/null -imc $stem.html || true

%.dvi:          %.tex
                $LATEX "\\scrollmode \\input $stem.tex"
                ltxcount=3
                while egrep -s "$RERUN" $stem.log && [ $ltxcount -gt 0 ]
                do
                    $LATEX "\\scrollmode \\input $stem.tex"
                    ltxcount=`expr $ltxcount - 1`
                done

%.ps:           %.dvi
                dvips -Ppdf -o $target $prereq

# ------------------------------------------------------------------  
# sources generated from noweb sources
# ------------------------------------------------------------------  

main.ml         \
cmdline.mli:    main.nw
                eval $EXTRACT

astpp.mli       \
astpp.ml        \
ast.asdl:       ast.nw
                for f in $target; do $NOTANGLE -R$f $prereq | $CPIF $f; done

$NAME.pod:      main.nw
                for f in $target; do $NOTANGLE -R$f $prereq | $CPIF $f; done

ast.inc:        ast.nw         
                $NOWEAVE -delay $prereq > $target

# ------------------------------------------------------------------  
# documentation
# ------------------------------------------------------------------  

$NAME.html      \
$NAME.dvi:      main.inc ast.inc


html:V:         $NAME.html
dvi:V:          $NAME.dvi
ps:V:           $NAME.ps



# ------------------------------------------------------------------ 
# asdl
# ------------------------------------------------------------------ 

ASDL =          asdlGen

%.ml %.mli %Util.ml %Util.mli:  %.asdl
                $ASDL --ocaml --pickler=sexp $prereq 


# ------------------------------------------------------------------ 
# binaries
# ------------------------------------------------------------------ 

CMOLIBS =       cllib.cma  asdl.cma
CMXLIBS =       cllib.cmxa asdl.cmxa

$NAME:          $CMO
                $OCAMLC $OCAMLC_FLAGS -o $target $CMOLIBS $CMO
                
$NAME.opt:      $CMX
                $OCAMLO $OCAMLO_FLAGS -o $target $CMXLIBS $CMX
                

# ------------------------------------------------------------------ 
# update hierarchy
# ------------------------------------------------------------------ 

$BINDIR/$NAME:          $NAME.opt
                        cp $prereq $target

$MANDIR/man1/$NAME.1:   $NAME.1
                        cp $prereq $target

# ------------------------------------------------------------------ 
# include version and name information
# ------------------------------------------------------------------ 

this.ml:        this.in mkfile
		sed 	-e "s/@this@/$NAME-$VERSION/"\
			-e "s/@arch@/$ARCH/"\
		this.in > $target
                
# ------------------------------------------------------------------ 
# recalculate dependencies
# make sure that generators are run first
# ------------------------------------------------------------------ 


depend:V:	$GENERATED
		$OCAMLDEP *.mli *.ml > DEPEND

#
# create tags for vi(1)
#

tags:V:
                mltags *.ml *.mli *.mly

# ------------------------------------------------------------------ 
# include dependencies
# ------------------------------------------------------------------ 

<DEPEND
