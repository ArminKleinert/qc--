# ------------------------------------------------------------------ 
# $Id$ 
# ------------------------------------------------------------------
# vim:tw=72 ts=8 sw=4 et:
#
# Before you start:
# (1) this module depends on other directories. Go to the toplevel 
#     directory and call: "mk". From there on you can work locally 
#     in this directory. 
#
# ------------------------------------------------------------------ 
# How to add a new foo.mli or foo.ml contained in a foo.nw file:
# (1) add foo.ml  to ML,  *after* all files it depends on
# (2) add foo.mli to MLI, keep the list in alphabetical order
#
# If you have troubles with undefined symbols during compilation or
# linking, check these two variables. Rebuild dependencies if
# necessary.
# 
# Useful targets to create documentation from foo.nw:
# foo.html          - make foo.html from foo.nw
# foo.dvi           - make foo.dvi  from foo.nw
#
# ------------------------------------------------------------------ 
# N.B. in building this mkfile, when we have a choice between making
# the mkfile clean and making mk's output readable, we make mk's output
# readable.

NAME =      qc--
VERSION =   `date +%Y%m%d`

# ------------------------------------------------------------------
# paths
# ------------------------------------------------------------------

TOP    =    ..
LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man


MLBURG =    $BINDIR/ocamlburg

# ------------------------------------------------------------------
# (high level) virtual targets
# be careful to use only variables that are defined above
# ------------------------------------------------------------------
# INTERP = evaluating | residualizing
# change the variable below to extract the right variant 
# from *.nw files

INTERP =    evaluating
DEPEND =    DEPEND.$INTERP


all:V:      $NAME       qc--.lua
all.opt:V:  $NAME.opt   qc--.lua

update:V:   $BINDIR/$NAME                 \
            $MANDIR/man1/$NAME.1          \
            $MANDIR/man1/${NAME}grammar.1 

update.opt:V: $BINDIR/$NAME.opt            \
            $MANDIR/man1/$NAME.1           \
            $MANDIR/man1/${NAME}grammar.1 

dvi:V:      $NAME.dvi
ps:V:       $NAME.ps

depend:V:   $DEPEND

test:VQ:     
            echo "you can run 'mk test' only from the toplevel ($TOP)"
            echo "developers can run 'mk dtest', but don't expect it to"
            echo "mean anything" 
            exit 1

dtest:VQ:
            echo "no tests here at the moment"

clean:V:        
            rm -f *.cmo *.cmx *.o
            rm -f *.asdl *.view *.smlview
            rm -f *.cmi
            rm -f *.ml *.mli *.c *.mly *.mll this.in
            rm -f *.sig *.sml
            rm -f *.dvi *.log *.aux *.bbl *.blb *.blg *.toc
            for i in *.nw; do rm -f "`basename $i .nw`.tex"; done
            rm -f parse.output
            rm -f *.html *.1 *.ps *.pod
            rm -f *~
            rm -f *.inc
            rm -f *.lua 
    
clobber:V:  clean
            rm -f $NAME $NAME.opt newer


# ------------------------------------------------------------------
# important file sets
# ------------------------------------------------------------------

# The order of files defines the link order.  So if you have troubles
# with undefined symbols during linking re-order this list
# accordingly.  No module must use any of its successors.

ML =            impossible.ml    \
                topsort.ml       \
                eqn.ml           \
                luautil.ml       \
                aux.ml           \
                strutil.ml       \
                idgen.ml         \
                error.ml         \
                this.ml          \
                asm3.ml          \
                parse.ml         \
                scan.ml          \
                types.ml         \
                mangle.ml        \
                rtlx.ml          \
                const2.ml        \
                space.ml         \
                rtlop.ml         \
                expcheck.ml      \
                astpp.ml         \
                rtleval2.ml      \
                register.ml      \
                rtlutil.ml       \
                block.ml         \
                contn.ml         \
                memalloc.ml      \
                talloc.ml        \
                automaton2.ml    \
                target2.ml       \
                fenv.ml          \
                elab.ml          \
                targets.ml       \
                cfgprop.ml       \
                rtldebug.ml      \
                cfg4.ml          \
                cfgutil.ml       \
                expander.ml      \
                dummyexpander.ml \
                msparcenc.ml     \
                msparcdec.ml     \
                sparcexpander.ml \
                backplane.ml     \
                proc.ml          \
                astasm.ml        \
		# sparcasm.ml    \
                msparcasm.ml     \
                dotasm.ml        \
                asdlasm.ml       \
                placevar.ml      \
                copyinout.ml     \
                ast3ir.ml        \
                live.ml          \
                interval.ml      \
                lifetime.ml      \
                linscan.ml       \
                colorgraph.ml    \
                driver2.ml       \
                main2.ml         \

# interfaces in alphabetical order

MLI =           asm3.mli        \
                asdlasm.mli     \
                astasm.mli      \
                ast3ir.mli      \
                astpp.mli       \
                automaton2.mli  \
                aux.mli         \
                backplane.mli   \
                block.mli       \
                cfg4.mli        \
                cfgprop.mli     \
                cfgutil.mli     \
                colorgraph.mli  \
                contn.mli       \
                const2.mli      \
                copyinout.mli   \
                driver2.mli     \
                dotasm.mli      \
                elab.mli        \
                eqn.mli         \
                error.mli       \
                expander.mli    \
                expcheck.mli    \
                fenv.mli        \
                idgen.mli       \
                impossible.mli  \
                interval.mli    \
                lifetime.mli    \
                linscan.mli     \
                live.mli        \
                luautil.mli     \
                mangle.mli      \
                main2.mli       \
                memalloc.mli    \
                msparcenc.mli   \
                msparcdec.mli   \
                parse.mli       \
                placevar.mli    \
                proc.mli        \
                register.mli    \
                # rtlasdl.mli     \
                # rtlasdlUtil.mli \
                rtldebug.mli    \
                rtleval2.mli    \
                rtlop.mli       \
                rtlutil.mli     \
                rtlx.mli        \
                scan.mli        \
                space.mli       \
		# sparcasm.mli	\
                msparcasm.mli   \
                strutil.mli     \
                talloc.mli      \
                target2.mli     \
                targets.mli     \
                this.mli        \
                topsort.mli     \
                types.mli       \

CMO = ${ML:%.ml=%.cmo}
CMX = ${ML:%.ml=%.cmx}


# The following list of files are scanned for dependencies. They are
# extracted from Noweb source files, or generated from files which are
# extracted from Noweb files. Add files here that are not in ML or MLI
# and that you want to be scanned.

SCAN =          $ML $MLI        \
                rtldebug.mli rtldebug.ml

# ------------------------------------------------------------------
# rules and tools 
# ------------------------------------------------------------------

<../config/ocaml.mk

OCAMLC_FLAGS =  -I $LIBDIR -ccopt -L$LIBDIR -g
OCAMLO_FLAGS =  -I $LIBDIR -ccopt -L$LIBDIR -p -ccopt -static 

<../config/noweb.mk

CC =            gcc

# ------------------------------------------------------------------
# binaries
# ------------------------------------------------------------------

CMOSYS  =       unix.cma str.cma
CMOCMM  =	cllib.cma asdl.cma lua.cma rtllib.cma gen.cma
CMOLIBS =       $CMOSYS $CMOCMM camlburg.cmo

CMXSYS  =       ${CMOSYS:%.cma=%.cmxa}
CMXCMM  =       ${CMOCMM:%.cma=%.cmxa}
CMXLIBS =       $CMXSYS $CMXCMM camlburg.cmx

LIBSLASHCMOLIBS = ${CMOCMM:%=$LIBDIR/%}
LIBSLASHCMXLIBS = ${CMXCMM:%=$LIBDIR/%}

OBJ =           $LIBDIR/uint64p.o

$NAME:          depend-check $CMO $OBJ $LIBSLASHCMOLIBS
                $OCAMLC $OCAMLC_FLAGS -custom -o $target $CMOLIBS $OBJ $CMO 

$NAME.opt:      depend-check $CMX $OBJ $LIBSLASHCMXLIBS
                $OCAMLO $OCAMLO_FLAGS         -o $target $CMXLIBS $OBJ $CMX

# ------------------------------------------------------------------
# copy files to their official directories
# ------------------------------------------------------------------

$BINDIR/$NAME:          $NAME
                        cp $prereq $target

$BINDIR/$NAME.opt:      $NAME.opt
                        cp $prereq $target

$MANDIR/man1/$NAME.1:   $NAME.1
                        cp $prereq $target

$MANDIR/man1/${NAME}grammar.1:   ${NAME}grammar.1
                        cp $prereq $target


# ------------------------------------------------------------------
# LaTeX documentation
# ------------------------------------------------------------------
# Files we generate documentation from

HTML =          `echo *.nw                             | sed 's/\.nw/.html/g'`
INC  =          `echo *.nw  ../cllib/*.nw ../test/*.nw | sed 's/\.nw/.inc/g'`


$NAME.dvi:      $INC

html:V:         $HTML 

# modules.tex can be used in qc--.tex where documentation for
# individual modules is included

modules.tex:V: $INC
    echo $INC | sed 's!\([a-z0-9./]*inc\)!\\input{\1}!g' | fmt -w 10 > $target

# ------------------------------------------------------------------ 
# special cases, primarily for multiple sources in one .nw
# ------------------------------------------------------------------ 
# these rules clutter up the mkfile, but they make the output from mk,
# and especially from mk- n, more readable, so they are worth it.
#
# we don't use the nocond filter here because currently all our
# conditional code happens to be in the general case.

interval.mli:   lifetime.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target
interval.ml:    lifetime.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

uint64p.c:      uint64.nw
                $NOTANGLE -L -R$target $prereq > $target

topsorttest.ml: topsort.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

this.mli:       main2.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target
this.in:        main2.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target
qc--.lua:       main2.nw
                $NOTANGLE -L'$file "%F"%N$line %L%N' -R$target $prereq > $target


astpp.mli:      ast.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target
astpp.ml:       ast.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

parse.mly:      parser.nw
                $NOTANGLE -R$target $prereq > $target
scan.mll:       parser.nw
                $NOTANGLE -R$target $prereq > $target
scan.mli:       parser.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

#
# LaTeX documentation for non OCaml code
#

newer.inc:      newer.nw
                $NOWEAVE -delay -autodefs c -index $prereq > $target

#
# include the yacc grammar in the manual for reference
#

$NAME.pod:      main2.nw 
    $NOTANGLE -R$target $prereq > $target

${NAME}grammar.pod:      main2.nw parse.output
    $NOTANGLE  -R$target $prereq > $target
    echo '/##grammar##/d
    .r !grep "^  *[0-9]" parse.output
    wq' | ed ${NAME}grammar.pod

# ------------------------------------------------------------------ 
# MLburg generated files
# ------------------------------------------------------------------ 

dummyexpander.ml:   dummyexpander.mlb $MLBURG
                    $MLBURG dummyexpander.mlb > $target

dummyexpander.mlb:  dummyexpander.nw
                    $NOTANGLE -L"$LINE" -R$target $prereq > $target

sparcexpander.ml:   sparcexpander.mlb $MLBURG
                    $MLBURG sparcexpander.mlb > $target

sparcexpander.mlb:  sparcexpander.nw
                    $NOTANGLE -L"$LINE" -R$target $prereq > $target

# ------------------------------------------------------------------ 
# The Minisparc Encoder, Decoder -- experimental for CL
# ------------------------------------------------------------------ 

msparcenc.mli:      minisparc.nw
                    $NOTANGLE -L"$LINE" -R$target $prereq > $target

msparcenc.ml:       minisparc.nw
                    $NOTANGLE -L"$LINE" -R$target $prereq > $target
                    
msparcdec.mli:      minisparc.nw
                    $NOTANGLE -L"$LINE" -R$target $prereq > $target
                    
msparcdec.ml:       minisparc.nw
                    $NOTANGLE -L"$LINE" -R$target $prereq > $target

# ------------------------------------------------------------------
# include version and name information
# ------------------------------------------------------------------

this.ml:        this.in qc--.lua
                sed     -e "s/@this@/$NAME-$VERSION/"   \
                        -e "s/@arch@/$ARCH/"            \
                        this.in                         > $target
                echo 'let boot = "'                     >> $target
                sed     -e 's/\\/\\\\/g'                \
                        -e 's/"/\\"/g'                  \
                        qc--.lua                        >> $target    
                echo '"'                                >> $target        

# ------------------------------------------------------------------
# recalculate dependencies
# make sure that generators are ran first
# ------------------------------------------------------------------

$DEPEND:D:    $SCAN
            $OCAMLDEP -I $LIBDIR $prereq > $DEPEND
            

# make sure DEPEND is up to date
depend-check:VQ: newer
    # check for $DEPEND
    if ./newer $DEPEND mkfile; then true;
    else
      echo "$DEPEND is out of date;" 1>&2
      echo "you must run 'mk depend' before continuing" 1>&2
      exit 1
    fi

newer: newer.c
    $CC -o $target $prereq


<$DEPEND


showcmo:QV: 
	echo CMO=$CMO
	echo
	echo CMX=$CMX
	echo
	echo LIBSLASHCMOLIBS=$LIBSLASHCMOLIBS
