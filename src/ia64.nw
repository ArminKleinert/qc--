% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

\section{Back end for IA-64}

<<ia64.mli>>=
val arch : string
module Spaces : sig
  val m : Space.t
  val a : Space.t
  val r : Space.t
  val t : Space.t
  val f : Space.t
  val u : Space.t
  val c : Space.t   (* PC at 0 *)
  val v : Space.t
end

module Post   : Postexpander.S
module X      : Expander.S

val target    : Ast2ir.tgt
val placevars : Ast2ir.proc -> Automaton.t
@ 

% ---------------------------------------------------------------------------
\subsection{Name and Storage Spaces}
% ---------------------------------------------------------------------------

<<ia64.ml>>=
module SS = Space.Standard64
module R  = Rtl

let arch  = "ia64"  (* architecture name *)
@ 

<<ia64.ml>>=
module Spaces = struct
  module S = Space
  let bo = Rtl.LittleEndian
  let id = Rtl.Identity
  let m = Space.Standard64.m bo [8; 16; 32; 64]
  let a = Space.Standard64.a 8   id [64]  (* these are branch registers *)
  let r = Space.Standard64.r 128 id [64]
  let t = Space.Standard64.t     id [64]
  let p = Space.Standard64.p 64  id [ 1]  (* these are predicate registers *)
  let w = Space.Standard64.w     id [ 1]
  let f = S.checked { S.space = 'f'; S.doc = "floating-point registers"
                    ; S.cellwidth = 64
                    ; S.indexwidth = 7 ; S.indexlimit = Some 127
                    ; S.aggregation = id; S.widths = [64]
                    ; S.classification = S.Reg
                    }
  let all_floats = { S.stands_for = 'f'; S.index_ok = (fun _ -> true)
                   ; S.set_doc = "all floating-point registers"
                   } 
  let u = S.checked { S.space = 'u'; S.doc = "floating-point temporaries"
                    ; S.cellwidth = 64

					(* What is the significance of a 31-bit indexwidth? *)
                    ; S.indexwidth = 31; S.indexlimit = None
                    ; S.aggregation = id; S.widths = [64]
                    ; S.classification = S.Temp all_floats
                    }
  let v = Space.Standard64.v   id [64]
  let c = Space.Standard64.c 1 id [64]
end

let locations = SS.locations Spaces.c

let pc    = locations.SS.pc  (* instruction pointer / program counter *)
let cc    = locations.SS.cc
let sp    = R.reg ('r', 12, 64)
let ra    = R.reg ('a',  0, 64)
let raloc = R.fetch ra 64
@ 

% ---------------------------------------------------------------------------
\subsection{Postexpander}
% ---------------------------------------------------------------------------

<<ia64.ml>>=
module RP   = Rtl.Private
module Up   = Rtl.Up
module Down = Rtl.Dn

module Post = struct
  <<ia64 postexpander>>
end
@ 
<<ia64 postexpander>>=
let byte_order = Rtl.LittleEndian
let wordsize   = 64
@ 
The postexpander may need to allocate temporaries.
<<ia64 postexpander>>=
let talloc = ref None
let get_talloc () = match !talloc with
  | Some s -> s
  | None   -> Impossible.impossible 
                    "Temp allocator not registered with postexpander"
let remember_allocator ta = talloc := Some ta
let remember_slot_allocator _ = ()

(* don't eta reduce 'talloc' *)
let talloc space = Talloc.Multiple.reg space (get_talloc ()) 
@ 
\paragraph{Utility Functions}
<<ia64 postexpander>>=
let temploc  t = Rtl.reg t
let tempval  ((space, n, w) as t) = R.fetch (temploc t) w
let tempwidth (space, n, w)       = w
let tempstore tmp exp = R.store (temploc tmp) exp (tempwidth tmp)
let mem addr = R.mem R.none 'm' byte_order 64 addr

let ui s = Printf.eprintf "*** unimp %s" s; []
@ 
\paragraph{Contexts}
Addresses go in the integer registers, so we use these contexts:
<<ia64 postexpander>>=
type context = (Talloc.Multiple.t -> int -> Register.t) * (Register.t -> bool)
let icontext = Talloc.Multiple.reg 't', fun (c, _, _) -> c = 'r' || c = 't'
let fcontext = Talloc.Multiple.reg 'u', fun (c, _, _) -> c = 'f' || c = 'u'
let bcontext = Talloc.Multiple.reg 'w', fun (c, _, _) -> c = 'p' || c = 'w'
let acontext = icontext

(* this is just bogus *)
let rcontext = (fun x y -> Impossible.unimp "Unsupported soft rounding mode")
               ,fun r -> r = ('d', 0, 2)
@ 
\paragraph{Addressing modes}
The only addressing mode is the obvious one.
<<ia64 postexpander>>=
module Address = struct
  type t = Rtl.exp
  let reg (space, n, w) = R.fetch (R.reg (space, n, w)) w
end
@ 
There is no x86-like stack in the IA64.
<<ia64 postexpander>>=
include Postexpander.Nostack(Address)
@ 

\subsubsection{Data Movement}
We treat the Itanium strictly as a 64-bit machine, so we assume the width of
everything is~64.
<<ia64 postexpander>>=
let load ~dst:((_, _, w) as dst) ~addr assn =
  assert (w = 64);
  match Down.exp addr with
  |	RP.App(op, [RP.Fetch(RP.Reg(s,i,w), _); opnd]) ->
         [R.store (temploc dst)
            (R.fetch (R.mem assn 'm' byte_order 64 (tempval (s,i,w))) 64) 64
         ;R.store (temploc (s,i,w)) addr 64]
  |	_ -> [R.store (temploc dst) 
			(R.fetch (R.mem assn 'm' byte_order 64 addr) 64) 64]

let store ~addr ~src:((_, _, w) as src) assn =
  assert (w = 64);
  [R.store (R.mem assn 'm' byte_order 64 addr) (tempval src) 64]
@ 
We also provide sixn-extending loads and stores:
NOTE THAT WE PROBABLY NEED TO FIX THIS UP TOO WITH RESPECT TO LOADS AND
STORES FROM OFFSETS.
<<ia64 postexpander>>=
let extend opname n e = R.app (R.opr opname   [n; 64]) [e]
let lobits        n e = R.app (R.opr "lobits" [64; n]) [e]
let sxload ~dst:((_, _, w) as dst) ~addr n assn =
  if w <> 64 then Impossible.unimp "widening of temporaries";
  [R.store (temploc dst)
             (extend "sx" n (R.fetch (R.mem assn 'm' byte_order n addr) n)) 64]
let zxload ~dst:((_, _, w) as dst) ~addr n assn =
  assert (w = 64);
  [R.store (temploc dst)
             (extend "zx" n (R.fetch (R.mem assn 'm' byte_order n addr) n)) 64]
let lostore ~addr ~src:((_, _, w) as src) n assn =
  assert (w = 64);
  [ R.store (R.mem assn 'm' byte_order n addr) 
            (lobits n (R.fetch (temploc src) n)) n
            (* we diverge from Pentium here; don't understand *)
  ]
@ 
This code comes from x86.nw, which is not sure of floating-point compatability:
<<ia64 postexpander>>=
let move_rtl dst src = R.store (temploc dst) (tempval src) (tempwidth src)
let move ~dst ~src   = if dst = src then [] else [move_rtl dst src]

let li  ~dst const = [R.store (temploc dst) (Up.const const) (tempwidth dst)]
let lix ~dst e     = [R.store (temploc dst) e                (tempwidth dst)]
@ 

\subsubsection{Operator Contexts}
<<ia64 postexpander>>=
module SM = Strutil.Map
let operators = Context.standard icontext fcontext rcontext acontext bcontext
let resmap    = List.fold_left (fun m (n, a, r)-> SM.add n r m) SM.empty operators
let argmap    = List.fold_left (fun m (n, a, r)-> SM.add n a m) SM.empty operators
let arg_contexts   (n, _) = try SM.find n argmap 
                            with Not_found -> Impossible.impossible 
                                    ("cannot find arg context for "^n)
let result_context (n, _) = try SM.find n resmap
                            with Not_found -> Impossible.impossible
                                    ("cannot find result context for "^n)
let constant_context w = icontext

let rtlop ~dst op tmpl = [tempstore dst 
	                      (R.app (Up.opr op) (List.map tempval tmpl))]

let binop ~dst op tmp1 tmp2 = match op with
| ("mul_trunc", ws) ->
    let f1 = talloc 'u' 64 in
    let f2 = talloc 'u' 64 in
    let ops = [move_rtl f1 tmp1; move_rtl f2 tmp2]
      @ (rtlop f1 ("fmul", ws) [f1; f2; ('f',0,64)])
      @ move dst f1
    in List.rev ops
| _ -> rtlop dst op [tmp1;tmp2]

let unop  ~dst op tmp       = rtlop dst op [tmp]

let block_copy ~dst assn1 ~src assn2 width = ui "block_copy"
@
\subsubsection{Control Flow}
We hope there's only one PC on the Itanium.
<<ia64 postexpander>>=
let pc_lhs = pc
let pc_rhs = pc

(* note that instructions need to be specified in reverse order! *)
let br ~tgt = 
  let tempr = talloc 'v' 64 in
  [ R.store pc_lhs (tempval tempr) 64
  ; R.store (temploc tempr) (tempval tgt) 64 ]
(* RRO temp
[R.store pc_lhs (tempval  tgt) 64]
*)

let b  ~tgt = [R.store pc_lhs (Up.const tgt) 64]

let effects = List.map Up.effect
let call  ~tgt ~others = [R.par (R.store pc_lhs (Up.const tgt) 64 :: effects others)]
let callr ~tgt ~others = [R.par (R.store pc_lhs (tempval tgt) 64 :: effects others)]

let cut_to effs = [R.par (effects effs)]

let bc x (opr, ws) y ~tgt =
  let tempr = talloc 'w' 1 in
  assert (ws = [64]);
  [ R.guard (tempval tempr) (R.store pc_lhs (Up.const tgt) 64)
  ; R.store (temploc tempr) (R.app (R.opr opr ws) (List.map tempval [x;y])) 64
  ]

(* RRO FIX bnegate *)
let bnegate r = match Down.rtl r with
| RP.Rtl [g, (RP.Store(pc, tgt, 64) as eff)] when pc = Down.loc pc_lhs ->
     Up.rtl (RP.Rtl [RP.App(("not", [64]), [g]), eff])
| _ -> Impossible.impossible "ill-formed IA64 conditional branch"
@

\subsubsection{Other}

<<ia64 postexpander>>=
let don't_touch_me es = false
@ 

\subsection{Building the Target}

We provide the IA64 postexpander as a parameter to the generic code expander.
<<ia64.ml>>=
module X = Expander.IntFloatAddr (Post)
@ 

Standard control flow.
<<ia64.ml>>=
module T = Target
module F = Mflow.MakeStandard (
  struct
     let pc_lhs = Post.pc_lhs
     let pc_rhs = Post.pc_rhs
     let ra_reg    = ra
     let ra_offset = 8  (* size of instruction -- THIS IS A GUESS! *)
  end)
@ 

We find somewhere to store globals.
<<ia64.ml>>=
module A = Automaton
let ( *> ) = A.( *> )
let globals base = 
  let width w = if   w <= 8 then 8 else if w <= 16 then 16 else if w <= 32 then 32
                else Aux.round_up_to 64 w in
  let align = function 8 -> 1 | 16 -> 2 | _ -> 4 in
  A.at ~start:base ~memsize:8 ~byteorder:Post.byte_order 
   (A.widen width *> A.align_to align *>
    A.overflow ~growth:Memalloc.Up ~max_alignment:16)
@ 
We write a helper function to take care of expanding out load/stores through
offsets.
<<ia64.ml>>=
let ldst_expand rtl =
  let extract_reg_w op = function 
	| [_; RP.Fetch((RP.Reg _) as r,w)] -> (r,w)
	| [RP.Fetch((RP.Reg _) as r,w); _] -> (r,w)
	| _ -> let (opname,_) = op in
      Impossible.impossible ("could not find base register for ld/st") in
  match Down.rtl rtl with
  (* load from offset *)
  |	RP.Rtl [g,RP.Store(dst,RP.Fetch(RP.Mem(s,agg,mw,
					       (RP.App(op,exps) as e),assn),w'),w)
           ] -> let (reg, regw) = extract_reg_w op exps in
                List.map (fun x -> Up.rtl (RP.Rtl [g, x]))
                    [ RP.Store(dst, e, regw)
                    ; RP.Store(dst, RP.Fetch(RP.Mem(s,agg,mw,
						    RP.Fetch(dst,regw),assn),
					     w'), w) ]

  (* store from offset *)
  (* NOTE: right now, we have a hack to rewrite stores from offsets
   * in the recognizer; the Right Way (seen in the next code chunk)
   * doesn't seem to actually work because the temporaries assigned
   * don't actually get mapped to hardware regs. for some reason
   * perhaps because this is actually outside the postexpander *)

  (* default case *)
  |	_ -> [rtl]
@ 

<<how we would prefer to write the above code>>=
let ldst_expand rtl =
  let extract_reg_w op = function 
	| [_; RP.Fetch((RP.Reg _) as r,w)] -> (r,w)
	| [RP.Fetch((RP.Reg _) as r,w); _] -> (r,w)
	| _ -> let (opname,_) = op in
      Impossible.impossible ("could not find base register for ld/st") in
  match Down.rtl rtl with
  (* load from offset *)
  |	RP.Rtl [g,RP.Store(dst,RP.Fetch(RP.Mem(s,agg,mw,
					       (RP.App(op,exps) as e),assn),w'),w)
           ] -> let (reg, regw) = extract_reg_w op exps in
                List.map (fun x -> Up.rtl (RP.Rtl [g, x]))
                    [ RP.Store(dst, e, regw)
                    ; RP.Store(dst, RP.Fetch(RP.Mem(s,agg,mw,
						    RP.Fetch(dst,regw),assn),
					     w'), w) ]

  (* store from offset *)
  |	RP.Rtl [g,RP.Store(RP.Mem(s,agg,mw,(RP.App(op,exps) as e),assn), src, w)
           ] -> let (reg, regw) = extract_reg_w op exps in
                let tempr = Down.loc (Post.temploc (Post.talloc 't' 64)) in
                List.map (fun x -> Up.rtl (RP.Rtl [g, x]))
                    [ RP.Store(tempr, e, regw)
                    ; RP.Store(RP.Mem(s, agg, mw, RP.Fetch(tempr, regw), assn),
							   src, w) ]

  (* default case *)
  |	_ -> [rtl]
@ 

Spilling and reloading.
<<ia64.ml>>=
(* expansion here once caused infinite loop *)
let spill_expand p r = (* [r] *) ldst_expand r
let spill  p t l =
  spill_expand p (Automaton.store l (Post.tempval t) (Post.tempwidth t))
let reload p t l =
  spill_expand p (R.store (Post.temploc t) (Automaton.fetch l (Post.tempwidth t)) (Post.tempwidth t))

let return_to this_ra =
  R.par [R.store pc raloc Post.wordsize ; R.store pc raloc Post.wordsize]
@ 

<<ia64.ml>>=
let target =
  let spaces = [ Spaces.m; Spaces.a; Spaces.r; Spaces.t; Spaces.f
               ; Spaces.u; Spaces.v; Spaces.c; Spaces.p; Spaces.w ] in
  { T.name = "ia64"

  ; T.byteorder   = Post.byte_order
  ; T.wordsize    = Post.wordsize
  ; T.pointersize = Post.wordsize
  ; T.vfp         = SS.vfp
  ; T.alignment   = 4
  ; T.memsize     = 8
  ; T.spaces      = spaces
  ; T.reg_ix_map  = T.mk_reg_ix_map spaces
  ; T.distinct_addr_sp = false
  ; T.float       = "ieee754"

  ; T.spill       = spill
  ; T.reload      = reload

  ; T.bnegate     = F.bnegate cc
  ; T.goto        = F.goto
  ; T.jump        = F.jump
  ; T.call        = F.call
  ; T.branch      = F.branch

  ; T.cc_specs    = A.init_cc
  ; T.cc_spec_to_auto = Ia64call.cconv ~return_to (F.cutto sp)
  ; T.globals     = globals

  (* there is bogosity below *)
  ; T.rounding_mode = R.reg ('?', 99, 64)
  ; T.named_locs    = Strutil.assoc2map []
  ; T.data_section  = "data"
  ; T.charset       = "latin1"
  }
@ 

\subsection{Variable Placement}
The machine accepts 32, 64, and 82-bit floating-point values.
We deem any 82-bit value a float and examine the hints on all other values
to classify them.

<<ia64.ml>>=
let warning s = Printf.eprintf "backend warning: %s\n" s
let placevars = 
  let is_float      w hint _ = w = 82 || (hint = "float" && (w = 32 || w = 64)) in
  let strange_float w hint   = w = 82 && hint <> "float" in
  let strange_int   w hint   = hint = "float" && not (is_float w hint ()) in
  let warn ~width:w ~alignment:a ~hint:h =
      if strange_float w h then
        warning "82-bit variable not hinted float but will go as float anyway"
      else if strange_int w h then
        warning
          (Printf.sprintf "%d-bit variable hinted float but will go as integer" w) in
  let mk_stage ~temps =
    A.choice
      [ is_float,               A.widen (Aux.round_up_to ~multiple_of:64) *> temps 'u';
        (fun w h _ -> w <= 64), A.widen (fun _ -> 64) *> temps 't';
        A.is_any,               A.widen (Aux.round_up_to ~multiple_of: 8);
      ] in
  Placevar.mk_automaton
     ~warn ~vfp:target.T.vfp ~memsize:target.T.memsize
     ~byteorder:Post.byte_order mk_stage
@ 
