% vim: ts=8 sw=4 et:

% ------------------------------------------------------------------ 
\section{RTL Instructions}
% ------------------------------------------------------------------ 

Nodes of the control flow graph {\cfg} embed instructions, where an
instruction is an abstract data type [[Cfg4.Instr]].  Most phases of the
compiler use {\rtl}s as instruction representation and thus this module
defines such an instruction.

<<rtlinstr.mli>>=
type t          = Rtl.rtl
val nop:        t                               (* does nothing *)
val defs:       t -> Register.Set.t             (* defines *)
val uses:       t -> Register.Set.t             (* uses    *)
val kills:      t -> Register.Set.t             (* kills   *)
val to_ast:     t -> Ast.body list              (* AST representation *)
val to_string:  t -> string                     (* only for debugging *)
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

<<rtlinstr.ml>>=
type t        = Rtl.rtl

let nop       = Rtl.par []
let defs  rtl = let _,write = Rtlutil.ReadWrite.sets rtl in write
let uses  rtl = let read,_  = Rtlutil.ReadWrite.sets rtl in read
let kills rtl = Register.Set.empty

let to_ast rtl    = [Ast.StmtBody (Rtlutil.ToAST.rtl rtl)]
let to_string rtl = Rtlutil.ToString.rtl rtl
@



    
