% vim: ts=8 sw=4 et:

% ------------------------------------------------------------------ 
\section{MIPS Recognizer}
% ------------------------------------------------------------------ 

This module provides a recognizer for {\mips} {\rtl}s. The recognizer
has two interfaces. The first is a predicate that is true, if an {\rtl}
is a {\mips} instruction. The second returns an assembly-language string
representation of the instruction.

<<mipsrec.mli>>=
val is_instruction: Rtl.rtl -> bool
val to_string:      Rtl.rtl -> string
@

It is a checked run-time error to pass an {\rtl} to [[to_string]] that
is not a {\mips} instruction.

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

The implementation is guided by the book \emph{mips Risc Architecture}
by Gerry Kane, published by Prentice Hall.

The recognizer is generated from a {\burg} specification. The [[head]]
part precedes code generated from [[rules]], the [[tail]] part follows
it.

<<mipsrec.mlb>>=
%head {: <<head>> :}
%tail {: <<tail>> :}
%term <<terminal types>>
%%
<<rules>>
@

The usual abbreviations for modules go into the [[head]] clause.

<<head>>=
module RP = Rtl.Private
module RU = Rtlutil
module Up = Rtl.Up
module Dn = Rtl.Dn
module SS = Space.Standard32
@

We report a fatal error with [[error]]. We do not expect to recover from
such an error; it is something that should not happen and is caused by
an internal inconsistency.

<<head>>=
exception Error of string
let error msg = raise (Error msg)   
let sprintf   = Printf.sprintf (* useful for formatting msg *)
@

The [[guard]] function turns a predicate into a cost function that can
be used in a dynmaic cost expression.

<<head>>=
let guard p = if p then 0 else Camlburg.inf_cost
@

Some utilities for building strings.

<<head>>=
let native b =
    assert (Bits.width b = 32);
    Nativeint.to_string (Bits.U.to_native b)

let cat = String.concat ""

let reg n   = "$"  ^ string_of_int n
let freg n  = "$f" ^ string_of_int n

let suffix = function
    | 8  -> "b"      
    | 16 -> "h"
    | 32 -> "w"
    | w  -> error (sprintf "not a MIPS width: %d" w)

let zx    = "u"  (* to construct op-code *) 
let sx    = ""
let width = string_of_int
@

% ------------------------------------------------------------------ 
\subsection{Recognizer Rules}
% ------------------------------------------------------------------ 

Note that the {\mips} assembler provides pseudo instructions that
translate into multiple machine instructions. If we would emit binary
instructions we would have to implement these pseudo instructions here.

\begin{quote}
\begin{tabularx}{\linewidth}{@{}>{\ttfamily}lX@{}}
    \emph{Nonterminal} & \emph{Meaning} \\ 
    \hline
\end{tabularx}
\end{quote}

We use [[x]] as a universal terminal type whenever we need one. 

<<terminal types>>=
bits n x w
@

<<rules>>=
const:      Bits(bits)          {: native bits :}
symbol:     Link(x, w:int)      {: x#mangled_text :}
@

\paragraph{Registers}

<<rules>>=
regl:       Reg('r', n:int, w:int)  {: reg  n :}
regl:       Reg('f', n:int, w:int)  {: freg n :}

pcl:        Reg('c',  0, w:int) {: () :}
spl:        Reg('r', 29, w:int) {: () :}
ral:        Reg('r', 31, w:int) {: () :}

reg:        Fetch(regl,w:int)   {: regl   :}
pc:         Fetch(pcl,32)       {: () :}
sp:         Fetch(spl,32)       {: () :}
ra:         Fetch(ral,32)       {: () :}


@

\paragraph{Addresses}

<<rules>>=
meml:       Mem(addr,w:int)     {: addr :}
mem:        Fetch(meml,w:int)   {: meml :}

addr:       reg                 {: cat ["("; reg; ")"]   :}
addr:       imm                 {: imm                   :}
addr:       Add(imm,reg)        {: cat [imm;"(";reg;")"] :}
addr:       Add(reg,imm)        {: cat [imm;"(";reg;")"] :}
addr:       symbol              {: symbol                :}
@

\paragraph{Constant Expressions}

<<rules>>=
imm:        const               {: const                 :} 
imm:        symbol              {: symbol                :}
imm:        Add(symbol,imm)     {: cat [symbol;"+";imm]  :}
imm:        Add(imm,symbol)     {: cat [symbol;"+";imm]  :}
@

\paragraph{Data Movement}

Load register from memory. A load of a value smaller than 32 bits
implies a zero or sign extension.
zero 

<<rules>>=

inst:       Store(regl,symbol,32)
            {: cat ["l"; suffix 32; " "; regl; ","; symbol] :}

inst:       Store(regl,mem,32)
            {: cat ["l"; suffix 32; " "; regl; ","; mem] :}

inst:       Store(regl,imm,32)
            {: cat ["l"; suffix 32; " "; regl; ","; imm] :}


inst:       Store(regl, Sx(Fetch(mem,x:int)), w:int)
            {: cat ["l"; suffix w; sx; " "; regl; ","; mem] :}

inst:       Store(regl, Zx(Fetch(mem,x:int)), w:int) 
            {: cat ["l"; suffix w; zx; " "; regl; ","; mem] :}
@

Store register to memory. No extension here; the 8, 16, or 32 bits are
simply written to memory.

<<rules>>=
inst:       Store(meml, reg, w:int)
            {: cat ["s"; suffix w; " "; reg; ","; meml] :}
@

Moves between registers.

<<rules>>=
inst:       Store(regl, reg, 32)
            {: cat ["move"; " "; regl; ","; reg] :}
@

\paragraph{Control Flow}

<<rules>>=
inst:       Goto(symbol)
            {: cat ["b"; " "; symbol] :}

inst:       Goto(addr)
            {: cat ["j"; " "; addr] :}

inst:       Par(Goto(addr),Store(ral,pc,32))
            {: cat ["jal"; " "; addr] :} 
@

\paragraph{Other Instructions}

<<rules>>=
inst:       Nop() {: "nop" :}
@

% ------------------------------------------------------------------ 
\subsection{Debugging Support}
% ------------------------------------------------------------------ 

Uncomment the next rule to get a printout of the tree burg tries to
match.

<<rules>>=
inst: any [100]         {: cat ["<";any;">"] :}

any : True  ()          {: cat [ "True"  ] :}
any : False ()          {: cat [ "False" ] :}
any : Link(x, w:int)    {: cat [ "Link(";x#mangled_text;",";width w;")" ] :}
any : Late(string,w:int){: cat [ "Late(";string;",";width w;")" ] :}
any : Bits(bits)        {: cat [ "Bits(b)" ] :}

any : Fetch (any, w:int){: cat [ "Fetch(";any;",";width w;")" ] :}

any : Add(x:any, y:any) {: cat [ "Add(";x;", ";y;")" ] :}
any : Sx(any)           {: cat [ "Sx(";any;")" ] :}
any : Zx(any)           {: cat [ "Zx(";any;")" ] :}
any : Lobits(any)       {: cat [ "Lobits(";any;")" ] :}

any : Mem(any, w:int)   {: cat [ "Mem(";any;",";width w;")" ] :}
any : Reg(char, n:int, w:int) 
                        {: cat [ "Reg('";Char.escaped char;"',"
                               ;width n;","; width w;")" ] :}

any : Store (dst:any, src:any, w:int)
                        {: cat [ "Store(";dst;",";src;",";width w;")" ] :}
any : Kill(any)         {: cat [ "Kill(";any;")" ] :}

any : Guarded(guard:any, any) 
                        {: cat [ "Guarded(";guard;",";any;")" ] :}
any : Par(l:any, r:any) {: cat [ "Par(";l;",";r;")" ] :}
any : Goto(any)         {: cat [ "Goto(";any;")" ] :}
any : Setflags(any)     {: cat [ "Setflags(";any;")" ] :}

any : Jcc(string, any)  {: cat [ "Jcc(";string;",";any;")" ] :}
@


% ------------------------------------------------------------------ 
\subsection{Interfacing {\rtl}s with the Expander}
% ------------------------------------------------------------------ 

The principle interface is easy: {\rtl} constructors are mapped to
constructor functions of the same name. Because some transformations are
difficult to express in {\burg}, several operators and effects are
matched as special cases in {\ocaml}.

<<tail>>=
let const = function
    | RP.Bool _                 -> error "boolean found"
    | RP.Link(s,w)              -> conLink s w
    | RP.Bits(b)                -> conBits b
    | RP.Late(s,w)              -> error (sprintf "late constant %s found" s)

<<tail>>=
let rec exp = function
    | RP.Const(k)               -> const k
    | RP.Fetch(l,w)             -> conFetch (loc l) w
    <<special cases for [[App]]>>
    | RP.App((o,_),_)           -> error (sprintf "unknown operator %s" o)

and loc = function
    | RP.Reg(sp,i,w)            -> conReg sp i w
    | RP.Mem('m',a,w,e,ass)     -> conMem (exp e) w
    | RP.Mem(sp,_,_,_,_)        -> error (sprintf "mem-space space %c" sp)
    | RP.Var(s,i,w)             -> error (sprintf "var %s found" s)
    | RP.Slice _                -> error "cannot handle slice"
@

<<tail>>= 
let effect = function
    <<special cases for [[Store]]>>
    | RP.Store(l,e,w)           -> conStore (loc l) (exp e) w
    | RP.Kill(l)                -> error "cannot handle kill"

let guarded g stmt = match g with
    | RP.Const(RP.Bool b)       -> if b then effect stmt else conNop ()
    <<special cases for [[guarded]]>>
    | _                         -> error "cannot handle guarded effect"

let rec geffects = function
    | []                        -> conNop ()
    | [g, s]                    -> guarded g s
    | (g, s) :: t               -> conPar (guarded g s) (geffects t) 

let rtl (RP.Rtl es) = geffects es
@

% ------------------------------------------------------------------ 
\subsection{Special cases}
% ------------------------------------------------------------------ 

<<special cases for [[Store]]>>=
| RP.Store(RP.Reg('c',i,w),r,_)
  when i = SS.indices.SS.pc   -> conGoto (exp r)
@

<<special cases for [[App]]>>=
@

<<special cases for [[guarded]]>>=
@

    
% ------------------------------------------------------------------ 
\subsection{The exported recognizers}
% ------------------------------------------------------------------ 

If an error occurs, we emit the error message to [[stderr]] and include
it in the output. This will lead to errors with the assembler but makes
debugging easier because we do not abort after the first problem. Revise
this once the expander is more mature.

<<tail>>=
let rtl_to_string = RU.ToReadableString.rtl

let dump msg rtl =
    List.iter prerr_string
    [ "error in recognizer: "
    ; msg
    ; " on "
    ; rtl_to_string rtl
    ; "\n"
    ]

let to_string r =
    try 
        let plan = rtl (Dn.rtl r) in
        plan.inst.Camlburg.action ()
    with
        | Camlburg.Uncovered -> cat ["not an instruction: "
                                    ; rtl_to_string r
                                    ]
        | Error msg          -> ( dump msg r 
                                ; sprintf "error: %s" (rtl_to_string r)
                                )

let is_instruction r =
    try 
        let plan = rtl (Dn.rtl r) in
        plan.inst.Camlburg.cost < 100
    with
        | Camlburg.Uncovered -> false
        | Error msg          -> ( dump msg r 
                                ; false
                                )
@        
