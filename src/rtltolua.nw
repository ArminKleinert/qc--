% -*- mode: Noweb; noweb-code-mode: caml-mode -*- %
% vim: ts=8 sw=4 et:

% ------------------------------------------------------------------ 
\section{RTL to Lua}
% ------------------------------------------------------------------ 

This file provides functions that convert an RTL to Lua code readable by 
the {\PAL} interpreter.

% ------------------------------------------------------------------ 
\subsection{RTL Lua Representation}
% ------------------------------------------------------------------ 

To run {\PAL} code through the interpreter, we must first convert it into
the Lua-based format the interpreter expects.
This module provides a translation from an RTL to a string representing its
Lua-style counterpart.

<<rtltolua.mli>>=
val rtl: out_channel -> Rtl.rtl -> unit
val exp: out_channel -> Rtl.exp -> unit
@ 

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

<<rtltolua.ml>>=
<<ToLua>>
@ 

% ------------------------------------------------------------------ 
\subsubsection{Conversion to Lua}
% ------------------------------------------------------------------ 

<<ToLua>>=
module R     = Rtl.Private
let fprintf  = Printf.fprintf
@ 

<<ToLua>>=
let quoted        q = "\"" ^ q ^ "\""

let parenthesized p = "("  ^ p ^ ")"
let luafunc       f args = "CMM." ^ f ^ parenthesized args ^ "\n"

let push   kind c = luafunc ("push_" ^ kind) (quoted c)
let nopush kind c = c

(*
let argstack op s =
  match op with
  |	"fetch" -> "pop" ^ s
  |	"store" -> "push" ^ s
  |	_       -> assert false
*)

let valstack   op s = op ^ s
let argstack        = valstack
let commentout _  _ = "comment"

let tybits b = 
  match b with
  |	Types.Bool    -> "bool"
  |	Types.Bits(i) -> "bits" ^ string_of_int i

let const f c =
	match c with
    | R.Bool(true)    -> f "literal" "1"
    | R.Bool(false)   -> f "literal" "0"
    | R.Bits b        -> f "literal" (string_of_int (Bits.U.to_int b))

    | R.Link(sym, w)  -> f "symbol" sym#text
    | R.Late(name, w) -> f "symbol" name
@ 

<<ToLua>>=
(* but what about the operator's return type? *)
let opr op w = 
  let opty, result = Rtlop.Types.mono (Rtl.opr op w) in
  luafunc "apply_operator"  ((quoted op) ^ "," ^
							 (quoted 
								((String.concat "," (List.map tybits opty)) ^ 
								 ":" ^ (tybits result))))

let byteorder = function
  |	Rtl.BigEndian    -> quoted "BIG"
  |	Rtl.LittleEndian -> quoted "LITTLE"
  |	Rtl.Identity     -> quoted "NotImplemented"

(* what is identity? *)

let alignment = string_of_int

let rec expr' f e =
	match e with
    | R.Const c           -> const f c
    | R.Fetch(loc, _)     -> 
		let (prefix, func_f, func_suffix, args) = location' loc in
		prefix ^ luafunc (func_f "fetch" func_suffix) args
    | R.App((op, ww), ee) -> (String.concat "\n" (List.map (expr' push) ee)) ^ 
		                     opr op ww
@ 

<<ToLua>>=
and location' = function
    | R.Mem (sp, agg, width, e, ass) -> 
		( expr' push e
        , valstack
		, ""
		, string_of_int width ^ "," ^ byteorder agg ^ "," ^ alignment ass
        )

    | R.Reg   ('A', i, width)        -> 
		( ""
		, argstack
		, "_arg"
		, string_of_int i
		)

    | R.Reg   (sp, i, width)         -> 
		( ""
		, commentout
		, "_register"
	  	, "'" ^ String.make 1 sp ^ "'," ^ string_of_int i)
                                        
    | R.Var   (name, index, width)   -> 
		( ""
        , valstack
        , "_local"
        , string_of_int index
        )
                                          
    | R.Slice (w, i, loc)              -> 
        let (p, ff, s, a) = location' loc in ("-- slice\n" ^ p, ff, s, a)

(* NOTE: should R.Slice just fail an assertion? *)

let (<<) f g   = fun x -> f (g x)

let expr fd rtl = output_string fd ((expr' push) (Rtl.Convert.exp rtl))
let location  = location' << Rtl.Convert.loc
@ 

<<ToLua>>=
let effect eff func_prefix =
    match eff with
    | R.Kill loc            -> assert false;
    | R.Store (loc, exp, w) -> 
		let (prefix, func_f, func_suffix, args) = location' loc in
		prefix ^ expr' push exp ^ 
		(luafunc (func_prefix ^ func_f "store" func_suffix) args)

let guard = function
  | R.Const (R.Bool true) -> ""
  | g                     -> "g"

let print_guarded fd (g, eff) = fprintf fd "%s" (effect eff (guard g))
@

We recognize special {\rtl}s that encode control-flow transfers and
other special instructions. The encoding of these instructions is shared
with module \module{interp}. 

I know realize that this does not allow me to recover all informations I
need. Therefore I will comment out this code for now.

<<ToLua>>=
let rec rtl' fd (R.Rtl gg) = match gg with

    | [] -> fprintf fd "-- skip\n"    
    | _  -> List.iter (print_guarded fd) gg   (* standard RTL *)


(* exported functions *)

let rtl fd = (rtl' fd) << Rtl.Convert.rtl
let exp    = expr
@ 

