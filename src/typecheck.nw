% vim: ts=8 sw=4 et:

% ------------------------------------------------------------------ 
\section{Type Checker for the Control-Flow Graph}
% ------------------------------------------------------------------ 

The control-flow graph (\cfg) of a procedure contains {\rtl}s. This
module provides a stage for the compiler's backplane that allows to
check the types of all {\rtls}.

To embed the function into the back plane it takes a procedure as
argument. The embedding into Lua is handled by the \module{lualink}
module.


<<typecheck.mli>>=
val proc: Ast2ir.proc -> unit
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

The implementation simply pieces together functionality: module
\module{rtldebug.nw} provides type checking, and module \module{cfg.nw}
traversal of a {\cfg}.

<<typecheck.ml>>=
module C = Cfgx.M

let rtl = function
    | None     -> ()
    | Some rtl ->
        try
            Rtldebug.typecheck rtl
        with
            Rtldebug.TypeCheck(rtl) ->
                ( prerr_string "This RTL does not type check:\n"
                ; prerr_endline (Rtlutil.ToUnreadableString.rtl rtl)
                )

let proc p =
    let cfg         = p.Proc.cfg in
    let iter cfg  f = C.fold_layout (fun node () -> f node) () cfg in
        iter cfg (fun node -> rtl (C.to_instr node))
@
