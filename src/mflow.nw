% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=8 et sw=4:

\section{Machine-level control flow}

This module is intended to record the ``standard'' implementations of
control flow at the machine level.
Basically if we know the program counter plus a few facts about return
address, we know enough to go on with.
(To get [[cutto]] right, we will have to add knowledge of the stack
pointer.)


<<mflow.mli>>=
<<signatures>>
<<signatures>>=
module type PC = sig
  val pc_lhs : Rtl.loc
  val pc_rhs : Rtl.loc
  val ra_reg : Rtl.loc
  val ra_offset : int   (* at call, ra_reg  := PC + ra_offset *)
end

module type S = sig (* see types Target2.t and Target2.map for doco *)
  val goto  : Rtl.exp Target2.map
  val jump  : Rtl.exp Target2.map
  val cutto : Rtl.exp Target2.map
  val call  : Rtl.exp Target2.map
  val branch : (Rtl.exp * Rtl.exp) Target2.map
  val return: unit    Target2.map
end
<<mflow.mli>>=
module Make (Pc : PC) : S
@ 
<<mflow.ml>>=
<<signatures>>
module RU = Rtlutil
module R  = Rtl
module RP = Rtl.Private
module T  = Target2

module Make (P : PC) = struct
  <<machine-level control flow>>
end
@ 
<<machine-level control flow>>=
let w = RU.Width.loc P.pc_lhs
let downrtl = R.Convert.rtl
let upexp   = R.Revert.exp
let goto = { T.embed   = (fun e -> R.store P.pc_lhs e w)
           ; T.project = (fun r -> match downrtl r with
                                   | RP.Rtl [(_, RP.Store(_, e, _))] -> upexp e
                                   | _ -> Impossible.impossible "projected non-goto")
           } 
let jump = goto
let cutto = goto (* LIES AND DAMN LIES *)

let ra_val =
  let pc = R.fetch P.pc_rhs w in
  if P.ra_offset = 0 then pc
  else R.app (R.opr "add" [w]) [pc; R.bits (Bits.S.of_int P.ra_offset w) w]

let call = { T.embed   = (fun e -> R.par [R.store P.pc_lhs e w;
                                          R.store P.ra_reg ra_val w])
           ; T.project = (fun r -> match downrtl r with
                                   | RP.Rtl [(_, RP.Store(_, e, _)); _] -> upexp e
                                   | _ -> Impossible.impossible "projected non-call")
           } 

let return = 
    { T.embed   = (fun () -> R.store P.pc_lhs (R.fetch P.ra_reg w) w)
    ; T.project = (fun r  -> match downrtl r with
                  | RP.Rtl [(_, RP.Store(_, _, _))] -> ()
                  | _ -> Impossible.impossible "projected non-return"
                  )
    }              

let branch =
  { T.embed   = (fun (cond, tgt) -> R.guard cond (goto.T.embed tgt))
  ; T.project = (fun r -> match downrtl r with
                          | RP.Rtl [(b, RP.Store(_, e, _))] -> (upexp b, upexp e)
                          | _ -> Impossible.impossible "projected non-branch")
  } 
