% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
% ------------------------------------------------------------------ 
\section{Translation of {\PAL} operators to RTL operators}
% ------------------------------------------------------------------ 

This module provides the translation of a {\PAL} operator to an {\rtl}
operator.  {\PAL} and {\rtl} operators are closely related: a {\PAL}
operator is in general an instance of a polymorphic {\rtl} operator.

The [[operator]] function returns the type of the operator's result, and
an {\rtl} operator that implements the {\PAL} operator.

<<rtlop.mli>>=
module Translate : sig
    val operator: op:string -> Types.ty list -> Types.ty * Rtl.opr (*ErrorExn*)
end
@

% ------------------------------------------------------------------ 
\subsection{Types of RTL operators}
% ------------------------------------------------------------------ 

Note: the [[Types]] module is not intended for the casual user. There
should be no reason why you need to know about the types of a {\rtl}
operator. 

[[Mono]] takes an [[Rtl.opr]] operator and reconstructs its monomorphic
type (using the width list inside the operator). If the operator is
unknown, [[Not_found]] is raised.

<<rtlop.mli>>=
module Types: sig
    val mono: Rtl.opr -> Types.monotype      (* Not_found *)
end
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

<<rtlop.ml>>=
module T = Types        (* save external Types module here *)

module Types = struct
    <<Types>>
end

module Translate = struct
    <<Translate>>
end
@


% ------------------------------------------------------------------ 
\subsection{RTL-Op Types}
% ------------------------------------------------------------------ 

The [[ops]] table associates {\rtl} operators with their types. A
function type is constructed by [[T.proc]] that takes the list of
arguments and the result type. Most functions are polymorphic; a
[[T.bitsv]]~$n$ introduces a (bound) polymorphic [[bits]] type variable
$n$. For example, the type for [[add]] demands that all arguments and
the result have the same width. If the type variable of the result is
not identical to one of the arguments, the operator is polymorphic in
its return size. 

The multiplication operator [[mulXX]] is quasi-polymoprhic in its result
size: two $n$ bits values are multioplied into one $2n$ bits result.
This makes it hard to define the meaning of the {\PAL} infix-operator
because its meaning would depend on its arguments. Therefore, [[*]]
denotes a $n$ bits multiplication with a an $n$ bits result. We
introduce a new {\rtl} operator [[mul@]] for this. Since the character
[[@]] cannot be part a {\PAL} identifier, it cannot be used in a program
and is thus hidden.  The operator [[mul@]] can be defined in terms of
existing operators:

$$[[%mul@]](x,y) = [[%lobits]]$n$([[%mul$n$]](x,y))$$

<<Types>>=
module T = Types
(**)  (* == result size is polymorphic             *)
(***) (* == result size is twice of argument width *) 
let ops = Strutil.assoc2map
        [  "add"        , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
        ;  "and"        , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
        ;  "bit"        , T.proc [T.bool] (T.bitsc 1)
        ;  "bool"       , T.proc [T.bitsc 1] T.bool
        ;  "borrow"     , T.proc [T.bitsv 1; T.bitsv 1; T.bitsc 1] (T.bitsc 1)
        ;  "carry"      , T.proc [T.bitsv 1; T.bitsv 1; T.bitsc 1] (T.bitsc 1)
        ;  "com"        , T.proc [T.bitsv 1] (T.bitsv 1)
        ;  "conjoin"    , T.proc [T.bool; T.bool] T.bool
        ;  "disjoin"    , T.proc [T.bool; T.bool] T.bool
        ;  "div"        , T.proc [T.bitsv 1; T.bitsv 2] (T.bitsv 2)
        ;  "divu"       , T.proc [T.bitsv 1; T.bitsv 2] (T.bitsv 2)
        ;  "eq"         , T.proc [T.bitsv 1; T.bitsv 1] T.bool
    (**);  "f2f"        , T.proc [T.bitsv 1; T.bitsc 2] (T.bitsv 2)
    (**);  "f2i"        , T.proc [T.bitsv 1; T.bitsc 2] (T.bitsv 2)
        ;  "fadd"       , T.proc [T.bitsv 1; T.bitsv 1; T.bitsc 2] (T.bitsv 1)
        ;  "fcmp"       , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsc 2)
        ;  "fdiv"       , T.proc [T.bitsv 1; T.bitsv 1; T.bitsc 2] (T.bitsv 1)
        ;  "float_eq"   , T.proc [] (T.bitsc 2)
        ;  "float_gt"   , T.proc [] (T.bitsc 2)
        ;  "float_lt"   , T.proc [] (T.bitsc 2)
        ;  "fmul"       , T.proc [T.bitsv 1; T.bitsv 1; T.bitsc 2] (T.bitsv 1)
        ;  "fneg"       , T.proc [T.bitsv 1] (T.bitsv 1)
        ;  "fsub"       , T.proc [T.bitsv 1; T.bitsv 1; T.bitsc 2] (T.bitsv 1)
        ;  "ge"         , T.proc [T.bitsv 1; T.bitsv 1] T.bool
        ;  "geu"        , T.proc [T.bitsv 1; T.bitsv 1] T.bool
        ;  "gt"         , T.proc [T.bitsv 1; T.bitsv 1] T.bool
        ;  "gt"         , T.proc [T.bitsv 1; T.bitsv 1] T.bool
        ;  "gtu"        , T.proc [T.bitsv 1; T.bitsv 1] T.bool
    (**);  "i2f"        , T.proc [T.bitsv 1; T.bitsc 2] (T.bitsv 2)
        ;  "le"         , T.proc [T.bitsv 1; T.bitsv 1] T.bool
        ;  "leu"        , T.proc [T.bitsv 1; T.bitsv 1] T.bool
    (**);  "lobits"     , T.proc [T.bitsv 1] (T.bitsv 2)
        ;  "lt"         , T.proc [T.bitsv 1; T.bitsv 1] T.bool
        ;  "lt"         , T.proc [T.bitsv 1; T.bitsv 1] T.bool
        ;  "ltu"        , T.proc [T.bitsv 1; T.bitsv 1] T.bool
        ;  "mod"        , T.proc [T.bitsv 1; T.bitsv 2] (T.bitsv 2)
        ;  "modu"       , T.proc [T.bitsv 1; T.bitsv 2] (T.bitsv 2)
        ;  "mul_truc"   , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1) 
   (***);  "mul"        , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv2 1) 
   (***);  "mulu"       , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv2 1) 
        ;  "neg"        , T.proc [T.bitsv 1] (T.bitsv 1)
        ;  "ne"         , T.proc [T.bitsv 1; T.bitsv 1] T.bool
        ;  "not"        , T.proc [T.bool] T.bool
        ;  "or"         , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
        ;  "parity"     , T.proc [T.bitsv 1] (T.bitsc 1)
        ;  "quot"       , T.proc [T.bitsv 1; T.bitsv 2] (T.bitsv 1)
        ;  "rem"        , T.proc [T.bitsv 1; T.bitsv 2] (T.bitsv 2)
        ;  "rotl"       , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
        ;  "rotr"       , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
        ;  "shl"        , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
        ;  "shra"       , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
        ;  "shrl"       , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
        ;  "sub"        , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
        ;  "sub"        , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
    (**);  "sx"         , T.proc [T.bitsv 1] (T.bitsv 2)
        ;  "unordered"  , T.proc [] (T.bitsc 2)
        ;  "xor"        , T.proc [T.bitsv 1; T.bitsv 1] (T.bitsv 1)
    (**);  "zx"         , T.proc [T.bitsv 1] (T.bitsv 2)
        (* the operators below are not legal C-- operators but they
           show up in generated RTLs. In order to typecheck these, we
           have to include them. We need a better solution. XXX *)
        ;  "bitExtract" , T.proc [T.bitsv 1; T.bitsv 2; T.bitsv 3] (T.bitsv 3) 
        ] 

let poly op = 
    try
        Strutil.Map.find op ops 
    with Not_found ->
        ( Printf.eprintf "cannot find '%s' operator" op
        ; raise Not_found
        )
        
let mono op =
    let (o,w) = Rtl.Convert.opr op in
    let ptype = poly o             in
        Types.instantiate ptype w
@


% ------------------------------------------------------------------ 
\subsection{Translation from {\PAL} operators to {\rtl} operators}
% ------------------------------------------------------------------ 

{\PAL} primitive operators and {\rtl} primitive operators are closely
connected. To typecheck the application of a {\PAL} operator, we use the
type of the corresponding {\RTL} operator.  For example, the {\PAL}
operator [[add]] is translated to the {\rtl} operator [[add]], that has
the exact same signature. 

The exceptions are {\PAL} operators like [[zx32]] that encodes the size
of their return value in the name. {\rtl} operators are more polymorphic
than {\PAL} operators and thus there are no separate operators [[zx1]],
\dots, [[zx32]], \dots, but a single polymorphic operator [[zx]]:

$$[[zx]]: \forall~\alpha,\beta.[[bits]]\alpha \to [[bits]]\beta$$

An application [[zx32 (1::bits10)]] is translated into the {\rtl}
operator [[(zx,[10,32])]], where [[10]] is bound by $\alpha$, and [[32]]
by $\beta$ in the above type scheme. Hence, the size of the result,
which is inferred from the name, is always the \emph{last}
value in the \emph{width list} of an {\rtl} operator.

<<Translate>>=
let alias = Strutil.assoc2map 
    [  "+"      , "add"
    ;  "-"      , "sub"
    ;  "*"      , "mul_truc"    (* see discussion of %mul above *)
    ;  "/"      , "div"
    ;  "<<"     , "shl"
    ;  ">>"     , "shrl"
    ;  "=="     , "eq"
    ;  "<="     , "le"
    ;  ">="     , "ge"
    ;  ">"      , "gt"
    ;  "<"      , "lt"
    ;  "!="     , "ne"
    ;  "~"      , "neg"
    ] 

let unalias op = try Strutil.Map.find op alias with Not_found -> op    
@

{\PAL} uses infix symbols as aliases for alphanumeric operator names. If
we find the current operator in the [[alias]] map we replace it with the
official name. If we don't find it, we assume it is an official name
already.

If an operator name has a numerical component, it denotes the size of
the result. Such a size always becomes the last element in the width
list of an operator. 

<<Translate>>=
let operator ~op argtys =
    try 
        let op, retsize = T.split (unalias op)             in
        ( match retsize with
        | None ->   let return      = T.appl (Types.poly op) argtys    in
                    let widthlist   = T.widthlist (Types.poly op) argtys in
                    return, Rtl.opr op widthlist 
        | Some n -> let return    = T.bits n in
                    let widthlist = (T.widthlist (Types.poly op) argtys)@[n] in
                    return, Rtl.opr op widthlist
        )            
    with
    | Not_found  -> Error.error ("unknown operator "^op)
    | T.MatchExn -> Error.error "type error in application"

@        

