% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon

% ------------------------------------------------------------------ 
\section{Elaborating Statements}
% ------------------------------------------------------------------ 

<<exposed types>>=
type exp = Rtl.exp
type rtl = Rtl.rtl
type loc = Rtl.loc
type convention = string
type hint = string
type name = string
type linktime = Bits.bits Reloc.Simple.relocatable
type 'a hinted = hint * 'a
type range = int * int   (* lo <= x < hi *)
type procname = string
type flow = { cuts : name list; unwinds : name list; areturns : name list;
              returns : bool; aborts : bool }
type stmt =
  | If     of exp * stmt list * stmt list
  | Label  of name
  | Switch of range option * exp * (range list * stmt list) list
  | Cont   of name * name hinted list
  | Span   of Bits.bits * linktime * stmt list
  | Assign of rtl
  | Call   of loc hinted list * convention * exp * exp hinted list * procname list
            * flow
  | Goto   of exp * name list
  | Jump   of convention * exp * exp hinted list * procname list
  | Cut    of exp * exp hinted list * flow 
  | Return of convention * int * int * exp hinted list
@
<<elabstmt.mli>>=
<<exposed types>>
val elab_stmts :
  'a Fenv.Dirty.env' -> (Ast.name_or_mem, Ast.expr, Nast.assign) Nast.stmt list ->
  stmt list Error.error
@ The [[elab_*]] functions work with incomplete information,
indicated by [[Error.Error]] values.  The policy is as follows:
\begin{itemize}
\item In case of a success, [[check]] returns the type of the
      expression at hand as a [[Error.Ok]] value.
\item If the type check must use an erroneous information from the
      environment, it propagates this error and returns [[E.Error]].
\item If the type check detects a new error, for example a type
      inconsistency, it issues an error message and returns
      [[E.Error]].
      The exception [[Error.ErrorExn]] may be used internally, but it
      should never be raised by a top-level function.
\end{itemize}
@
% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

<<elabstmt.ml>>=
<<exposed types>>
module AT = Automaton
module N = Nast
module E = Error
module F = Fenv.Dirty
let impossf fmt = Printf.kprintf Impossible.impossible fmt
let unimp = Impossible.unimp
let is2power x = x > 0 && x land (x - 1) = 0
@

<<elabstmt.ml>>=
module M = Metrics
<<utilities>>
@ 
<<utilities>>=
@ 
Parameter [[reachable]] means the statement is reachable by ordinary
control flow (i.e., not by continuation).
<<elabstmt.ml>>=
let elab_stmts env =
  let eprint r = E.errorRegionPrt (F.srcmap env, r) in
  let errorf r = Printf.kprintf (fun s -> eprint r s; E.Error) in
  let exp = Elabexp.elab_exp env in
  let loc = Elabexp.elab_loc env in
  let metrics = F.metrics env in
  let rec full_stmt r reachable s =
    <<definitions of elaboration functions>>
    let rec stmt s = match s with
    | N.StmtAt (s, r) -> E.catch (eprint r) (full_stmt r reachable) s
    | N.If (c, t, f) -> 
        E.ematch3 (exp c) (stmts r t) (stmts r f) (fun (c, cty) t f ->
          match cty with
          | Types.Bool -> If (c, t, f)
          | Types.Bits n -> E.error "condition in `if' is not a Boolean")
    | N.Switch (range, e, arms) -> switch range e arms
    | N.Label n -> E.Ok (Label n)
    | N.Cont (name, formals) ->
        let c = E.ematch (E.Raise.list (List.map cformal formals)) (fun formals ->
                  Cont (name, formals)) in
        if reachable then
          E.error "control can fall through to continuation"
        else
          c
    | N.Span (k, v, ss) -> span k v ss
    | N.Assign (lhs, rhs) -> assign lhs rhs
    | _ -> unimp "statements" in
    stmt s
  and stmts r ss =
    let rec stmts reachable = function
      | [] -> []
      | N.Span (_, _, []) :: ss -> stmts reachable ss
      | s :: ss -> full_stmt r reachable s :: stmts (not (jumps s)) ss in
    Error.Raise.list (stmts true ss)
  and jumps = function N.Goto _ | N.Jump _ | N.Cut _ | N.Return _  -> true
                     | N.Call (_, _, _, _, _, fl) -> List.mem Ast.NeverReturns fl
                     | N.StmtAt (s, _) -> jumps s
                     | N.Span (_, _, ss) -> jumps (Aux.last ss)
                     | _ -> false in
(*
  | N.Assign of 'a
  | N.Call   of 'l list * convention * 'e   * 'e actual list * procname list * flow
  | N.Prim   of 'l list * convention * name * 'e actual list * flow
  | N.Goto   of 'e * label list
  | N.Jump   of convention * 'e * 'e actual list * procname list
  | N.Cut    of 'e * 'e actual list * cflow 
  | N.Return of convention * ('e * 'e) option * 'e actual list
*)
  stmts Srcmap.null
<<definitions of elaboration functions>>=
let cformal (hint, name) =
  E.seq (snd (F.findv name env)) (fun den ->
    match den with
    | F.Variable _, _ when F.is_localv name env -> E.Ok (hint, name)
    | _ -> errorf r
             "continuation parameter '%s' is not a local register variable" name) in
@
The type of the switch expression must be matched by the guarding
ranges of the arms.  An empty switch-statement is an error because no
arm can match the value of the switch-expression at run-time.
<<definitions of elaboration functions>>=
let switch range e arms =
  match arms with
  | [] -> E.error "empty switch statement"
  | _ :: _ -> unimp "switch statements" in
@ 
A [[span]] statement has key and value expressions.
The key must be a constant native word and the value a link-time (data)
pointer.  Of course, all statement inside the span must be checked as
well. Currently we don't check the link-time property of [[e2]].
<<definitions of elaboration functions>>=
let span k v ss =
  let ok f x = E.Ok (f x) in
  let const k = E.seq (exp k) (fun (k, kt) ->
    let k = E.catch (eprint r) (ok Simplify.bits) k in
    match kt with
    | Types.Bits n when n = metrics.Metrics.wordsize -> k
    | _ -> errorf r "span token (key) must be a bit vector of native word size") in
  let linktime v = E.seq (exp v) (fun (v, vt) ->
    let v = E.catch (eprint r) (ok Simplify.link) v in
    match vt with
    | Types.Bits n when n = metrics.Metrics.pointersize -> v
    | _ -> errorf r "span value must be a bit vector of native pointer size") in
  E.ematch3 (const k) (linktime v) (stmts r ss) (fun k v ss ->
    Span (k, v, ss)) in
@
Two two sides of an assign statement must match: the number and types
of lvalues and expressions are checked against each other.  For
improved error messages [[List.combine]] is re-implemented. Details
of the left hand side are handled by the [[lvalue]] function.

The right hand side may contain optional guarding expressions of type
[[bool]].
<<definitions of elaboration functions>>=
let assign lhs rhs =
  <<definitions of assignment functions>>
  try E.ematch (E.Raise.list (List.map2 effect lhs rhs)) (fun es -> Assign(Rtl.par es))
  with Invalid_argument _ -> <<complain about length mismatch in assignment>> in
<<definitions of assignment functions>>=
let effect lhs (guard,rhs) =
  let guard = Aux.Option.map exp guard in
  E.seq2 (loc lhs) (exp rhs) (fun (loc, w) (e, ty) ->
    if ty <> Types.Bits w then
      errorf r "location of type bits%d cannot hold value of type %s" w
        (Types.to_string ty)
    else
      let rtl = loc.AT.store e w in
      match guard with
      | None   -> E.Ok rtl
      | Some g -> E.seq g (fun (g, ty) ->
          if ty = Types.Bool then E.Ok (Rtl.guard g rtl)
          else errorf r "guard must have type bool, not %s" (Types.to_string ty))) in
@ 
<<complain about length mismatch in assignment>>=
if List.length lhs < List.length rhs then
  errorf r
    "assignment has %d expressions on the right but only %d locations on the left"
    (List.length rhs) (List.length lhs)
else
  errorf r
    "assignment has %d locations on the left but only %d expressions on the right"
    (List.length lhs) (List.length rhs)
