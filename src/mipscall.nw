% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% ------------------------------------------------------------------ 
\section{{\mips} calling conventions}
% ------------------------------------------------------------------ 

\emph{Spreading the {\mips} backend across several files increases the
chance of inconsistencies. Each file defines the byteorder and certain
registers. Is this a real problem? It definitely makes it harder to define
a little and a big-endian {\mips} backend. --CL}

This module implements calling conventions for the {\mips}. The
parameters represent the machine instructions to implement [[return]]
and [[cut to]]. The [[c']] convention is the same as the [[c]]
convention, but is implemented using the [[Callspec]] module. We keep
both until we are convinced the latter is correct. 

<<mipscall.mli>>=
val c : return_to: (Rtl.exp -> Rtl.rtl) -> Mflow.cut_args Target.map -> Call.t
val c': return_to: (Rtl.exp -> Rtl.rtl) -> Mflow.cut_args Target.map -> Call.t

val cconv :
  return_to:(Rtl.exp -> Rtl.rtl) ->
  Mflow.cut_args Target.map ->
  string -> Automaton.cc_spec ->
  Call.t
@

The book \emph{mips Risc Architecture} by Gerry Kane, published by
Prentice Hall describes the calling convention. However, the calling
convention specification on page D-22 seens outdated in comparision to
what compiler expect.  A better source for the calling convention is the
LCC compiler, which implements it in this short function:

<<implementation of {\mips} calling convention in LCC>>=
static Symbol argreg(int argno, int offset, int ty, int sz, int ty0) {
        assert((offset&3) == 0);
        if (offset > 12)
                return NULL;
        else if (argno == 0 && ty == F)
                return freg2[12];
        else if (argno == 1 && ty == F && ty0 == F)
                return freg2[14];
        else if (argno == 1 && ty == F && sz == 8)
                return d6;  /* Pair! */
        else
                return ireg[(offset/4) + 4];
}
@

[[argno]] is the zero-based index of the parameter, and [[ty0]] the type
of argument zero. Offset is the total size of all preceding arguments,
each a multiple of 4 bytes. This is crucial, because the last line
chooses a register not by the argument index, but by the total size of
preceding arguments.

\paragraph{Debugging} For debugging we provide functions that dump 
automata that are part of the calling convention to [[stdout]]. The two
arguments are the width and hints to try in every state of an automaton.

<<mipscall.mli>>=
val dump_proc:      int list -> string list -> unit
val dump_proc':     (int * string) list -> unit    (* dump these types *)
val dump_return:    int list -> string list -> unit
val dump_cutto:     int list -> string list -> unit
val paths_proc:      int list -> string list -> unit
val paths_proc':     (int * string) list -> unit    (* dump these types *)
val paths_return:    int list -> string list -> unit
val paths_cutto:     int list -> string list -> unit
@

% ------------------------------------------------------------------ 
\subsection{Implementation of {\mips} calling conventions}
% ------------------------------------------------------------------ 

<<mipscall.ml>>=
module A  = Automaton
module C  = Call
module R  = Rtl
module RP = Rtl.Private
module RS = Register.Set
module RU = Rtlutil
module T  = Target

let impossible = Impossible.impossible
let unimp      = Impossible.unimp
let sprintf    = Printf.sprintf
@

\paragraph{Registers}

A non-volatile register can be used in a procedure if its initial value
is restored upon exit. Such a register is also called callee-saved. A
volatile register can be used without saving and restoring. Registers
that are neither volatile nor non-volatile are unavailable for register
allocation.

The return address [[ra]] is volatile.
It can be used for register allocation, but the call instruction
always writes it (and it is live on entry).

<<mipscall.ml>>=
let r n     = ('r',n,32)
let l n     = ('r',n,64)    (* "long" - used for 64-bit floats in 4/5, 6/7 *) 
let f n     = ('f',n,32)
let d n     = ('f',n,64)
let vfp     = Vfp.mk 32

@
Calling conventions treat floating point registers specially; therefore
we have separate lists for them.
<<mipscall.ml>>=
let vol_int  = List.map r (Aux.from 2  ~upto:15 @ [24;25;31])
let nvl_int  = List.map r (Aux.from 16 ~upto:23 @ [30])
let vol_fp   = List.map f (Aux.from 0  ~upto:18)
let nvl_fp   = List.map f (Aux.from 20 ~upto:30)
@
Non-volatile registers are saved somewhere in the frame. Currently, we
cannnot provide dedicated locations.
<<mipscall.ml>>=
let saved_nvr temps =
    let t = Talloc.Multiple.loc temps 't' in
    let u = Talloc.Multiple.loc temps 'u' in
        function
        | ('r',_,w) -> t w
        | ('f',_,w) -> u w
        | (s  ,i,_) -> impossible (sprintf "cannot save $%c%d" s i)
@
And in Lua:
<<MIPS calling convention automata in Lua>>=
A            = Automaton
Mips         = Mips         or {}
Mips.cc      = Mips.cc      or {}
Mips.cc["C"] = Mips.cc["C"] or {}

function round_mult_32 (k) return Util.round_up_mult(32, k)    end
function is_float64(h, w)  return (h == "float") and (w == 64) end

Mips.growth    = "down"
Mips.byteorder = "little"
Mips.sp_align  = 16
Mips.wordsize  = 32

function reg(sp,i) return({ space = sp, index = i, width = Mips.wordsize }) end
function f(i) return (reg("f", i)) end
function d(i) return (reg("d", i)) end
function r(i) return (reg("r", i)) end
function l(i) return (reg("l", i)) end

Mips.vol_fp  = (f(0) .. f(18))
Mips.vol_int = (r(2) .. r(15)) .. { r(24), r(25), r(31) }
@ 

\paragraph{Conventions}

Stack pointer alignment is tricky. It is not mentioned in the
architecture manual and also seems to depend on the operating system.
The SGI IRIX 5.x requires 8-byte alignment, SGI IRIX 6.x 16-byte
alignment. LCC therefore always uses 16-byte alignment.

<<mipscall.ml>>=
let ra        = R.reg (r 31)            (* return address *)
let sp        = R.reg (r 29)            (* stack pointer  *)
let spval     = R.fetch sp 32
let growth    = Memalloc.Down           (* stack grows down *)
let byteorder = R.LittleEndian         
let sp_align  = 16                      (* SP always 16-byte aligned *)

let std_sp_location = 
    RU.add 32 vfp (R.late "minus frame size" 32)

let ( *> ) = A.( *> )

let badwidth (msg:string) (w:int) = 
    impossible (sprintf "unsupported (rounded) width %d in MIPS: %s" w msg)

let fatal _ = 
    impossible "fatal error in MIPS automaton"
@

\paragraph{C~return results}

A C~function returns an integer (up to 64 bits wide) in [[$2]] and
[[$3]], a floating-point result (up to two double-precision values) in
[[$f0]] \dots [[$f3]].

<<mipscall.ml>>=
let results =
    A.choice
        [ (A.is_hint "float"),  
            A.widen (Aux.round_up_to ~multiple_of: 32)              *>
            A.widths [32;64] ~errormsg:(badwidth "MIPS FP return")  *>
            A.useregs [f 0; f 1; f 2; f 3] ~errormsg:fatal
        ; A.is_any, 
            A.widen (Aux.round_up_to ~multiple_of: 32)              *>
            A.widths [32;64] ~errormsg:(badwidth "MIPS return")     *>  
            A.useregs [r 2; r 3] ~errormsg:fatal
        ]
@
And in Lua:
<<MIPS calling convention automata in Lua>>=
Mips.cc["C"].results =
  { A.widen  (round_mult_32)
  , A.widths { 32, 64 }
  , A.choice { "float" , A.useregs(f(0) .. f(3))
             , A.is_any, A.useregs(r(2) .. r(3))
             }
  }
@ 

\paragraph{C~procedure parameters}

<<mipscall.ml>>=
let spaces =
  let module SS = Space.Standard32 in
  let r = SS.r 32 byteorder [32; 64] in
  let f = SS.f 32 byteorder [32; 64] in
  function
  | 'r' -> r
  | 'f' -> f
  | _   -> Impossible.impossible "register space in parameter passing"
@

<<mipscall.ml>>=
type belief = Manual | Lcc
let who_do_you_believe = Lcc

let arguments () =
    let bits = ref 0 in
    let arg  = ref 0 in
    A.widen (Aux.round_up_to ~multiple_of: 32) *>
    A.widths [32;64] ~errormsg:(badwidth "MIPS argument") *>
    A.bitcounter bits *>
    A.argcounter arg  *>
    A.first_choice 
    [ A.is_hint "float",
        A.choice
        [ A.is_hint "float",
            (match who_do_you_believe with
            | Manual -> A.argnoregs arg [d 12; d 14]
            | Lcc ->
               A.choice
               [ A.is_width 64, A.argnoregs arg [d 12; d 14]
               ; A.is_any     , A.argnoregs arg [f 12; f 14]
               ] 
            ) 
        ; A.is_any,
            A.unit
        ] *> A.offsetregs bits [r 4; r 5; r 6; r 7] 
    ; A.is_any,
        A.choice
        [ (fun h w -> h = "float" && w = 64),  (* beware int/32, float/64 *)
            A.argnoregs arg [d 12; l 6] (* d12 is a placeholder; use pair r6/r7 *)
        ; A.is_any,
            A.offsetregs bits [r 4; r 5; r 6; r 7] 
        ]  
    ] *>
    A.overflow ~memsize:8 ~byteorder ~growth:Memalloc.Up 
               ~max_alignment:sp_align
@ 
And in Lua:
<<MIPS calling convention automata in Lua>>=
-- see the comments above in mipscall.nw for cc["C"].call
-- note that there's some postprocessing magic going on in mipscall.nw too
Mips.cc["C"].call =
  { A.widen (round_mult_32)
  , A.widths { 32, 64 }
  , A.bitcounter("bits")
  , A.argcounter("arg")
  , A.first_choice { 
      "float" , { A.choice {
                    "float" , A.choice {
                                64      , A.regs_by_args("arg", {d(12),d(14)}),
                                A.is_any, A.regs_by_args("arg", {f(12),f(14)})
                              },
                    A.is_any, A.unit
                  },
                  A.regs_by_bits("bits", r(4) .. r(7))
                },

      A.is_any, A.choice {
                  is_float64, A.regs_by_args("arg" , { d(12), l(6) }),
                  A.is_any  , A.regs_by_bits("bits", r(4) .. r(7))
                }
    }
  , A.overflow { memsize = 8, byteorder = Mips.byteorder, growth = "up"
               , max_alignment = Mips.sp_align
               }
  }
@
And now for postprocessing of both ML and Lua style automata specifications.
<<mipscall.ml>>=
let prefix16bytes result =
    let b = Block.relative vfp "16-byte block" Block.at ~size:16 ~alignment:4 
    in    
        { result with 
          A.overflow = Block.cathl result.A.overflow b
        }

let postprocess cconv =
    { cconv with A.call = A.postprocess cconv.A.call prefix16bytes }
@

\paragraph{C~cut-to parameters}

Since this is strictly internal calling convention, we can use whatever
we like. We use all volatile registers.
<<mipscall.ml>>=
let cut_args = 
    A.choice
        [ (A.is_hint "float"),
            A.widen (Aux.round_up_to ~multiple_of:32)        *>
            A.useregs vol_fp  ~errormsg:fatal 
        ; A.is_any,
            A.widen (Aux.round_up_to ~multiple_of:32)        *>
            A.useregs vol_int ~errormsg:fatal 
        ] *>
    A.overflow ~memsize:8 ~byteorder ~growth ~max_alignment:sp_align
@
And in Lua:
<<MIPS calling convention automata in Lua>>=
Mips.cc["C"].cutto =
  { A.widen (round_mult_32)
  , A.choice { "float" , A.useregs(Mips.vol_fp)
             , A.is_any, A.useregs(Mips.vol_int)
             }
  , A.overflow { memsize = 8, byteorder = Mips.byteorder, growth = Mips.growth
               , max_alignment = Mips.sp_align }
  }
@

% ------------------------------------------------------------------ 
\subsection{Putting it together} 
% ------------------------------------------------------------------ 

Attention: the current implementation of [[Callspec]] cannot express the
{\mips} calling convention because of the reserved 16-byte block that is
part of the frame layout. The [[Callspec]] implementation assumes that
an overflow block is always at the extreme end of a frame, which is not
the case here.

<<transformations>>=
let prolog stage =
  let autosp = (fun _  -> vfp) in
  C.incoming ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "in call parms" A.at stage.A.call)
    ~autosp
    ~postsp:(fun _ _ -> std_sp_location)
    ~insp:(fun a _ _ -> autosp a) in

let epilog stage =
  C.outgoing ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "out ovfl results" A.at stage.A.results)
    ~autosp:(fun r  -> std_sp_location)
    ~postsp:(fun _ _ -> vfp) in

let call_actuals stage =
  C.outgoing ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "out call parms" A.at stage.A.call)
    ~autosp:(fun r    -> std_sp_location)
    ~postsp:(fun a sp -> std_sp_location) in

let call_results stage =
  let autosp = (fun r   -> std_sp_location) in
  C.incoming ~growth ~sp
    ~mkauto:(fun ()  -> Block.srelative vfp "in ovfl results" A.at stage.A.results)
    ~autosp
    ~postsp:(fun _ _ -> std_sp_location)
    ~insp:(fun a _ _ -> autosp a) in

let also_cuts_to stage =
  let autosp = (fun r -> std_sp_location) in
  C.incoming ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "in cont parms" A.at stage.A.cutto)
    ~autosp
    ~postsp:(fun _ _ -> std_sp_location)
    ~insp:(fun a _ _ -> autosp a) in

let cut_actuals stage base =
   C.outgoing ~growth ~sp ~mkauto:(fun () -> A.at base stage.A.cutto)
     ~autosp:(fun r -> spval)
     ~postsp:(fun _ _ -> spval) in

<<mipscall.ml>>=
let new_c ~return_to cut stage = 
    let stage = postprocess stage in
    <<transformations>>
    let return k n ~ra =
        if k = 0 & n = 0 then return_to ra
        else impossible "alternate return using C calling convention" in
    { C.name            = "C"
	; C.overflow_alloc  = { C.parameter_deallocator = C.Caller
                          ; C.result_allocator      = C.Caller
						  }
    ; C.call_parms      = { C.in' = prolog stage
                          ; C.out = call_actuals stage
                          }
    ; C.cut_parms       = { C.in' = also_cuts_to stage
                          ; C.out = cut_actuals stage
                          }
    ; C.results         = { C.in' = call_results stage
                          ; C.out = epilog stage
                          }

    ; C.stack_growth    = growth
    ; C.stable_sp_loc   = std_sp_location
    ; C.replace_vfp     = Cfgx.Vfp.replace_with ~sp
    ; C.sp_align        = sp_align
    ; C.pre_nvregs      = RS.union (RS.of_list nvl_int) (RS.of_list nvl_fp)
    ; C.volregs         = RS.union (RS.of_list vol_int) (RS.of_list vol_fp)
    ; C.saved_nvr       = saved_nvr
    ; C.cutto           = cut
    ; C.return          = return
    ; C.ra_on_entry      = (fun _     -> R.fetch ra 32)
    ; C.where_to_save_ra = (fun _ t   -> Talloc.Multiple.loc t 't' 32)
    ; C.ra_on_exit       = (fun _ _ t -> ra)
    ; C.sp_on_jump       = (fun _ _ -> Rtl.null)
    }

let c ~return_to cut =
  new_c ~return_to cut
    { A.call = arguments() ; A.results = results ; A.cutto = cut_args }

let cconv ~return_to cut ccname stage = 
  let f =
    match ccname with
    | _ -> new_c
  in f ~return_to cut stage
@
And in Lua:
<<MIPS calling convention automata in Lua>>=
-- register the new calling convention!
Backend.mips.target = A.register_cc(Backend.mips.target, "C", Mips.cc["C"])
@ 

\paragraph{Support for Debugging} 

This code should ultimately moved close to the \module{call.nw} module
such that it is available for all calling conventions. The polymorphic
nature of [[Call.t]] make this difficult rigth now.

<<mipscall.ml>>=
let dump what automaton widths hints = 
        what
        ~mk:(fun () -> A.at (Rtl.bits (Bits.zero 32) 32) (automaton ()))
        ~widths ~hints
        
let dump_proc     = dump Automatongraph.print arguments 
@

The [[Automatongraph.print]] function generates either too many or too
few types that are tested. As a quick fix, here are all the types we
care about.

<<mipscall.ml>>=
let dump_proc' types = 
    Automatongraph.print' 
        ~mk:(fun () -> A.at (Rtl.bits (Bits.zero 32) 32) (arguments ()))
        types


let paths_proc' types =
    Automatongraph.paths' 
        ~mk:(fun () -> A.at (Rtl.bits (Bits.zero 32) 32) (arguments ()))
        types

let dump_return    = dump Automatongraph.print (fun () -> results)
let dump_cutto     = dump Automatongraph.print (fun () -> cut_args)
let paths_proc     = dump Automatongraph.paths arguments 
let paths_return   = dump Automatongraph.paths (fun () -> results)
let paths_cutto    = dump Automatongraph.paths (fun () -> cut_args)
@

% ------------------------------------------------------------------ 
\subsection{Implementation using [[Callspec]]}
% ------------------------------------------------------------------ 

<<mipscall.ml>>=
module CS = Callspec

let rtn return_to k n ~ra =
    if k = 0 & n = 0 then return_to ra
    else impossible "alternate return using C calling convention" 

let spec = 
        { CS.name           = "C'"
        ; CS.call           = arguments
        ; CS.results        = (fun () -> results)   
        ; CS.cutto          = (fun () -> cut_args)
        ; CS.stack_growth   = Memalloc.Down
        ; CS.overflow       = CS.overflow C.Caller C.Caller
        ; CS.sp             = r 29
        ; CS.sp_align       = sp_align
        ; CS.all_regs       = RS.of_list (List.concat [nvl_int; nvl_fp;
                                                       vol_int; vol_fp])
        ; CS.nv_regs        = RS.of_list (nvl_int @ nvl_fp)
        ; CS.save_nvr       = saved_nvr
        ; CS.ra             = (ra, CS.ReturnAddress.SaveToTemp 't')
        }

let c' ~return_to cut =
    let t = CS.to_call cut (rtn return_to) spec in
        { t with (* fix what callspec got wrong *)
            C.ra_on_exit = (fun _ _ t -> ra)
        }    
@


