% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% ------------------------------------------------------------------ 
\section{{\mips} calling conventions}
% ------------------------------------------------------------------ 

\emph{Spreading the {\mips} backend across several files increases the
chance of inconsistencies. Each file defines the byteorder and certain
registers. Is this a real problem? It definitely makes it harder to define
a little and a big-endian {\mips} backend. --CL}

This module implements calling conventions for the {\mips}. The
parameters represent the machine instructions to implement [[return]]
and [[cut to]].

<<mipscall.mli>>=
val c: return_to: (Rtl.exp -> Rtl.rtl) -> Mflow.cut_args Target.map -> Call.t
@

The implementation is based on the book \emph{mips Risc Architecture} by
Gerry Kane, published by Prentice Hall. However, the calling convention
specification on page D-22 is only correct, when all floating point
values $fn$ are considered double precision values, rather single or
double precision.

A better source for the calling convention is the LCC compiler, which
implements it in this short function:

<<implementation of {\mips} calling convention in LCC>>=
static Symbol argreg(int argno, int offset, int ty, int sz, int ty0) {
        assert((offset&3) == 0);
        if (offset > 12)
                return NULL;
        else if (argno == 0 && ty == F)
                return freg2[12];
        else if (argno == 1 && ty == F && ty0 == F)
                return freg2[14];
        else if (argno == 1 && ty == F && sz == 8)
                return d6;  /* Pair! */
        else
                return ireg[(offset/4) + 4];
}
@

[[argno]] is the zero-based index of the parameter, and [[ty0]] the type
of argument zero. Offset is the total size of all preceding arguments,
each a multiple of 4 bytes. This is crucial, because the last line
chooses a register not by the argument index, but by the total size of
preceding arguments.

\paragraph{Debugging} For debugging we provide functions that dump 
automata that are part of the calling convention to [[stdout]]. The two
arguments are the width and hints to try in every state of an automaton.

<<mipscall.mli>>=
val dump_proc:      int list -> string list -> unit
val dump_return:    int list -> string list -> unit
val dump_cutto:     int list -> string list -> unit
val paths_proc:      int list -> string list -> unit
val paths_return:    int list -> string list -> unit
val paths_cutto:     int list -> string list -> unit
@

% ------------------------------------------------------------------ 
\subsection{Implementation of {\mips} calling conventions}
% ------------------------------------------------------------------ 

<<mipscall.ml>>=
module A  = Automaton
module AE = Automaton.Exclude
module C  = Call
module R  = Rtl
module RP = Rtl.Private
module RS = Register.Set
module RU = Rtlutil
module T  = Target

let impossible = Impossible.impossible
let unimp      = Impossible.unimp
let sprintf    = Printf.sprintf
@

\paragraph{Registers}

A non-volatile register can be used in a procedure if its initial value
is restored upon exit. Such a register is also called callee-saved. A
volatile register can be used without saving and restoring. Registers
that are neither volatile nor non-volatile are unavailable for register
allocation.

The return address [[ra]] is volatile.
It can be used for register allocation, but the call instruction
always writes it (and it is live on entry).

<<mipscall.ml>>=
let r n     = ('r',n,32)
let f n     = ('f',n,32)
let d n     = ('f',n,64)
let vfp     = Vfp.mk 32

@
Calling conventions treat floating point registers specially; therefore
we have separate lists for them.
<<mipscall.ml>>=
let vol_int  = List.map r (Aux.from 2  ~upto:15 @ [24;25;31])
let nvl_int  = List.map r (Aux.from 16 ~upto:23 @ [30])
let vol_fp   = List.map f (Aux.from 0  ~upto:18)
let nvl_fp   = List.map f (Aux.from 20 ~upto:30)
@
Non-volatile registers are saved somewhere in the frame. Currently, we
cannnot provide dedicated locations.
<<mipscall.ml>>=
let saved_nvr temps =
    let t = Talloc.Multiple.loc temps 't' in
    let u = Talloc.Multiple.loc temps 'u' in
        function
        | ('r',_,w) -> t w
        | ('f',_,w) -> u w
        | (s  ,i,_) -> impossible (sprintf "cannot save $%c%d" s i)
@

\paragraph{Conventions}

Stack pointer alignment is tricky. It is not mentioned in the
architecture manual and also seems to depend on the operating system.
The SGI IRIX 5.x requires 8-byte alignment, SGI IRIX 6.x 16-byte
alignment. LCC therefore always uses 16-byte alignment.

<<mipscall.ml>>=
let ra        = R.reg (r 31)            (* return address *)
let sp        = R.reg (r 29)            (* stack pointer  *)
let spval     = R.fetch sp 32
let growth    = Memalloc.Down           (* stack grows down *)
let byteorder = R.LittleEndian         
let sp_align  = 16                      (* SP always 16-byte aligned *)

let std_sp_location = 
    RU.add 32 vfp (R.late "minus frame size" 32)

let ( **> ) f x   = f x
let (  *> ) f g x = f (g x)

let badwidth (msg:string) (w:int) = 
    impossible (sprintf "unsupported (rounded) width %d in MIPS: %s" w msg)

let fatal _ = 
    impossible "fatal error in MIPS automaton"
@

\paragraph{C~return results}

A C~function returns an integer (up to 64 bits wide) in [[$2]] and
[[$3]], a floating-point result (up to two double-precision values) in
[[$f0]] \dots [[$f3]].

<<mipscall.ml>>=
let results =
    A.hint_choice
        [ ((=) "float"),  
            A.widen (Aux.round_up_to ~multiple_of: 32)              *>
            A.widths [32;64] ~errormsg:(badwidth "MIPS FP return")  *>
            A.useregs [f 0; f 1; f 2; f 3] ~errormsg:fatal
        ; (fun _ ->true), 
            A.widen (Aux.round_up_to ~multiple_of: 32)              *>
            A.widths [32;64] ~errormsg:(badwidth "MIPS return")     *>  
            A.useregs [r 2; r 3] ~errormsg:fatal
        ] **>
    A.no_overflow 4 "multiple return values for MIPS C"    
@

\paragraph{C~procedure parameters}

I don't know how to implement the parameter-passing convention using the
building blocks from the \module{automaton.nw} module. The simple
convention here should work for integer argument lists.

<<mipscall.ml>>=
let arguments =
    A.hint_choice
        [ ((=) "float"),
            A.widen (Aux.round_up_to ~multiple_of:32)        *>
            A.useregs [f 12; f 14] ~errormsg:fatal   (* INCORRECT!!! *)
        ; (fun _ -> true),
            A.widen (Aux.round_up_to ~multiple_of:32)        *>
            A.useregs [r 4; r 5; r 6; r 7] ~errormsg:fatal 
        ] **>
    A.overflow ~memsize:8 ~byteorder ~growth ~max_alignment:sp_align
@

@ 
To support varargs, each argument registers maps to a particular
location, and there are overlapping locations for integer and
floating-point parameters.
Therefore the use of one argument register must exclude others.
N.B.~We can't properly widen floating-point parameters, and we don't try.
<<mipscall.ml>>=
let spaces =
  let module SS = Space.Standard32 in
  let r = SS.r 32 byteorder [32; 64] in
  let f = SS.f 32 byteorder [32; 64] in
  function
  | 'r' -> r
  | 'f' -> f
  | _   -> Impossible.impossible "register space in parameter passing"

let arguments () =
  (* N.B. exc is mutable and must be made fresh each time *)
  let exc = A.Exclude.of_pairs spaces [ [r 4; r 5], [f 12; d 12]
                                      ; [r 6; r 7], [f 14; d 14]
                                      ] in
  A.choice   
      [ (fun h w -> h = "float" & w = 32),
          A.sharedregs exc [f 12; f 14] ~errormsg:fatal
      ; (fun h w -> h = "float" & w = 64),
          A.sharedregs exc [d 12; d 14] ~errormsg:fatal
      ; (fun h w -> h <> "float"),
          A.widen (Aux.round_up_to ~multiple_of:32)        *>
          A.sharedregs exc [r 4; r 5; r 6; r 7] ~errormsg:fatal 
      ] **>
  A.overflow ~memsize:8 ~byteorder ~growth ~max_alignment:sp_align
@
        
\paragraph{C~cut-to parameters}

Since this is strictly internal calling convention, we can use whatever
we like. We use all volatile registers.
<<mipscall.ml>>=
let cut_args = 
    A.hint_choice
        [ ((=) "float"),
            A.widen (Aux.round_up_to ~multiple_of:32)        *>
            A.useregs vol_fp  ~errormsg:fatal 
        ; (fun _ -> true),
            A.widen (Aux.round_up_to ~multiple_of:32)        *>
            A.useregs vol_int ~errormsg:fatal 
        ] **>
    A.overflow ~memsize:8 ~byteorder ~growth ~max_alignment:sp_align
@

% ------------------------------------------------------------------ 
\subsection{Putting it together} 
% ------------------------------------------------------------------ 

<<transformations>>=
let call_actuals  =
  C.outgoing ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "out call parms" A.at (arguments ()))
    ~autosp:(fun r  -> Block.base r.A.overflow)
    ~postsp:(fun sp -> sp) in  

let prolog  =
  C.incoming ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "in call parms" A.at (arguments ()))
    ~autosp:(fun _ -> vfp)
    ~postsp:(fun _ -> std_sp_location) in

let call_results  =
  C.incoming ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "in ovfl results" A.at results)
    ~autosp:(fun r -> Block.base r.A.overflow)
    ~postsp:(fun _ -> std_sp_location) in

let epilog  =
  C.outgoing ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "out ovfl results" A.at results)
    ~autosp:(fun r -> Block.base r.A.overflow)
    ~postsp:(fun _ -> vfp) in

let also_cuts_to =
  C.incoming ~growth ~sp
    ~mkauto:(fun () -> Block.srelative vfp "in cont parms" A.at cut_args)
    ~autosp:(fun r -> std_sp_location)
    ~postsp:(fun _ -> std_sp_location) in

let cut_actuals base  =
   C.outgoing ~growth ~sp ~mkauto:(fun () -> A.at base cut_args)
     ~autosp:(fun r -> spval)
     ~postsp:(fun _ -> spval) in


<<mipscall.ml>>=
let c ~return_to cut = 
    <<transformations>>
    let return k n ~ra =
        if k = 0 & n = 0 then return_to ra
        else impossible "alternate return using C calling convention" in
    { C.name            = "C"
    ; C.jump_ok         = false
    ; C.call_parms      = { C.in' = prolog;       C.out = call_actuals}
    ; C.cut_parms       = { C.in' = also_cuts_to; C.out = cut_actuals}
    ; C.results         = { C.in' = call_results; C.out = epilog}

    ; C.stack_growth    = growth
    ; C.stable_sp_loc   = std_sp_location
    ; C.replace_vfp     = Cfgx.Vfp.replace_with ~sp
    ; C.sp_align        = sp_align
    ; C.pre_nvregs      = RS.union (RS.of_list nvl_int) (RS.of_list nvl_fp)
    ; C.volregs         = RS.union (RS.of_list vol_int) (RS.of_list vol_fp)
    ; C.saved_nvr       = saved_nvr
    ; C.cutto           = cut
    ; C.return          = return
    ; C.ra_on_entry      = (fun _   -> R.fetch ra 32)
    ; C.where_to_save_ra = (fun _ t -> Talloc.Multiple.loc t 't' 32)
    ; C.ra_on_exit       = (fun t b -> t)
    }
@

\paragraph{Support for Debugging} 

This code should ultimately moved close to the \module{call.nw} module
such that it is available for all calling conventions. The polymorphic
nature of [[Call.t]] make this difficult rigth now.

<<mipscall.ml>>=
let dump what automaton widths hints = 
        what
        ~mk:(fun () -> A.at (Rtl.bits (Bits.zero 32) 32) (automaton ()))
        ~widths ~hints
        
let dump_proc     = dump Automatongraph.print arguments 
let dump_return   = dump Automatongraph.print (fun () -> results)
let dump_cutto    = dump Automatongraph.print (fun () -> cut_args)
let paths_proc     = dump Automatongraph.paths arguments 
let paths_return   = dump Automatongraph.paths (fun () -> results)
let paths_cutto    = dump Automatongraph.paths (fun () -> cut_args)
@

