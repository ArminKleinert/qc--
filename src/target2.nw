% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon


% ------------------------------------------------------------------ 
\section{Target Platform Description}
% ------------------------------------------------------------------ 

{\qcc} is a cross compiler:  code can be generated for a target
platform different from the platform the compiler is executed on.  The
target platform can be chosen at run-time of the compiler. 
Consequently, targets must be described by an {\ocaml} value that can
be passed at run-time (rather than by a module, which can not). 

<<target2.mli>>=
<<type cc>>
<<type map>>
<<type t>>

<<exported functions>>
val space : t -> Rtl.space -> Space.t
@ 

The [[space]] function returns information about a particular space.
It is a checked run-time error to ask about a space not on the list
for the target.

<<type t>>=
type t = { <<components of t>> }
@

Every target has a descriptive name.
<<components of t>>=
name: string;
@

A target is described by many small informations like pointer sizes
and one bigger chunk that describe calling conventions.  A single
platform can implement many calling conventions, which are identified
by names.  Calling conventions are not only selected at run-time, we
also intend to construct them at run-time.  For the time being,
however, we will rely on a fixed set of calling conventions.  

% ------------------------------------------------------------------ 
\subsection{Calling Convention}
% ------------------------------------------------------------------ 

A calling convention includes specifications for automata that
implement calling conventions.  In {\PAL} parameters are passed in
three different contexts:  into procedures, into continuations, and
out of both using [[return]].  Therefore, three different
specifications exist.

The [[allocatable]] field is mutable so that it can easily be modified by
a backplane function. This is useful for running tests and specifying a set
of registers.

<<type cc>>=
type cc =      
    { sp:           Rtl.loc         (* stack pointer                      *)
    ; return:       Rtl.rtl         (* machine instr passed to Cfg.return *)
       (* NEEDS TO TAKE ALTS AND INDEX AS PARAMETER *)
    ; proc:         Automaton2.spec  (* pass parameter to a procedure      *)
    ; cont:         Automaton2.spec  (* pass parameter to a continuation   *)
    ; ret:          Automaton2.spec  (* return values                      *)
    ; mutable allocatable:  Register.t list (* regs for reg-allocation            *)
    (* THIS TYPE SHOULD INCLUDE INFORMATION ABOUT ALTERNATE RETURN CONTINUATIONS,
       IN PARTICULAR, HOW BIG IS EACH SLOT, AND DOES IT HOLD AN INSTRUCTION OR
       AN ADDRESS? *)
    ; stack_slots:  Automaton2.spec (* where private data go *)
    }
@ Continuations, spill locations and other private data of a procedures
lives on the run-time stack. These locations are register-like (????) and
issued by an [[Automaton2.t]] value. The specification for that automaton
is determined by the calling convention.
@
To obtain a calling convention, pass its name to the [[cc]] component
which will return the convention response.  It is a checked run-time
error to ask for an unknown calling convention.
<<components of t>>=
cc: string -> cc; (* raises Error.Exn if name is unknown *)
@ 
Even though the stack pointer depends on the calling convention, the
virtual frame pointer is the same everywhere.
(Its width is target-dependent.)
<<components of t>>=
vfp : Rtl.exp;   (* the (immutable) virtual frame pointer *)
   (* always equal to Vfp.mk T.pointersize *)
@

% ------------------------------------------------------------------ 
\subsection{Bits and Pieces}
% ------------------------------------------------------------------ 

Many of the following characteristics of a target are more or less
obvious.  A {\PAL} source can name hardware registers for variables. 
The [[register]] component provides the location for a given name.  We
could remember the width for type checking as well but we are wearing
our assembler hats for now.

If [[alignment]] is 1, then the machine can read a word at any address.
Otherwise, only a word aligned to the [[alignment]] can be read.

<<components of t>>=
byteorder:      Rtl.aggregation   ; (* big/little endian, id *)
wordsize:       int               ; (* bits *)
pointersize:    int               ; (* bits *)
alignment:      int               ; (* alignment of word access *)
memsize:        int               ; (* smallest addressable unit, typically 8 *)
float:          string            ; (* "ieee754" float representation    *)
charset:        string            ; (* "latin1"  character encoding      *)
globals:        Automaton2.spec   ; (* Automaton to allocate global vars *)
@

A target has many address spaces:  main memory, different register
sets, temporaries.  A [[Rtl.loc]] value describes a location within
such a space.  Each space is homogeneous in the sense that all its
cells have the same width.  When cells within one space are aggregated
a common aggregation scheme is used, described by a space-specific
[[Rtl.aggregation]] value.  The cells within a space are addressed by
an integer expression denoting their \emph{address}.  All address
expressions for a space share a common width.  For example, memory
might by addressed by 32-bit wide addresses, registers by 5-bit wide
addresses. 
                
The [[spaces]] list enumerates all spaces used to compile for the
machine, including temporary spaces as well as the real hardware
spaces.
No space appears more than once on the list.
<<components of t>>=
spaces:          Space.t list;
@

\begin{quote}\it
    Target properties like [[pointersize]], or [[memsize]] are just
    properties of the [[m]] [[space]]. I like the more general idea
    of address spaces but I'm not sure whether we should get rid of the
    more specialized properties or should keep them as abbreviations.
    The whole problem stems from the fact that I only over time begin
    to understand what describes a target. --CL
\end{quote}

<<components of t>>=
data_section:   string;          (* ASM section for global regs *)
@

Code goes into the \emph{text} section, memory allocated for global
registers goes into the [[data_section]].

% ------------------------------------------------------------------ 
\subsection{RTLs for the Control-Flow Graph}
% ------------------------------------------------------------------ 

The nodes in the control-flow graph (module \module{cfg}) contain
{\rtl}s.  For example, a [[jump]] node takes an {\rtl} and not an
expression for the target.  The construction of these {\rtl}s is target
specific and so we provide [[embed]] functions that allow to do it.
For debugging of the {\cfg} we also like to re-construct the expressions
from these {\rtl}s.  We provide matching [[project]] functions to obtain
the original expressions \emph{if the supplied {\rtl}s} were constructed
by the construction functions.  Any attempt to do otherwise results in
an unchecked run-time error. 

The {\rtl}s do not have to represent machine instructions. It suffices
to create {\rtl}s that the code expander can recognize as jumps, calls,
and so on. 
<<type map>>=
type ('lo, 'hi) map'  = { embed   : 'lo -> 'hi
                        ; project : 'hi -> 'lo
                        }
type 'a map  = ('a, Rtl.rtl) map'
<<components of t>>=
goto:           Rtl.exp map ;
jump:           Rtl.exp map ;
call:           Rtl.exp map ;
branch:         (Rtl.exp * Rtl.exp) map; (* EXPLAIN ARGUMENTS TO THIS FUNCTION *)
@

% ------------------------------------------------------------------ 
\subsection{Temporaries, Register Allocation}
% ------------------------------------------------------------------ 

The register allocator (see \module{linscan}) needs target-specific
informations about hardware registers and temporaries. In particular:

<<exported functions>>=
val is_tmp : t -> Rtl.space -> bool  (* partially apply me *)
val fits:    t -> Rtl.space -> Register.t -> bool
@
\begin{itemize}
\item [[fits t sp r]] is true, if (hardware) register [[r]] can hold any 
      value from space [[sp]].  It is an unchecked run-time error
      unless [[sp]] is a temporary space from the target~[[t]].

\item [[is_tmp t sp]] is true, if [[sp]] denotes a {\rtl} space that
      holds temporaries.  It should be partially applied for efficiency.
\end{itemize}
@

The [[assign]] function creates an [[Rtl.rtl]] that transfers a value
from one register to another.  The source and destination must be
assignment compatible, otherwise it is a checked run-time error which
raises an [[Invalid_argument]] exception.  The first argument is a
lookup-function that provides information about the spaces the source
and destination registers live in. \emph{{\rtl} respects machine
invariant? --CL}
If the result is to respect the machine invariant, it must be a list
of RTLs.  I've temporarily expunged it as it seems to be unused. ---NR


<<components of t>>=
(*assign: (Rtl.space -> Space.t) -> src:Register.t -> dst:Register.t -> Rtl.rtl;*)
@

When the register allocator (see ~module{linscan}) must spill, it has to
create {\rtl}s that move values from registers to memory (spill) and
vice versa (reloads).  Here are two functions to create such {\rtl}s:
THE FIRST ARGUMENT ALMOST CERTAINLY SHOULD BE A [[Proc.t]].
<<components of t>>=
spill:  (Rtl.space -> Space.t) -> Register.t -> Rtl.loc -> Rtl.rtl list;
reload: (Rtl.space -> Space.t) -> Register.t -> Rtl.loc -> Rtl.rtl list;
@ 

The RTLs should be returned in \emph{execution order}, i.e., the first
element of the list is the first to be executed.  \emph{ALERT! Perhaps
we ought to revisit these interfaces, since the role of the first
argument is baffling. ---NR} 

@

% ------------------------------------------------------------------ 
\subsection{Compatibility with Source Code}
% ------------------------------------------------------------------ 

A {\PAL} source code advertises some target properties that of course
must match the actual target. The expected properties are recorded in
the fat environment (\module{fenv}). The [[check]] function compares an
actual target with the expectations in an environment and 
raises an error exception in case of inconsistencies.

<<target2.mli>>=
(*
 * val check: t -> Fenv.Clean.env -> unit  (* Error.ErrorExn *)
 *)
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

The implementation does not hold any surprises. We use module [[Map]]
to implement lookup tables for registers and calling conventions.

<<target2.ml>>=
module R       = Rtl
module S       = Space
module RP      = Rtl.Private
<<type map>>
<<type cc>>
<<type t>>

@

<<target2.ml>>=
let space t s = List.find (fun x -> x.Space.space = s) t.spaces
@
<<target2.ml>>=
let is_tmp { spaces = spaces } =
  List.fold_right
    (fun s rest ->
      match s.Space.classification with
      | Space.Temp _ -> (fun c -> c = s.Space.space || rest c)
      | _ -> rest)
    spaces
    (fun _ -> false)
@ 
<<target2.ml>>=
let space_fits tmp =
  match tmp.Space.classification with
  | Space.Temp {Space.stands_for=hw; Space.index_ok=locset} ->
      fun (hw', idx, width) -> hw = hw' && locset idx
  | _ -> assert false

let fits t space =
  try
    space_fits (List.find (fun s -> s.Space.space = space) t.spaces)
  with Not_found -> assert false
