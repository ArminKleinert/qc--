% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=2 sw=2 et: 
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon
% 

% inc: \usepackage{nchicago}

% ------------------------------------------------------------------ 
\section{Simple Optimization}
% ------------------------------------------------------------------ 

If you are looking for real optimizations, they don't exist yet.
But we hope to make some effort in that direction in the near future.
For now, we have a few simple transformations of the control-flow graph.

% ------------------------------------------------------------------ 
\subsection{The Optimizations}
% ------------------------------------------------------------------ 

We can simplify the expressions in the rtl's in a flow graph by calling
[[simplify_exps]].
<<optimize.mli>>=
val simplify_exps : 'a -> Oast2ir.proc -> bool
@
It is possible to build a flow graph such that a node cannot be reached
by following successors from the entry node, but it can be reached by
following predecessors from the exit node.
<<optimize.mli>>=
val trim_unreachable_code : 'a -> Oast2ir.proc -> bool
@
It's also easy to collapse simple branch chains.
We eliminate a branch to a join point if the branch is the only predecessor of the join
point.
<<optimize.mli>>=
val collapse_branch_chains: 'a -> Oast2ir.proc -> bool
@ 
Remove any instruction that leaves the machine in the same state in
which it started.  
This includes not only [[Rtl.null]] but also assignments of the form 
$x \mathbin{:=} x$.
<<optimize.mli>>=
val remove_nops : 'a -> Oast2ir.proc -> bool
@ 
Function [[validate]] does not actually do anything; it just checks
the machine invariant.
<<optimize.mli>>=
val validate : 'a -> Ast2ir.proc -> bool
@

% ------------------------------------------------------------------ 
\subsection{The Implementations}
% ------------------------------------------------------------------ 

We provide each of the optimization in turn.
<<optimize.ml>>=
module G  = Cfgx.M
module P  = Proc
module RP = Rtl.Private
module RU = Rtlutil
module Dn = Rtl.Dn
module Up = Rtl.Up
module SS = Strutil.Set
@
We traverse the flow graph and simplify rtl's.
<<optimize.ml>>=
let simplify_exps _ {Proc.cfg = cfg} =
  let simplify_node n rst =
    match G.to_instr n with
    | None   -> rst
    | Some i -> G.update_instr Simplify.rtl n; true in
  G.fold_nodes simplify_node false cfg
@
A forward dfs followed by a backwards dfs will find nodes reachable from the entry
(following successors) and nodes reachable from the exit (following predecessors).
Since we want to catch loops, we can't just look for nodes that have no successors.
Instead, we compare the nodes we can reach from the entry node with the nodes we can
reach from the exit node.
We break any loops among these nodes by setting the successor of each join node to the
illegal node.
Finally, we can delete any nodes that have no successors.

When we delete a node, we also need to remove any spans that are associated
with the node.
Because spans are associated with labels, we also collect the labels that are
accessible from the entry node.
Then we remove the unreachable spans.
<<optimize.ml>>=
let trim_unreachable_code _ ({Proc.cfg = cfg} as proc) =
  let module IS = Set.Make (struct type t = int let compare = compare end) in
  let (nodes_from_entry, labels_from_entry) =
    let add_labels n lset = 
      if G.is_join n then List.fold_right SS.add (G.labels n) lset else lset in
    G.postorder_dfs (fun n (nset, lset) -> (IS.add (G.num n) nset, add_labels n lset))
                    (IS.empty, SS.empty) cfg in
  let nodes_from_exit  = G.reverse_podfs (fun n rst -> n :: rst) [] cfg in
  let to_delete = List.filter (fun n -> not (IS.mem (G.num n) nodes_from_entry))
                              nodes_from_exit in
  let () = List.iter (fun n -> if G.kind n = G.Join then G.set_succ n (G.illegal cfg))
                     to_delete in
  let hanging_nodes =
    List.filter (fun n -> G.kind n <> G.Entry &&
                          List.for_all (fun p -> G.kind p = G.Illegal) (G.preds n)) in
  let rec delete_nodes = function
    | [] -> ()
    | n :: rst -> 
      let succs  = G.succs n in
      (G.delete cfg n;
       delete_nodes (hanging_nodes succs @ rst)) in
  let proc_name = proc.Proc.symbol#original_text in
  delete_nodes (hanging_nodes to_delete);
  proc.Proc.spans <-
      List.filter (fun (l,_) -> l = proc_name || SS.mem l labels_from_entry)
                  proc.Proc.spans;
  to_delete <> []
@
We find each join point with one predecessor, and if the predecessor is a branch to the
join point, we eliminate the branch and the join point.
<<optimize.ml>>=
let collapse_branch_chains _ {Proc.cfg = cfg} =
  let brp node = G.kind node = G.Branch &&
                 let p = G.pred node in
                 G.kind p = G.Join in
  let to_collapse =
    G.fold_nodes (fun n rst -> if brp n then n :: rst else rst) []  cfg in
  let collapse n =
    let j = G.pred n in
    let s = G.succ n in
    List.iter (fun p -> match G.kind p with
                        | G.Cbranch ->
                          if G.eq (G.tsucc p) j then G.set_tsucc p s;
                          if G.eq (G.fsucc p) j then G.set_fsucc p s
                        | G.Mbranch -> ()
                        | G.Branch  -> G.set_succ p s
                        | _ -> ())
              (G.preds j);
    if List.for_all (fun n -> G.kind n = G.Illegal) (G.preds j)
    then (G.delete cfg j; G.delete cfg n) in
  List.iter collapse to_collapse;
  to_collapse <> []
@
<<optimize.ml>>=
let remove_nops _ {Proc.cfg = cfg} =
  let changed = ref false in
  let is_nop rtl =
    let unneeded = function
      | (_, RP.Kill _) -> true
      | (_, RP.Store (l, RP.Fetch(l', w'), w)) -> assert (w=w'); l = l'
      | _ -> false in
    match rtl with
    | Some r -> let RP.Rtl effs = Dn.rtl r in List.for_all unneeded effs
    | None -> false in
  let remove n = Cfgutil.delete cfg n; changed := true in
  G.iter_nodes (fun n -> if is_nop (G.to_executable n) then remove n) cfg;
  !changed
@ 
<<optimize.ml>>=
let badrtl r = Printf.eprintf "non-target RTL: %s\n" (RU.ToReadableString.rtl r)
let validate _ proc =
  let ok n = match G.to_executable n with
  | Some r -> if proc.P.target.Target.is_instruction r then () else badrtl r
  | None -> () in
  G.iter_nodes ok proc.P.cfg;
  false
