% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% vim: ts=8 sts=4 sw=4 et
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon

% ------------------------------------------------------------------ 
\section{Driver}
% ------------------------------------------------------------------ 

This module presents the compiler as a compositional collection of
abstract values and functions. These functions and values are exported
as primitives to a Lua interpreter, giving the user a way to customize
the compiler.

In case of an error, all functions raise [[Error.ErrorExn]]. An error
message is typically printed to [[stderr]] before the exception is
raised.

\begin{itemize}
\item [[version]]: print a version information to [[stdout]]. This is
      intentionally not a string such it is harder to abuse.
\item [[scan]]: scans a file and prints all tokens together with their
      source code position. Only useful to debug the scanner.
\item [[parse]]: returns the abstract syntax of a {\PAL} file.
\item [[emit_asdl]]: writes the {\AST} in {\small ASDL} syntax to
      [[stdout]].
\item [[check]]: checks the static semantics of a file and returns 
      an environment [[env]] value upon success. 
\item [[compile]]: compiles an {\AST} to assembly code. The function
      calls the Lua function [[optimize]] for every function and passed
      the functions control-flow graph [[cfg]] and its [[stack]] to it.
\item [[assemble]]: emits an assembler program.
\item [[print]]: prints a [[doc]] value to [[stdout]], formatting the
      output for a line width of [[width]] characters.       
\end{itemize}

The compiler is controlled by a Lua interpreter that is build in the
\module{main2} module. It takes several user-defined types to extend it.
This module provides new Lua types like [[asm]] and [[ast]] for the
interpreter, and a library that uses them. 

<<driver2.mli>>=
val check     : 
  Srcmap.map * Ast.program -> 'proc Asm3.assembler -> 'proc Fenv.Clean.env'
val emit_asdl : 'a * Ast.program -> unit
val parse     : string -> Srcmap.map * Ast.program
val print     : Pp.doc -> int -> out_channel -> unit
val pretty    : 'a * Ast.toplevel list -> Pp.doc
val scan      : string -> unit
val version   : unit -> unit
val compile   :
  (Proc.t -> unit) ->
  'a * Ast.program -> Target2.t -> Fenv.Clean.env -> Proc.t Asm3.assembler
val new_compile :
  (Ast2ir.proc -> unit) -> 'a * Ast.program -> Ast2ir.tgt
  -> Ast2ir.proc Fenv.Clean.env' -> Ast2ir.proc Asm3.assembler
@

% ------------------------------------------------------------------ 
\subsection{Caml Implementation}
% ------------------------------------------------------------------ 
<<driver2.ml>>=
module E   = Error
module F   = Fenv.Clean
<<driver2.ml>>=
let version () =
    ( This.name     stdout 
    ; output_string stdout " "
    ; This.version  stdout 
    ; output_string stdout 
        "\n(c) 2000, 2001 President and Fellows of Harvard University\n" 
    ; output_string stdout 
        "See also http://www.cminusminus.org/\n"
    )
<<driver2.ml>>=
let scan file =
    let fd          = try open_in file
                      with Sys_error(msg) -> E.error msg    in
    let finally ()  = close_in fd                           in
    let lexbuf      = Lexing.from_channel fd                in
    let map         = Srcmap.mk ()                          in
    let scanner     = Scan.scan map                         in
    let location lb = Srcmap.location map (Lexing.lexeme_start lb) in
    let rec loop lb =
        match scanner lb with
            | Parse.EOF -> ()
            | tok       ->
                let (file,line,col) = location lb           in
                let tok             = Scan.tok2str tok      in
                    ( Printf.printf "%-16s %3d %2d %s\n" file line col tok
                    ; loop lb
                    )
    in
        ( Srcmap.sync map 0 (file,1,1)
        ; loop lexbuf
        ; finally ()
        )
<<driver2.ml>>=
let parse (file:string) = 
    let fd          = try open_in file
                      with Sys_error(msg) -> E.error msg    in
    let finally ()  = close_in fd                           in
    let lexbuf      = Lexing.from_channel fd                in
    let map         = Srcmap.mk ()                          in
    let scanner     = Scan.scan map                         in
        try
            ( Srcmap.sync map 0 (file,1,1)
            ; (map, Parse.program scanner lexbuf) 
            )
        with
            | Parsing.Parse_error ->
              ( finally()
              ; E.errorPointPrt (map, Lexing.lexeme_start lexbuf) "parse error"
              ; E.error "parse error - compilation aborted"
              )
            | E.ErrorExn msg ->
              ( finally()
              ; E.errorPointPrt (map, Lexing.lexeme_start lexbuf) msg
              ; E.error "parse error - compilation aborted"
              )
            | e ->
              ( finally()
              ; raise e
              )
<<driver2.ml>>=
let emit_asdl (map,ast) =
        AstUtil.sexp_wr_program ast stdout
@
The user specifies in the source code some target properties. They must
be consistent with the actual target. We check this in
[[consistency_check]].
THIS CHECK SHOULD PROBABLY BE MOVED INTO ELAB, WHICH SHOULD ALSO CHECK FOR
THINGS LIKE CORRECT CALLING CONVENTIONS AND HARDWARE REGISTERS.
<<driver2.ml>>=
let consistency_check env (t:('a, 'b) Target2.t') =
    let int i = string_of_int i in
    let msg property source target = 
        let m = Printf.sprintf 
                "source code specifies %s %s, but target %s specifies %s %s"
                property source t.Target2.name property target 
        in Error.error (m)
    in match F.findEndianness env, t.Target2.byteorder with
    | F.Big,    Rtl.LittleEndian -> msg "byteorder" "big"    "little"
    | F.Little, Rtl.BigEndian    -> msg "byteorder" "little" "big"
    | _ -> if F.findWordsize env <> t.Target2.wordsize then
        msg "wordsize" (int (F.findWordsize env)) (int t.Target2.wordsize)
    else if F.findMemsize env <> t.Target2.memsize then
        msg "memsize" (int (F.findMemsize env)) (int t.Target2.memsize)
    else if F.findPointersize env <> t.Target2.pointersize then
        msg "pointer size" (int (F.findPointersize env)) 
            (int t.Target2.pointersize)
    else if F.findFloat env <> t.Target2.float then
        msg "floating-point standard" (F.findFloat env) t.Target2.float
    else if F.findCharset env <> t.Target2.charset then
        msg "charset" (F.findCharset env) t.Target2.charset
    else
        ()
@
<<driver2.ml>>=
let check (map,ast) (asm) =
    let env      = Fenv.Dirty.empty map asm          in
    let env      = Fenv.Dirty.push env (Fenv.Dirty.emptyscope) in
    let env      = Elab.Env.global   env ast         in
    let env      = Elab.Check.global env ast         in
    let env      = Elab.Env.setDefaults env          in
    let ()       = if Fenv.Dirty.errorFlag env then 
                      Error.error "compilation aborted because of errors." in
    Fenv.clean env
<<driver2.ml>>=
let compile (opt) (map,ast) (target) (env)  =
    let () = consistency_check env target in   
    Ast3ir.translate env target opt ast 

let new_compile (opt) (map,ast) (target) (env)  =
    let () = consistency_check env target in   
    Ast2ir.translate target env opt ast 
<<driver2.ml>>=
let pretty (map,ast) = Astpp.program ast
let print doc width channel = Pp.ppToFile channel width doc
@
