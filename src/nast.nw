% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
%
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon

\section{Normalized Abstract-Syntax Tree}

This is an AST, except we sort and organize everything.
<<exposed types>>=
type name = string
type hint = string
type convention = string
type procname   = string
type label      = string

type range = Ast.range
type ty = Ast.ty
@ 
<<wishful thinking>>=
type size = int
type bits = Bits.bits
type exp  = Rtl.exp
type loc  = Rtl.loc (* optimism *)
type rtl  = Rtl.rtl
type ty'  = Ty of int  (* bits$n$ *)
type init =
  | ExpData    of exp list
  | StringData of string
@ 
Here we have register variables,
continuation parameters, actual parameters.
<<wishful thinking>>=
type runtime_access = Invisible | Invariant | Variant

type xregister = runtime_access * hint * ty * name (* ? *)
<<exposed types>>=
type register  = Ast.register
type cformal   = hint * name
type 'e actual = hint * 'e
@ 
Flow annotations on calls and cut to.
<<wishful thinking>>=
type iflow = {
    cuts_to : name marked list;
    unwinds_to : name marked list;
    returns_to : name marked list;
    aborts : bool;
    returns : bool;
  }
type cflow = {
    ccuts_to : name list;
    caborts : bool;
  }
<<exposed types>>=
type flow  = Ast.flow list
type cflow = flow
@
Statements.  Types [['l]], [['e]], and [['a]] are locations,
expressions, and assignments, which we expect to be [[Ast]] types
first and [[Rtl]] types later.
<<exposed types>>=
type ('l, 'e, 'a) stmt =
  | StmtAt of ('l, 'e, 'a) stmt * Ast.region
  | If     of 'e * ('l, 'e, 'a) stmt list * ('l, 'e, 'a) stmt list
  | Switch of range option * 'e * (range list * ('l, 'e, 'a) stmt list) list
  | Label  of name
  | Cont   of name * cformal list
  | Span   of 'e * 'e * ('l, 'e, 'a) stmt list
  | Assign of 'a
  | Call   of 'l list * convention * 'e   * 'e actual list * procname list * flow
  | Prim   of 'l list * convention * name * 'e actual list * flow
  | Goto   of 'e * label list
  | Jump   of convention * 'e * 'e actual list * procname list
  | Cut    of 'e * 'e actual list * cflow 
  | Return of convention * ('e * 'e) option * 'e actual list
@ 
Both compilation units and procedures can contain type and constant definitions.
Because these are scoped, we accumulate these definitions in each
procedure \emph{and} in the unit as a whole.
Therefore they have their own type.
<<exposed types>>=
type typedefn     = ty * string list
type 'e constdefn = ty option * string * 'e
type 'a marked    = Ast.region * 'a
type 'e compile_time_defns = {
    types     : typedefn marked list;
    constants : 'e constdefn marked list;
  }
@ 
Here is a normalized form of procedures and of (possibly initialized) data.
Initialized data, as well as data in the form of [[SSpan]] and
[[Procedure]], are found only at top level.
<<exposed types>>=
type ('l, 'e, 'a) proc = {
    cc            : convention;
    name          : name;
    formals       : (hint * Ast.invariant * ty * name) list;
    locals        : register marked list;
    pdecls        : 'e compile_time_defns;
    continuations : name marked list;
    stackdata     : (void, void, void) datum list;
    code          : ('l, 'e, 'a) stmt list;
  }
and ('l, 'e, 'a)  datum =
  | Datalabel  of name
  | Align      of int
  | ReserveMem of ty * Ast.memsize * Ast.init option (*init always none on stackdata*)
  | Procedure  of ('l, 'e, 'a) proc
  | SSpan      of 'e * 'e * ('l, 'e, 'a) datum list
and void = Void of void
@ 
And last, the normal form of a compilation unit.
<<wishful thinking>>=
type section = unit
type extref  = { internal : name; external' : name }
type 'e t' = {
    target  : Metrics.t;
    imports : extref marked list;
    exports : extref marked list;
    globals : register marked list;
    udecls  : 'e compile_time_defns;
    sections : section list;
  }
<<exposed types>>=
type assign  = (Ast.name_or_mem list * Ast.guarded list)
type section = name * (Ast.expr, Ast.name_or_mem, assign) datum list
type t = {
    target   : Ast.arch marked list;
    imports  : (Ast.region * Ast.ty option * Ast.import list) list;
    exports  : (Ast.region * Ast.export list) list;
    globals  : register marked list;
    code_labels : name marked list;
    udecls   : Ast.expr compile_time_defns;
    sections : section list
  }
@ 
<<nast.mli>>=
<<exposed types>>
@ 
\section{Implementation}

One abbreviation, types, and a very important constant.
<<nast.ml>>=
module A = Ast
<<exposed types>>
let default_proc_section = "text"
@ 
First, some simple utility functions.
<<nast.ml>>=
let id ss = ss
let null = function [] -> true | _ :: _ -> false

let rflatten xs =
  let add (r, xs) tail = List.fold_right (fun a t -> (r, a) :: t) xs tail in
  List.fold_right add xs []



let cformal (hint, name) = (Aux.Option.get "" hint, name)
let formal (hint, variance, ty, name) = (Aux.Option.get "" hint, variance, ty, name)
let actual (hint, name) = (Aux.Option.get "" hint, name)
let convention = Aux.Option.get "C--"
@ 
Conversion of [[datum]].
The name [[fdata]] is short for ``fold data.''
<<nast.ml>>=
let rec add_datum r d ds = match d with
  | A.DatumAt (d, r) -> add_datum r d ds
  | A.Label l -> Datalabel l :: ds
  | A.Align n -> Align n :: ds
  | A.MemDecl (t, s, init) -> ReserveMem (t, s, init) :: ds

let fdata r = List.fold_right (add_datum r) 
@ 
The main idea in this module is CPS.
We have a boatload of accumulating parameters, and eventually we get a
program. 
The parameters are:
\begin{quote}
\begin{tabular}{ll}
[[imps]]& Imports\\
[[exports]]& Exports\\
[[lbls]]& Code labels\\
[[ks]]& Continuations\\
[[consts]]& Constant definitions\\
[[types]]& Type definitions\\
[[archs]]& Target-specific declarations\\
[[data]]& Initialized data or stack data\\
\end{tabular}
\end{quote}
Most of these accumulating parameters accumulate declarations.
<<nast.ml>>=
let rec decl r imps exports lbls ks consts types regs archs data d k = match d with
  | A.DeclAt(x,r)   -> decl r imps exports lbls ks consts types regs archs data x k
  | A.Typedef d     -> k imps exports lbls ks consts ((r,d) :: types) regs archs data
  | A.Import (t,ii) -> k ((r,t,ii)::imps) exports lbls ks consts types regs archs data
  | A.Export (t,ee) -> k imps ((r,ee) :: exports) lbls ks consts types regs archs data
  | A.Const d       -> k imps exports lbls ks ((r,d) :: consts)  types regs archs data
  | A.Registers rs  -> k imps exports lbls ks consts types ((r, rs) :: regs) archs data
  | A.Target    t   -> k imps exports lbls ks consts types regs ((r, t) :: archs) data
  | A.Pragma        -> k imps exports lbls ks consts types regs archs data
@ 
This is a generic lifting function.
Function [[kmap f]] turns function [[f]] from a function on~[['a]] to
a function on \mbox{[['a list]]}.
The function has to supply a value to its continuation;
if it doesn't, use [[kmap_none]].
<<nast.ml>>=
let rec kmap f cons r imps exports lbls ks consts types regs archs data xs k =
  match xs with
  | []      -> k [] imps exports lbls ks consts types regs archs data
  | x :: xs ->
      kmap f cons r imps exports lbls ks consts types regs archs data xs
      (fun xs imps exports lbls ks consts types regs archs data ->
        f r imps exports lbls ks consts types regs archs data x
          (fun x imps exports lbls ks consts types regs archs data  ->
            k (cons x xs) imps exports lbls ks consts types regs archs data))

let kmap_none f r imps exports lbls ks consts types regs archs data xs k =  
  let xk f r imps exports lbls ks consts types regs archs data x k = 
    f r imps exports lbls ks consts types regs archs data x (k []) in
  kmap (xk f) (fun _ _ -> [])
    r imps exports lbls ks consts types regs archs data xs (fun _ -> k)
@ 
And now, processing a body item, which is liftable with [[kmap]].
The continuation~[[k]] expects an optional statement, which is represented
as a value of type [[stmt list -> stmt list]].
If there can be no statement, [[k]]'s first argument is~[[id]].
<<nast.ml>>=
let rec body r imps exports lbls ks consts types regs archs data b k = match b with
| A.BodyAt(b,r) -> body r imps exports lbls ks consts types regs archs data b k
| A.DeclBody d  -> decl r imps exports lbls ks consts types regs archs data d (k id)
| A.StmtBody s  -> (<<match [[stmt]] [[s]] at [[r]] and continue with [[k]]>>)
| A.DataBody ds -> k id imps exports lbls ks consts types regs archs (fdata r ds data)
and bodies r = kmap body (fun add ss -> add ss) r
@ 
Here are statements.
Because an [[Ast.stmt]] may be a declaration instead of a
``real'' statement, this function may or may not supply an actual statement.
Function [[cons]] is for the case where we do supply a statement;
[[id]]~is used where there is no statement.
Function [[atomic]] helps with the common case in which a statement
has no substatements, and therefore no declarations.
The CPS for the other cases is less scary than it looks---if you
understand [[If]], you understand it all.
<<match [[stmt]] [[s]] at [[r]] and continue with [[k]]>>=
let rec stmt r s k = 
  let cons s ss = StmtAt (s, r) :: ss in
  let atomic s = k (cons s) imps exports lbls ks consts types regs archs data in
  match s with
  | A.StmtAt(s,r) -> stmt r s k
  | A.IfStmt (c,b1,b2)   ->
      bodies r imps exports lbls ks consts types regs archs data b2
      (fun ss1 imps exports lbls ks consts types regs archs data ->
        bodies r imps exports lbls ks consts types regs archs data b1 
          (fun ss2 imps exports lbls ks consts types regs archs data ->
            k (cons(If(c,ss1,ss2))) imps exports lbls ks consts types regs archs data))
  | A.SwitchStmt (range,e,aa) ->
      arms r imps exports lbls ks consts types regs archs data aa
        (fun aa imps exports lbls ks consts types regs archs data ->
          let stmt = cons (Switch (range, e, aa)) in
          k stmt imps exports lbls ks consts types regs archs data)
  | A.LabelStmt l ->
      k (cons (Label l)) imps exports ((r, l) :: lbls) ks consts types regs archs data
  | A.ContStmt (n, formals) ->
      let stmt = cons (Cont (n, List.map cformal formals)) in
      k stmt imps exports lbls ((r, n) :: ks) consts types regs archs data
  | A.SpanStmt(key,v,bs)   -> 
      bodies r imps exports lbls ks consts types regs archs data bs
      (fun ss imps exports lbls ks consts types regs archs data ->
        k (cons (Span (key,v,ss))) imps exports lbls ks consts types regs archs data)
  | A.AssignStmt (ls, rs) ->
      atomic (Assign (ls, rs))
  | A.CallStmt (ls, cc, p, a's, tgts, flows) ->
      atomic (Call (ls, convention cc, p, List.map actual a's, tgts, flows))
  | A.PrimStmt (ls, cc, p, a's, flows) ->
      atomic (Prim (ls, convention cc, p, List.map actual a's, flows))
  | A.GotoStmt (e, tgts) ->
      atomic (Goto (e, tgts))
  | A.JumpStmt (cc, p, a's, tgts) ->
      atomic (Jump (convention cc, p, List.map actual a's, tgts))
  | A.CutStmt (e, a's, flows) ->
      atomic (Cut (e, List.map actual a's, flows))
  | A.ReturnStmt (cc, alt, a's) ->
      atomic (Return (convention cc, alt, List.map actual a's))
  | A.EmptyStmt
  | A.CommentStmt _   ->
      k id imps exports lbls ks consts types regs archs data in
stmt r s k
@ 
Arm of a case statement.  Nothing interesting here.
<<nast.ml>>=
and arm r imps exports lbls ks consts types regs archs data a k = match a with
| A.ArmAt (a,r) -> arm r imps exports lbls ks consts types regs archs data a k
| A.Case (ranges,bs) -> 
    bodies r imps exports lbls ks consts types regs archs data bs
      (fun stmts imps exports lbls ks consts types regs archs data ->
        k (ranges, stmts) imps exports lbls ks consts types regs archs data) 
and arms r = kmap arm (fun x y -> x::y) r
@
A section simply accumulates data, so its continuation doesn't take an
additional argument before [[imps]].
In other words, [[section]] is like [[decl]] and not like [[body]] or
[[stmt]]. 
<<nast.ml>>=
let rec section r imps exports lbls ks consts types regs archs data s k = match s with
| A.SectionAt (s,r) ->
    section r imps exports lbls ks consts types regs archs data s k
| A.Decl d ->
    decl    r imps exports lbls ks consts types regs archs data d k
| A.SSpan(key, v, ss) ->
    sections r imps exports lbls ks consts types regs archs [] ss
      (fun imps exports lbls ks pconsts ptypes pregs archs sdata ->
        k imps exports lbls ks pconsts ptypes pregs archs (SSpan(key,v,sdata)::data))
| A.Datum d ->
    k imps exports lbls ks consts types regs archs (add_datum r d data)
| A.Procedure(cc,p,fs,bs) ->
    bodies r imps exports lbls [] [] [] [] archs [] bs
    (fun ss imps exports lbls pks pconsts ptypes pregs archs pdata ->
      let cdecls = { constants = pconsts; types = ptypes } in
      let p = { cc = convention cc; name = p; formals = List.map formal fs; code = ss;
                continuations = pks;
                locals = rflatten pregs; pdecls = cdecls; stackdata = pdata; } in
      k imps exports lbls ks consts types regs archs (Procedure p :: data))
and sections r = kmap_none section r
@ 
At top level, we accumulate sections, where a section is a named list of data.
Again, we could have a declaration at top level, so we use [[cons]]
and [[id]] as before.  
<<nast.ml>>=
let rec toplevel r imps exports lbls ks consts types regs archs data t k = 
  let cons s ss = (s, r) :: ss in
  match t with
  | A.ToplevelAt(t,r) ->
      toplevel r imps exports lbls ks consts types regs archs data t k
  | A.Section(name, ss) ->
      sections r imps exports lbls ks consts types regs archs [] ss
        (fun imps exports lbls ks consts types regs archs sdata ->
          k (cons (name, sdata)) imps exports lbls ks consts types regs archs data)
  | A.TopDecl d ->
      decl r imps exports lbls ks consts types regs archs data d (k id)
  | A.TopProcedure p ->
      let t = A.Section(default_proc_section, [A.Procedure p]) in
      toplevel r imps exports lbls ks consts types regs archs data t k

let program ts =
  let checknull what l =
    if not (null l) then Impossible.impossible ("some toplevel " ^ what) in
  kmap toplevel (fun add t -> add t) Srcmap.null [] [] [] [] [] [] [] [] [] ts
    (fun ss imps exports lbls ks consts types regs archs sdata ->
      let _ = checknull "data" sdata in
      let _ = checknull "continuations" ks in
      { target = rflatten archs; imports = imps; exports = exports;
        code_labels = lbls; globals = rflatten regs; sections = sdata;
        udecls = { types = types; constants = consts };
      })
