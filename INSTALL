

                Building the Quick C-- Compiler

This documents describes how to build the QC-- compiler from source
code and lays out a road map of the source code.

Prerequisites

The compiler is written in the functional programming language
Objective Caml (http://caml.inria.fr). Most of the source code is
written as a literate program using the Noweb literate programming
tool.  The documentation is intended to be formatted with for the
LaTeX type setting system. The build process is controlled by the
make-like tool mk.  Mk was originally written by Andrew Hume at Bell
Labs, became the build tool of the Plan 9 operating system, and then
was released to the world as part of Inferno.  We provide a version of
mk derived from the Inferno distribution. If you are using old
versions of mk from Unix v7 or similar, you will need to upgrade.

To build the compiler from source code you need:

        * Objective Caml 3.02+patch, 3.03 or 3.04. The patch for OCaml
          3.02 is included and patching is described below. The
          development is done with OCaml 3.04 at the moment.
        * asdlGen for OCaml
        * Noweb 2.9 or better
        * LaTeX
        * Perl's POD utilities, namely pod2man(1)

The abstract syntax for C-- is specified in ASDL. We provide the library
files in asdl/ and generated sources in src/. However, we do not provide
the generator which means there is no way to re-compile the ASDL
specification. We might get rid of the ASDL specifications in the
future.


Patching OCaml 3.02

OCaml 3.02 needs a bug fix before it can compile all sources in the lua/
directory. No patch is neccessary of you are running OCaml 3.0[34].

The patch is provided as ocaml-3.02.patch. To apply it you
need the source code for OCaml 3.02. Unpack them an CD into the
ocaml-3.02/typing directory to apply the patch:

    tar zxvf ocaml-3.02.tar.gz
    cd ocaml-3.02/typing
    patch -p1 < /some/where/ocaml-3.02.patch
    cd ..
    ./configure
    make world
    make opt
    make install

Then continue to build OCaml as usual from its top-level. 

We expect the patch to be part of the next OCaml release such that this
step won't be necessary in the future.


Building mk

Before you can build anything else, you must build mk.  You will find
instructions in mk/README.  Once you have built mk, put it on your PATH.


Building qc--

The recursive build process is controlled by mkfile's for mk. All
mkfile's include the file config/ocaml.mk that contains the rules for
compiling OCaml source files. It is thus the central file to changes
paths or compiler options.

        config/ocaml.mk         mk rules for OCaml
        config/noweb.mk         mk rules to extract sources from Noweb files
        mkfile                  top-level mkfile

To compile everything call mk in this directory:

        % mk 

This starts the compilation process. The resulting files are:

        bin/qc--            qc-- byte code code binary 
        man/man1/qc--.1     manual page

If the OCaml native code compiler ocamlopt is supported in your platform
and is installed you can also create a native code binary qc--.opt:

        % mk all.opt

To execute the test suite you can also call the test target:

        % mk test


Roadmap

The source code of the compiler is split into different directories. 
The top level mkfile knows the dependencies between them and makes
them in the right order.  Files shared by many directories go into the
lib/ directory which is initially empty.  Once all shared files are in
place development can be continued in the sub-directories and the
mkfiles provided there. Refer to the mkfiles for the high level
targets available in each directory.

In alphabetical order:

    asdl/       OCaml sources for the runtime system of AsdlGen
                generated code.
    
    aug99/      Sources for an earlier implementation of c--. Not used
                and interesting only for historical reasons.
    
    bin/        Initially empty. Contains binary after compilation.
    
    camlburg/   A burg implementation for OCaml; comes with its own
                documentation.

    cllib/      Library of OCaml modules for pretty printing and
                and parsing.

    config/     Global rule set for compiling OCaml sources and other 
                global files.
    
    examples/   Some c-- sources. Currently empty.
    
    figures/    PostScript figures used for documentation.

    lib/        Initially empty. Contains library modules during
                compilation.
    
    lua/        An interpreter for the embedded script language Lua.
    
    man/        Initially empty. Contains manual page after
                compilation. 

    mk/         C implementation of the make-like tool mk.

    specialized/ Partially evaluated compiler sources.

    src/        Main sources for the c-- compiler.

    tdpe/       Code for partial evaluation of the compiler, see README.
                Not yet updated for Ocaml 3.04 label mode. However, this
                code is currently by default not compiled and linked.
    
    test/       Code for testing.


Directories depend on each other in the following order:

    cllib lua asdl camlburg src test


