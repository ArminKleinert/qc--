

                Building the Quick C-- Compiler

This documents describes how to build the QC-- compiler from source
code and lays out a road map of the source code.

Prerequisites

The compiler is written in the functional programming language
Objective Caml (http://caml.inria.fr). Most of the source code is
written as a literate program using the Noweb literate programming
tool.  The documentation is intended to be formatted with for the
LaTeX type setting system. The build process is controlled by the
make-like tool mk.  Mk was originally written by Andrew Hume at Bell
Labs, became the build tool of the Plan 9 operating system, and then
was released to the world as part of Inferno.  We provide a version of
mk derived from the Inferno distribution. If you are using old
versions of mk from Unix v7 or similar, you will need to upgrade.

To build the compiler from source code you need:

        * Objective Caml 3.02 installation with bug fix for nested
          modules (which Christian will tell people where to find)
        * Noweb 2.9 or better
        * LaTeX

Building mk

Before you can build anything else, you must build mk.  You will find
instructions in mk/README.  Once you have built mk, put it on your PATH.


Building qc--

The recursive build process is controlled by mkfile's for mk. All
mkfile's include the file config/ocaml.mk that contains the rules for
compiling OCaml source files. It is thus the central file to changes
paths or compiler options.

        config/ocaml.mk         mk rules for OCaml
        config/noweb.mk         mk rules to extract sources from Noweb files
        mkfile                  top-level mkfile

To compile everything call mk in this directory:

        % mk depend
        % mk

This starts the compilation process. The resulting files are:

        bin/qc--            qc-- native code binary 
        man/man1/qc--.1     manual page

To execute the test suite you can also call the test target:

        % mk test


Roadmap

The source code of the compiler is split into different directories. 
The top level mkfile knows the dependencies between them and makes
them in the right order.  Files shared by many directories go into the
lib/ directory which is initially empty.  Once all shared files are in
place development can be continued in the sub-directories and the
mkfiles provided there. Refer to the mkfiles for the high level
targets available in each directory.

    src/        Main sources for the c-- compiler.

    asdl/       OCaml sources for the runtime system of AsdlGen
                generated code.

    cllib/      Library of OCaml modules for pretty printing and
                and parsing.

    config/     Global rule set for compiling OCaml sources and other 
                global files.
    
    aug99/      Sources for an earlier implementation of c--. Not used
                and interesting only for historical reasons.

    man/        Initially empty. Contains manual page after
                compilation. 

    bin/        Initially empty. Contains binary after compilation.

    lib/        Initially empty. Contains library modules during
                compilation.

    examples/   Some c-- sources. Currently empty.

    test/       Code for testing.

    figures/    PostScript figures used for documentation.

    camlburg/   A burg implementation for OCaml.

    mk/         C implementation of the make-like tool mk.

    lua/        An interpreter for the embedded script language Lua.
