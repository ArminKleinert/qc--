

                Building the Quick C-- Compiler

This document describes how to build the QC-- compiler from source
code and lays out a road map of the source code.

Prerequisites

The compiler is written in the functional programming language Objective
Caml (http://caml.inria.fr). Most of the source code is written as a
literate program using the Noweb literate programming tool.  The
documentation is intended to be formatted with for the LaTeX type
setting system. The build process is controlled by the make-like tool
mk.  Mk was originally written by Andrew Hume at Bell Labs, became the
build tool of the Plan 9 operating system, and then was released to the
world as part of Inferno.  We provide at
http://www.cminusminus.org/tools.html a version of mk derived from the
Inferno distribution. The C source code is also part of the Quick C--
distribution. If you are using old versions of mk from Unix v7 or
similar, you will need to upgrade.

To build the compiler from source code you need:

        * Objective Caml 3.04 or 3.07 and higher
          (including ocamlyacc and ocamllex)
          [OCaml 3.06 has a bug that causes qc-- to segfault]
        * Noweb 2.9 or better
        * LaTeX
        * Perl's POD utilities, namely pod2man(1)

The compiler comes with an interpreter implemented in C. For the
interpreter to compile you need in addition:

        * ANSI C Compiler, for example gcc
        * Lua 4.0 installed, including library and header files

Some source files are generated by tools that are not included in the
distribution. You can compile the generated sources, but you cannot
change the specification that led to them, For example, the abstract
syntax for C-- is specified in ASDL. We provide the library files in
asdl/ and generated sources in gen/ such that you do not need the ASDL
generator. However, we do not provide the generator which means there is
no way to re-compile the ASDL specification. 

Building Mk

Before you can build anything else, you must build mk.  You will find
instructions in mk/README.  Once you have built mk, put it on your PATH.


Building QC--

The recursive build process is controlled by mkfiles for mk(1). All
mkfiles include files from config/ to find tools and libraries. It
should suffice to make changes only here, if at all. The file that most
likely needs some attention is config/lua.mk. It defines the path the
Lua libraries and header files. We provide a configure script that tries
to guess platform-dependent settings such that you hopefully don't need
to edit configuration files manually.

        config/ocaml.mk         The OCaml compiler suite
        config/noweb.mk         Noweb literate programming syste,
        config/latex.mk         LaTeX for documentation
        config/man.mk           Creating manual pages with perlpod(1)
        config/c.mk             Compiling C code
        config/lua.mk           Library and header files for Lua
        config/config.mk        ./configure-generated file
        mkfile                  top-level mkfile

To compile everything, run configure and mk:

        ./configure
	mk timestamps # needed if direct from CVS repository
        mk 

If ./configure fails it will tell what to try; it also writes helpful
output into a configure.log file. The file it creates is
config/config.mk. You can create this file manually from
config/config.mk.default.

The invocation of mk starts the compilation process.  The first time
through, you will see quite a few warnings of the form

  warning: skipping missing include file: DEPEND: No such file or directory

These are normal and should not trouble you.

Mk produces (at least) the following files:

        bin/qc--                    qc-- byte code code binary 
        bin/qc--interp              qc-- interpreter
        man/man1/qc--.1             manual page
        man/man1/qc--internals.1    hacker's manual page

There are more binaries and manual pages that are used during
development but they are not important to use qc--.
        
If the OCaml native code compiler ocamlopt is supported in your platform
and is installed, you can also create a native code binary qc--.opt:

        mk all.opt

To execute the test suite you can also call the test target:

        mk test


Finally, you can install the software in /usr/local by typing
`mk install' or `mk install.opt'.



Problems and Bug Reports

If you have trouble building the compiler or using it, send email to
bugs@cminusminus.org. The bug tracksing system is at
http://www.cminusminus.org/qc--bugs.


Roadmap

The source code of the compiler is split into different directories. 
The top level mkfile knows the dependencies between them and makes
them in the right order.  Files shared by many directories go into the
lib/ directory which is initially empty.  Once all shared files are in
place development can be continued in the sub-directories and the
mkfiles provided there. Refer to the mkfiles for the high level
targets available in each directory. The doc/ directory includes an
overview document index.nw.

In alphabetical order:


    asdl/       OCaml sources for the runtime system of AsdlGen
                generated code.
    
    aug99/      Sources for an earlier implementation of c--. Not used
                and interesting only for historical reasons.
    
    bin/        Initially empty. Contains binary after compilation.
    
    camlburg/   A burg implementation for OCaml; comes with its own
                documentation.

    cllib/      Library of OCaml modules for pretty printing and
                and parsing.

    config/     Global rule set for compiling OCaml sources and other 
                global files.
    
    doc/        Various documents, manual pages, also an overview and design
                problems.
    
    examples/   Some c-- sources. Currently empty.
    
    figures/    PostScript figures used for documentation.

    gen/        Machine generated files. 
    
    interp/     Interpreter for C--. 

    lib/        Initially empty. Contains library modules during
                compilation.
    
    lua/        An interpreter for the embedded script language Lua.
    
    man/        Initially empty. Contains manual page after
                compilation. 

    mk/         C implementation of the make-like tool mk.

    rtl/        RTL type definition.

    specialized/ Partially evaluated compiler sources.

    src/        Main sources for the c-- compiler.

    tdpe/       Code for partial evaluation of the compiler, see README.
                Not yet updated for Ocaml 3.04 label mode. However, this
                code is currently by default not compiled and linked.
    
    test2/      Code for testing.

    tools/      Small tools: OCamlError, NoFake, Grades.

Directories depend on each other in the following order:

    cllib lua asdl rtl gen camlburg tools src test2


