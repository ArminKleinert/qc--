                         Quick C-- Test Suite
                         ~~~~~~~~~~~~~~~~~~~~

This directory contains the regression test suite for qc--. Tests are
configured using .tst files and run using the testdrv.lua driver for qc--.

Using the LUA test driver for qc--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To run the test file, name.tst, type:

  mk name.tst

This will build the test driver and execute it with the name.tst
configuration file. The mkfile assumes that ../bin/qc-- is the binary
you want to test with, make sure you have run a `mk update` in the src
directory before testing.

To run the driver manually:

  ../bin/qc-- testdrv.lua name.tst

The test driver will run through each source files listed in name.tst
and compare the compilers output to the expected output. For each
error detected a line will be printed that can then be executed to get
more information on the error. For example:

> mk example.tst
../bin/qc-- testdrv.lua example.tst
../bin/qc-- -v testdrv.lua example.tst src/add.c--.test      # FAILED { .s } differ
../bin/qc-- -v testdrv.lua example.tst src/bits-bug.c--.test # FAILED { .s } differ
../bin/qc-- -v testdrv.lua example.tst src/cut.c--.test      # FAILED { .s } differ
../bin/qc-- -v testdrv.lua example.tst src/hello.c--.test    # FAILED { .s1 } differ
4 errors detected.

Executing the given lines will give detailed information, and also
provide a command line that can be used to update the differing files.
In the case of hello.c-- this would be:

> ../bin/qc-- testdrv.lua example.tst src/hello.c--.record
x86/hello.s     has not changed
x86/hello.s1    has changed             !! updating !!
x86/hello.s2    has not changed
x86/hello.1     has not changed
x86/hello.2     has not changed

For more information on the format of the test configuration files,
see testdrv.nw.

Frequently asked questions
~~~~~~~~~~~~~~~~~~~~~~~~~~

When I create a new test case, how do I add it to the test suite?
  * How to specify correct assembly?
  * Can I pass arguments to a test program at run time?

What existing tests are there and what do they represent?
(How do I decide to which test I should add a new file?)

Is there a special place for tests that don't run but that are
intended to elicit error messages from the compiler? 

When I change the compiler, if I expect it to produce identical
assembly code, what should I run?

When I change the compiler, if I expect it to produce different
assembly code that is semantically equivalent, what should I run?  If
the tests compile and run OK, how do I tell the system that the new
assembly language is right?

What if a test requires more than one file?   For example, a .c-- file
and a .c file?

What should I do if I want to test an alternative compiler pass, such
as an optimization pass or replacement register allocator?
  * Do I need a new results directory?  If so, how should I pick its
    name?
  * How can I populate the results directory with the expected outcome
    of running the test programs?  Can these expectations be shared across
    results directories?


Things that are here
~~~~~~~~~~~~~~~~~~~~

The files and directories living here are:

   README      - this file
   src/        - source files for test cases
   x86/        - expected outputs for x86 backend
   dummy/      - expected outputs for dummy backend
   testdrv.nw  - lua test driver
   mkfile      - mkfile for lua test driver and .tst files
   *.tst       - test configuration files for testdrv.lua

   testqc.nw   - old testqc test framework
   mkfile.old  - mkfile for old testqc test system



Using the old testqc framework
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


The old testqc framework still lives here, and can be run using
mkfile.old. Some of the compiler outputs (.s1 and .s2) may not match
when using testqc. See mkfile.old and testqc.nw for more information.


