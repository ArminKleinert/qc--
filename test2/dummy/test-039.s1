target
    memsize 8
    byteorder big
    pointersize 32
    wordsize 32
    charset "latin1"
    float "ieee754";

export bits32 sp1, sp2, sp3;

section "data" { align 8; }

section "data" { sym@Cmm_private_global_area: }

section "data" { bits8[0::bits32]; }

section "text"
{
    sym@sp1()
    {
        ;
        $r(32)[0] = 64::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[0] = $m(32B)[$r(32)[0]];
        $r(32)[1] = 0::bits32;
        $c(32)[0] when %eq[32]($r(32)[0], $r(32)[1]) = sym@sp1@l14;
        $c(32)[0] = sym@sp1@l15;
        $c(32)[0] = sym@sp1@l14;
        sym@sp1@l15:
        $r(32)[1] = 32::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = -32::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = 0::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = 1::bits32;
        $r(32)[2] = ($r(32)[0]-$r(32)[2]);
        $m(32B)[$r(32)[1]] = $r(32)[2];
        $c(32)[0] = sym@sp1;
        ;
        $r(32)[1] = 64::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = 0::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = 32::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $f(32)[0] = $m(32B)[$r(32)[1]];
        $r(32)[1] = 64::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = 0::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = 0::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $f(32)[1] = $m(32B)[$r(32)[1]];
        $r(32)[1] = 64::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = 0::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = 32::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = $f(32)[0];
        $r(32)[2] = %mul_trunc[32]($r(32)[2], $r(32)[0]);
        $m(32B)[$r(32)[1]] = $r(32)[2];
        $r(32)[1] = 64::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = 0::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = 0::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = $f(32)[1];
        $r(32)[0] = ($r(32)[2]+$r(32)[0]);
        $m(32B)[$r(32)[1]] = $r(32)[0];
        $r(32)[0] = $m(32L)[$r(32)[31]];
        $c(32)[0] = $r(32)[0];
        sym@sp1@l14:
        $r(32)[0] = 64::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[1] = 32::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[1] = 1::bits32;
        $m(32B)[$r(32)[0]] = $r(32)[1];
        $r(32)[0] = 64::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[1] = 1::bits32;
        $m(32B)[$r(32)[0]] = $r(32)[1];
        $r(32)[0] = $m(32L)[$r(32)[31]];
        $c(32)[0] = $r(32)[0];
        ;
        ;
        ;
    }
}

section "text"
{
    sym@sp2()
    {
        ;
        $r(32)[0] = 32::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[0] = $m(32B)[$r(32)[0]];
        $r(32)[1] = 32::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = 64::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = 1::bits32;
        $m(32B)[$r(32)[1]] = $r(32)[2];
        $r(32)[1] = 32::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = 32::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = 1::bits32;
        $m(32B)[$r(32)[1]] = $r(32)[2];
        $r(32)[1] = 32::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = 0::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $m(32B)[$r(32)[1]] = $r(32)[0];
        $c(32)[0] = sym@sp2@x21;
        sym@sp2@x21:
        ;
    }
}

section "text"
{
    sym@sp2_help()
    {
        ;
        $r(32)[0] = 32::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 64::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $f(32)[0] = $m(32B)[$r(32)[0]];
        $r(32)[0] = 32::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 32::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $f(32)[1] = $m(32B)[$r(32)[0]];
        $r(32)[0] = 32::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[0] = $m(32B)[$r(32)[0]];
        $r(32)[1] = 1::bits32;
        $c(32)[0] when %eq[32]($r(32)[0], $r(32)[1]) = sym@sp2_help@l38;
        $c(32)[0] = sym@sp2_help@l39;
        $c(32)[0] = sym@sp2_help@l38;
        sym@sp2_help@l39:
        $r(32)[1] = 32::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = 64::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = $f(32)[0];
        $r(32)[2] = %mul_trunc[32]($r(32)[2], $r(32)[0]);
        $m(32B)[$r(32)[1]] = $r(32)[2];
        $r(32)[1] = 32::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = 32::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = $f(32)[1];
        $r(32)[2] = ($r(32)[2]+$r(32)[0]);
        $m(32B)[$r(32)[1]] = $r(32)[2];
        $r(32)[1] = 32::bits32;
        $r(32)[1] = ($r(32)[31]+$r(32)[1]);
        $r(32)[2] = 0::bits32;
        $r(32)[1] = ($r(32)[1]+$r(32)[2]);
        $r(32)[2] = 1::bits32;
        $r(32)[0] = ($r(32)[0]-$r(32)[2]);
        $m(32B)[$r(32)[1]] = $r(32)[0];
        $c(32)[0] = sym@sp2_help@l31;
        sym@sp2_help@l38:
        $r(32)[0] = 32::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[1] = 32::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $m(32B)[$r(32)[0]] = $f(32)[0];
        $r(32)[0] = 32::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $m(32B)[$r(32)[0]] = $f(32)[1];
        $r(32)[0] = $m(32L)[$r(32)[31]];
        $c(32)[0] = $r(32)[0];
        sym@sp2_help@l31:
        $c(32)[0] = sym@sp2_help@x30;
        ;
        ;
        sym@sp2_help@x30:
    }
}

section "text"
{
    sym@sp3()
    {
        ;
        $r(32)[0] = 32::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[0] = $m(32B)[$r(32)[0]];
        $r(32)[1] = 1::bits32;
        $f(32)[0] = $r(32)[1];
        $r(32)[1] = 1::bits32;
        $f(32)[1] = $r(32)[1];
        $c(32)[0] = sym@loop;
        sym@loop:
        $r(32)[1] = 1::bits32;
        $c(32)[0] when %eq[32]($r(32)[0], $r(32)[1]) = sym@sp3@l52;
        $c(32)[0] = sym@sp3@l53;
        $c(32)[0] = sym@sp3@l52;
        sym@sp3@l53:
        $r(32)[1] = $f(32)[0];
        $r(32)[1] = ($r(32)[1]+$r(32)[0]);
        $f(32)[0] = $r(32)[1];
        $r(32)[1] = $f(32)[1];
        $r(32)[1] = %mul_trunc[32]($r(32)[1], $r(32)[0]);
        $f(32)[1] = $r(32)[1];
        $r(32)[1] = 1::bits32;
        $r(32)[0] = ($r(32)[0]-$r(32)[1]);
        $c(32)[0] = sym@loop;
        sym@sp3@l52:
        $r(32)[0] = 32::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[1] = 32::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $m(32B)[$r(32)[0]] = $f(32)[1];
        $r(32)[0] = 32::bits32;
        $r(32)[0] = ($r(32)[31]+$r(32)[0]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $r(32)[1] = 0::bits32;
        $r(32)[0] = ($r(32)[0]+$r(32)[1]);
        $m(32B)[$r(32)[0]] = $f(32)[0];
        $r(32)[0] = $m(32L)[$r(32)[31]];
        $c(32)[0] = $r(32)[0];
        ;
        ;
    }
}

section "text" {  }

