target byteorder little memsize 8 wordsize 32 pointersize 32;
import bits32 "tig_not" as not;
import bits32 "tig_chr" as chr;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_flush" as flush;
import bits32 "tig_ord" as ord;
import bits32 "tig_exit" as exit;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_size" as size;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_gc" as gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
export tiger_main;
section "data" {
align 32;
gc_data: bits32 { 0 };
  bits32 { 5 };
  Lgbl_67: bits32 { 0 }; bits8[] "\000";
  bits32 { 20 };
  Lgbl_95: bits32 { 15 }; bits8[] "too many items\n\000";
  bits32 { 6 };
  Lgbl_76: bits32 { 1 }; bits8[] "\n\000";
  bits32 { 6 };
  Lgbl_87: bits32 { 1 }; bits8[] " \000";
}

section "text" {
span 1 mod_46_gc_data {
 mod_46(bits32 pfp,bits32 n,bits32 m) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = n;
  bits32[fp+8] = m;
  bits32 temp_49;
  temp_49 = %sub(bits32[%add(fp, 4)], %mul(bits32[%add(fp, 8)], %quot(bits32[%add(fp, 4)], bits32[%add(fp, 8)])));
  return(temp_49);
 continuation killer():
 return(0);
}}}
section "data" {
 mod_46_gc_data:
   bits32[] { 3, 1,0,0 };
   bits32[] { 4, 1,0,0,0 };
}

section "text" {
span 1 cmfirst_47_gc_data {
 cmfirst_47(bits32 pfp,bits32 sz,bits32 cls) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = sz;
  bits32[fp+8] = cls;
  bits32 temp_50;
  bits32 temp_112;
  bits32[%add(bits32[fp], 4)] = bits32[%add(fp, 4)];
  bits32[%add(bits32[fp], 20)] = bits32[%add(fp, 8)];
  bits32[%add(bits32[fp], 16)] = %quot(bits32[%add(bits32[fp], 4)], bits32[%add(bits32[fp], 20)]);
  temp_112 =  mod_46(bits32[fp],bits32[%add(bits32[fp], 4)],bits32[%add(bits32[fp], 20)]);
  bits32[%add(bits32[fp], 24)] = temp_112;
  bits32[%add(bits32[fp], 8)] = 0;
  bits32[%add(bits32[fp], 12)] = 0;
  temp_50 = 0;
  return(temp_50);
 continuation killer():
 return(0);
}}}
section "data" {
 cmfirst_47_gc_data:
   bits32[] { 3, 1,0,0 };
   bits32[] { 5, 1,0,0,0,0 };
}

section "text" {
span 1 cmnext_48_gc_data {
 cmnext_48(bits32 pfp) { /* level 2, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32 temp_66;
  bits32 temp_62;
  bits32 temp_58;
  bits32 temp_54;
  bits32 temp_113;
  bits32[%add(bits32[fp], 12)] = %add(bits32[%add(bits32[fp], 12)], 1);
  if (%sx32(%bit(%ge(bits32[%add(bits32[fp], 12)], bits32[%add(bits32[fp], 20)]))) !=0) { goto LifTrue_51; } else { goto LifFalse_52; }
  LifTrue_51: /* line 1  col 0 */
  bits32[%add(bits32[fp], 12)] = 0;
  bits32[%add(bits32[fp], 8)] = %add(bits32[%add(bits32[fp], 8)], 1);
  goto LifEnd_53;
  LifFalse_52: /* line 1  col 0 */
  LifEnd_53: /* line 1  col 0 */
  temp_113 = %add(bits32[%add(bits32[fp], 8)], %mul(bits32[%add(bits32[fp], 12)], bits32[%add(bits32[fp], 16)]));
  if (%sx32(%bit(%gt(bits32[%add(bits32[fp], 12)], bits32[%add(bits32[fp], 24)]))) !=0) { goto LifTrue_55; } else { goto LifFalse_56; }
  LifTrue_55: /* line 1  col 0 */
  temp_54 = bits32[%add(bits32[fp], 24)];
  goto LifEnd_57;
  LifFalse_56: /* line 1  col 0 */
  temp_54 = bits32[%add(bits32[fp], 12)];
  LifEnd_57: /* line 1  col 0 */
  bits32[%add(fp, 4)] = %add(temp_113, temp_54);
  if (%sx32(%bit(%ge(bits32[%add(bits32[fp], 8)], bits32[%add(bits32[fp], 16)]))) !=0) { goto LifTrue_59; } else { goto LifFalse_60; }
  LifTrue_59: /* line 1  col 0 */
  temp_58 = %sx32(%bit(%ge(bits32[%add(bits32[fp], 12)], bits32[%add(bits32[fp], 24)])));
  goto LifEnd_61;
  LifFalse_60: /* line 1  col 0 */
  temp_58 = 0;
  LifEnd_61: /* line 1  col 0 */
  if (temp_58 !=0) { goto LifTrue_63; } else { goto LifFalse_64; }
  LifTrue_63: /* line 1  col 0 */
  temp_62 = %sub(0, 1);
  goto LifEnd_65;
  LifFalse_64: /* line 1  col 0 */
  temp_62 = bits32[%add(fp, 4)];
  LifEnd_65: /* line 1  col 0 */
  temp_66 = temp_62;
  return(temp_66);
 continuation killer():
 return(0);
}}}
section "data" {
 cmnext_48_gc_data:
   bits32[] { 2, 1,0 };
   bits32[] { 6, 1,0,0,0,0,0 };
}

section "text" {
span 1 getline_74_gc_data {
 getline_74(bits32 pfp) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32 temp_84;
  bits32 temp_116;
  bits32 temp_115;
  bits32 temp_78;
  bits32 temp_117;
  bits32 temp_118;
  bits32 temp_114;
  temp_114 = foreign"C" getchar() also cuts to killer;
  bits32[%add(fp, 4)] = temp_114;
  bits32[%add(fp, 8)] = Lgbl_67;
  Lloop_start_82: /* line 1  col 0 */
  temp_118 = foreign"C" compare_str(bits32[%add(fp, 4)],Lgbl_67) also cuts to killer;
  if (%sx32(%bit(%ne(temp_118, 0))) !=0) { goto LifTrue_79; } else { goto LifFalse_80; }
  LifTrue_79: /* line 1  col 0 */
  temp_117 = foreign"C" compare_str(bits32[%add(fp, 4)],Lgbl_76) also cuts to killer;
  temp_78 = %sx32(%bit(%ne(temp_117, 0)));
  goto LifEnd_81;
  LifFalse_80: /* line 1  col 0 */
  temp_78 = 0;
  LifEnd_81: /* line 1  col 0 */
  if (temp_78 !=0) { goto Lloop_body_83; } else { goto Lloop_end_75; }
  Lloop_body_83: /* line 1  col 0 */
  temp_115 = foreign"C" concat(bits32[%add(fp, 8)],bits32[%add(fp, 4)]) also cuts to killer;
  bits32[%add(fp, 8)] = temp_115;
  temp_116 = foreign"C" getchar() also cuts to killer;
  bits32[%add(fp, 4)] = temp_116;
  goto Lloop_start_82;
  Lloop_end_75: /* line 1  col 0 */
  temp_84 = bits32[%add(fp, 8)];
  return(temp_84);
 continuation killer():
 return(0);
}}}
section "data" {
 getline_74_gc_data:
   bits32[] { 3, 1,1,1 };
   bits32[] { 8, 1,1,1,1,0,0,0,1 };
}

section "text" {
span 1 print_width_85_gc_data {
 print_width_85(bits32 pfp,bits32 n,bits32 s) { /* level 2, stack 4 */
  stackdata { align 32; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = n;
  bits32[fp+8] = s;
  bits32 temp_90;
  bits32 temp_119;
  foreign"C" print(bits32[%add(fp, 8)]) also cuts to killer;
  temp_119 = foreign"C" size(bits32[%add(fp, 8)]) also cuts to killer;
  bits32[%add(fp, 12)] = temp_119;
  Lloop_start_88: /* line 1  col 0 */
  if (%sx32(%bit(%le(bits32[%add(fp, 12)], bits32[%add(fp, 4)]))) !=0) { goto Lloop_body_89; } else { goto Lloop_end_86; }
  Lloop_body_89: /* line 1  col 0 */
  foreign"C" print(Lgbl_87) also cuts to killer;
  bits32[%add(fp, 12)] = %add(bits32[%add(fp, 12)], 1);
  goto Lloop_start_88;
  Lloop_end_86: /* line 1  col 0 */
  temp_90 = 0;
  return(temp_90);
 continuation killer():
 return(0);
}}}
section "data" {
 print_width_85_gc_data:
   bits32[] { 4, 1,0,1,0 };
   bits32[] { 5, 1,0,1,0,0 };
}

section "text" {
span 1 tiger_main_gc_data {
foreign "C"  tiger_main(bits32 pfp) { /* level 1, stack 18 */
  stackdata { align 32; fp : bits32[18]; }
  bits32[fp+0] = pfp;
  bits32 temp_111;
  bits32 temp_126;
  bits32 temp_125;
  bits32 temp_124;
  bits32 temp_122;
  bits32 temp_121;
  bits32 temp_123;
  bits32 temp_120;
  bits32 temp_69;
  bits32 temp_68;
  bits32[%add(fp, 4)] = 0;
  bits32[%add(fp, 8)] = 0;
  bits32[%add(fp, 12)] = 0;
  bits32[%add(fp, 16)] = 0;
  bits32[%add(fp, 20)] = 0;
  bits32[%add(fp, 24)] = 0;
  bits32[%add(fp, 28)] = 1024;
  temp_68 = foreign"C" alloc(%mul(%add(1, bits32[%add(fp, 28)]), 4)) also cuts to killer;
  temp_69 = %add(1, bits32[%add(fp, 28)]);
  Lloop_start_72: /* line 1  col 0 */
  if (temp_69 !=0) { goto Lloop_body_73; } else { goto Lloop_end_71; }
  Lloop_body_73: /* line 1  col 0 */
  bits32[%add(temp_68, %mul(%sub(temp_69, 1), 4))] = Lgbl_67;
  temp_69 = %sub(temp_69, 1);
  goto Lloop_start_72;
  Lloop_end_71: /* line 1  col 0 */
  bits32[temp_68] = bits32[%add(fp, 28)];
  bits32[%add(fp, 32)] = temp_68;
  bits32[%add(fp, 36)] = 0;
  bits32[%add(fp, 40)] = 80;
  bits32[%add(fp, 44)] = Lgbl_67;
  bits32[%add(fp, 48)] = 0;
  temp_120 =  getline_74(fp);
  bits32[%add(fp, 44)] = temp_120;
  Lloop_start_100: /* line 1  col 0 */
  temp_123 = foreign"C" size(bits32[%add(fp, 44)]) also cuts to killer;
  if (%sx32(%bit(%gt(temp_123, 0))) !=0) { goto Lloop_body_101; } else { goto Lloop_end_91; }
  Lloop_body_101: /* line 1  col 0 */
  temp_121 = foreign"C" size(bits32[%add(fp, 44)]) also cuts to killer;
  bits32[%add(fp, 52)] = temp_121;
  if (%sx32(%bit(%lt(bits32[%add(fp, 48)], bits32[%add(fp, 52)]))) !=0) { goto LifTrue_92; } else { goto LifFalse_93; }
  LifTrue_92: /* line 1  col 0 */
  bits32[%add(fp, 48)] = bits32[%add(fp, 52)];
  goto LifEnd_94;
  LifFalse_93: /* line 1  col 0 */
  LifEnd_94: /* line 1  col 0 */
  if (%sx32(%bit(%ge(bits32[%add(fp, 36)], bits32[%add(fp, 28)]))) !=0) { goto LifTrue_96; } else { goto LifFalse_97; }
  LifTrue_96: /* line 1  col 0 */
  foreign"C" print(Lgbl_95) also cuts to killer;
  foreign"C" exit(1) also cuts to killer;
  goto LifEnd_98;
  LifFalse_97: /* line 1  col 0 */
  LifEnd_98: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(fp, 32)],bits32[%add(fp, 36)],83) also cuts to killer;
  bits32[%add(bits32[%add(fp, 32)], %mul(%add(1, bits32[%add(fp, 36)]), 4))] = bits32[%add(fp, 44)];
  bits32[%add(fp, 36)] = %add(bits32[%add(fp, 36)], 1);
  temp_122 =  getline_74(fp);
  bits32[%add(fp, 44)] = temp_122;
  goto Lloop_start_100;
  Lloop_end_91: /* line 1  col 0 */
  bits32[%add(fp, 56)] = %quot(bits32[%add(fp, 40)], %add(bits32[%add(fp, 48)], 2));
  bits32[%add(fp, 60)] = bits32[%add(fp, 56)];
  bits32[%add(fp, 64)] = %add(bits32[%add(fp, 48)], 2);
  temp_124 =  cmfirst_47(fp,bits32[%add(fp, 36)],bits32[%add(fp, 60)]);
  bits32[%add(fp, 68)] = temp_124;
  Lloop_start_106: /* line 1  col 0 */
  if (%sx32(%bit(%ge(bits32[%add(fp, 68)], 0))) !=0) { goto Lloop_body_107; } else { goto Lloop_end_102; }
  Lloop_body_107: /* line 1  col 0 */
  temp_125 = bits32[%add(fp, 64)];
  foreign"C" bounds_check(bits32[%add(fp, 32)],bits32[%add(fp, 68)],93) also cuts to killer;
   print_width_85(fp,temp_125,bits32[%add(bits32[%add(fp, 32)], %mul(%add(1, bits32[%add(fp, 68)]), 4))]);
  bits32[%add(fp, 56)] = %sub(bits32[%add(fp, 56)], 1);
  if (%sx32(%bit(%eq(bits32[%add(fp, 56)], 0))) !=0) { goto LifTrue_103; } else { goto LifFalse_104; }
  LifTrue_103: /* line 1  col 0 */
  foreign"C" print(Lgbl_76) also cuts to killer;
  bits32[%add(fp, 56)] = bits32[%add(fp, 60)];
  goto LifEnd_105;
  LifFalse_104: /* line 1  col 0 */
  LifEnd_105: /* line 1  col 0 */
  temp_126 =  cmnext_48(fp);
  bits32[%add(fp, 68)] = temp_126;
  goto Lloop_start_106;
  Lloop_end_102: /* line 1  col 0 */
  if (%sx32(%bit(%ne(bits32[%add(fp, 56)], bits32[%add(fp, 60)]))) !=0) { goto LifTrue_108; } else { goto LifFalse_109; }
  LifTrue_108: /* line 1  col 0 */
  foreign"C" print(Lgbl_76) also cuts to killer;
  goto LifEnd_110;
  LifFalse_109: /* line 1  col 0 */
  LifEnd_110: /* line 1  col 0 */
  temp_111 = 0;
  return(temp_111);
 continuation killer():
 return(0);
}}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 18, 1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0 };
   bits32[] { 11, 1,0,0,0,0,1,0,0,1,0,1 };
}

