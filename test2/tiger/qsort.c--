target byteorder little memsize 8 wordsize 32 pointersize 32;
import bits32 "tig_not" as not;
import bits32 "tig_chr" as chr;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_flush" as flush;
import bits32 "tig_ord" as ord;
import bits32 "tig_exit" as exit;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_size" as size;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_gc" as gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
export tiger_main;
section "data" {
align 32;
gc_data: bits32 { 0 };
  bits32 { 5 };
  Lgbl_41: bits32 { 0 }; bits8[] "\000";
  bits32 { 19 };
  Lgbl_114: bits32 { 14 }; bits8[] "sorted by name\000";
  bits32 { 11 };
  Lgbl_61: bits32 { 6 }; bits8[] "Norman\000";
  bits32 { 9 };
  Lgbl_59: bits32 { 4 }; bits8[] "Omri\000";
  bits32 { 9 };
  Lgbl_62: bits32 { 4 }; bits8[] "Mike\000";
  bits32 { 18 };
  Lgbl_115: bits32 { 13 }; bits8[] "sorted by num\000";
  bits32 { 8 };
  Lgbl_64: bits32 { 3 }; bits8[] " :\n\000";
  bits32 { 10 };
  Lgbl_58: bits32 { 5 }; bits8[] "David\000";
  bits32 { 9 };
  Lgbl_53: bits32 { 4 }; bits8[] "Paul\000";
  bits32 { 6 };
  Lgbl_66: bits32 { 1 }; bits8[] "\t\000";
  bits32 { 6 };
  Lgbl_67: bits32 { 1 }; bits8[] "\n\000";
  bits32 { 9 };
  Lgbl_55: bits32 { 4 }; bits8[] "Joao\000";
  bits32 { 11 };
  Lgbl_54: bits32 { 6 }; bits8[] "Stuart\000";
  bits32 { 10 };
  Lgbl_56: bits32 { 5 }; bits8[] "Kevin\000";
  bits32 { 14 };
  Lgbl_60: bits32 { 9 }; bits8[] "Kathleeen\000";
  bits32 { 8 };
  Lgbl_57: bits32 { 3 }; bits8[] "Kim\000";
}

section "text" {
span 1 initlist_49_gc_data {
 initlist_49(bits32 pfp) { /* level 2, stack 1 */
  stackdata { align 32; fp : bits32[1]; }
  bits32[fp+0] = pfp;
  bits32 temp_63;
  bits32 temp_118;
  bits32 temp_117;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],0,15) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 0), 4))], 0)] = 10;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],1,16) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 1), 4))], 0)] = 32;
  temp_117 = %sub(0, 1);
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],2,17) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 2), 4))], 0)] = temp_117;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],3,18) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 3), 4))], 0)] = 567;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],4,19) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 4), 4))], 0)] = 3;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],5,20) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 5), 4))], 0)] = 18;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],6,21) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 6), 4))], 0)] = 1;
  temp_118 = %sub(0, 51);
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],7,22) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 7), 4))], 0)] = temp_118;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],8,23) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 8), 4))], 0)] = 789;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],9,24) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 9), 4))], 0)] = 49;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],0,25) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 0), 4))], 4)] = Lgbl_53;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],1,26) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 1), 4))], 4)] = Lgbl_54;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],2,27) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 2), 4))], 4)] = Lgbl_55;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],3,28) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 3), 4))], 4)] = Lgbl_56;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],4,29) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 4), 4))], 4)] = Lgbl_57;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],5,30) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 5), 4))], 4)] = Lgbl_58;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],6,31) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 6), 4))], 4)] = Lgbl_59;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],7,32) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 7), 4))], 4)] = Lgbl_60;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],8,33) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 8), 4))], 4)] = Lgbl_61;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],9,34) also cuts to killer;
  bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, 9), 4))], 4)] = Lgbl_62;
  temp_63 = 0;
  return(temp_63);
 continuation killer():
 return(0);
}}}
section "data" {
 initlist_49_gc_data:
   bits32[] { 1, 1 };
   bits32[] { 4, 1,0,0,0 };
}

section "text" {
span 1 print_list_50_gc_data {
 print_list_50(bits32 pfp,bits32 s) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = s;
  bits32 temp_70;
  foreign"C" print(bits32[%add(fp, 4)]) also cuts to killer;
  foreign"C" print(Lgbl_64) also cuts to killer;
  bits32[%add(fp, 8)] = 0;
  Lloop_start_68: /* line 1  col 0 */
  if (%sx32(%bit(%le(bits32[%add(fp, 8)], %sub(bits32[%add(bits32[fp], 4)], 1)))) !=0) { goto Lloop_body_69; } else { goto Lloop_end_65; }
  Lloop_body_69: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],bits32[%add(fp, 8)],40) also cuts to killer;
  foreign"C" printi(bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, bits32[%add(fp, 8)]), 4))], 0)]) also cuts to killer;
  foreign"C" print(Lgbl_66) also cuts to killer;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],bits32[%add(fp, 8)],42) also cuts to killer;
  foreign"C" print(bits32[%add(bits32[%add(bits32[%add(bits32[fp], 8)], %mul(%add(1, bits32[%add(fp, 8)]), 4))], 4)]) also cuts to killer;
  foreign"C" print(Lgbl_67) also cuts to killer;
  bits32[%add(fp, 8)] = %add(bits32[%add(fp, 8)], 1);
  goto Lloop_start_68;
  Lloop_end_65: /* line 1  col 0 */
  temp_70 = 0;
  return(temp_70);
 continuation killer():
 return(0);
}}}
section "data" {
 print_list_50_gc_data:
   bits32[] { 3, 1,1,0 };
   bits32[] { 3, 1,1,0 };
}

section "text" {
span 1 lte_71_gc_data {
 lte_71(bits32 pfp,bits32 i,bits32 j) { /* level 3, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = i;
  bits32[fp+8] = j;
  bits32 temp_80;
  bits32 temp_119;
  bits32 temp_76;
  bits32 temp_120;
  bits32 temp_121;
  if (%sx32(%bit(%ne(bits32[%add(bits32[fp], 4)], 0))) !=0) { goto LifTrue_77; } else { goto LifFalse_78; }
  LifTrue_77: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 8)],bits32[%add(fp, 4)],49) also cuts to killer;
  temp_121 = bits32[%add(bits32[%add(bits32[%add(bits32[bits32[fp]], 8)], %mul(%add(1, bits32[%add(fp, 4)]), 4))], 4)];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 8)],bits32[%add(fp, 8)],49) also cuts to killer;
  temp_120 = foreign"C" compare_str(temp_121,bits32[%add(bits32[%add(bits32[%add(bits32[bits32[fp]], 8)], %mul(%add(1, bits32[%add(fp, 8)]), 4))], 4)]) also cuts to killer;
  temp_76 = %sx32(%bit(%le(temp_120, 0)));
  goto LifEnd_79;
  LifFalse_78: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 8)],bits32[%add(fp, 4)],50) also cuts to killer;
  temp_119 = bits32[%add(bits32[%add(bits32[%add(bits32[bits32[fp]], 8)], %mul(%add(1, bits32[%add(fp, 4)]), 4))], 0)];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 8)],bits32[%add(fp, 8)],50) also cuts to killer;
  temp_76 = %sx32(%bit(%le(temp_119, bits32[%add(bits32[%add(bits32[%add(bits32[bits32[fp]], 8)], %mul(%add(1, bits32[%add(fp, 8)]), 4))], 0)])));
  LifEnd_79: /* line 1  col 0 */
  temp_80 = temp_76;
  return(temp_80);
 continuation killer():
 return(0);
}}}
section "data" {
 lte_71_gc_data:
   bits32[] { 3, 1,0,0 };
   bits32[] { 8, 1,0,0,0,0,0,0,1 };
}

section "text" {
span 1 gt_72_gc_data {
 gt_72(bits32 pfp,bits32 i,bits32 j) { /* level 3, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = i;
  bits32[fp+8] = j;
  bits32 temp_85;
  bits32 temp_122;
  bits32 temp_81;
  bits32 temp_123;
  bits32 temp_124;
  if (%sx32(%bit(%ne(bits32[%add(bits32[fp], 4)], 0))) !=0) { goto LifTrue_82; } else { goto LifFalse_83; }
  LifTrue_82: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 8)],bits32[%add(fp, 4)],53) also cuts to killer;
  temp_124 = bits32[%add(bits32[%add(bits32[%add(bits32[bits32[fp]], 8)], %mul(%add(1, bits32[%add(fp, 4)]), 4))], 4)];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 8)],bits32[%add(fp, 8)],53) also cuts to killer;
  temp_123 = foreign"C" compare_str(temp_124,bits32[%add(bits32[%add(bits32[%add(bits32[bits32[fp]], 8)], %mul(%add(1, bits32[%add(fp, 8)]), 4))], 4)]) also cuts to killer;
  temp_81 = %sx32(%bit(%gt(temp_123, 0)));
  goto LifEnd_84;
  LifFalse_83: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 8)],bits32[%add(fp, 4)],54) also cuts to killer;
  temp_122 = bits32[%add(bits32[%add(bits32[%add(bits32[bits32[fp]], 8)], %mul(%add(1, bits32[%add(fp, 4)]), 4))], 0)];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 8)],bits32[%add(fp, 8)],54) also cuts to killer;
  temp_81 = %sx32(%bit(%gt(temp_122, bits32[%add(bits32[%add(bits32[%add(bits32[bits32[fp]], 8)], %mul(%add(1, bits32[%add(fp, 8)]), 4))], 0)])));
  LifEnd_84: /* line 1  col 0 */
  temp_85 = temp_81;
  return(temp_85);
 continuation killer():
 return(0);
}}}
section "data" {
 gt_72_gc_data:
   bits32[] { 3, 1,0,0 };
   bits32[] { 8, 1,0,0,0,0,0,0,1 };
}

section "text" {
span 1 exchange_86_gc_data {
 exchange_86(bits32 pfp,bits32 x,bits32 y) { /* level 4, stack 4 */
  stackdata { align 32; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = x;
  bits32[fp+8] = y;
  bits32 temp_87;
  foreign"C" bounds_check(bits32[%add(bits32[bits32[bits32[fp]]], 8)],bits32[%add(fp, 4)],60) also cuts to killer;
  bits32[%add(fp, 12)] = bits32[%add(bits32[%add(bits32[bits32[bits32[fp]]], 8)], %mul(%add(1, bits32[%add(fp, 4)]), 4))];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[bits32[fp]]], 8)],bits32[%add(fp, 8)],61) also cuts to killer;
  foreign"C" bounds_check(bits32[%add(bits32[bits32[bits32[fp]]], 8)],bits32[%add(fp, 4)],61) also cuts to killer;
  bits32[%add(bits32[%add(bits32[bits32[bits32[fp]]], 8)], %mul(%add(1, bits32[%add(fp, 4)]), 4))] = bits32[%add(bits32[%add(bits32[bits32[bits32[fp]]], 8)], %mul(%add(1, bits32[%add(fp, 8)]), 4))];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[bits32[fp]]], 8)],bits32[%add(fp, 8)],61) also cuts to killer;
  bits32[%add(bits32[%add(bits32[bits32[bits32[fp]]], 8)], %mul(%add(1, bits32[%add(fp, 8)]), 4))] = bits32[%add(fp, 12)];
  temp_87 = 0;
  return(temp_87);
 continuation killer():
 return(0);
}}}
section "data" {
 exchange_86_gc_data:
   bits32[] { 4, 1,0,0,1 };
   bits32[] { 4, 1,0,0,0 };
}

section "text" {
span 1 partition_73_gc_data {
 partition_73(bits32 pfp,bits32 i,bits32 j) { /* level 3, stack 4 */
  stackdata { align 32; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = i;
  bits32[fp+8] = j;
  bits32 temp_108;
  bits32 temp_97;
  bits32 temp_126;
  bits32 temp_90;
  bits32 temp_125;
  bits32[%add(fp, 12)] = bits32[%add(fp, 4)];
  Lloop_start_106: /* line 1  col 0 */
  if (%sx32(%bit(%lt(bits32[%add(fp, 4)], bits32[%add(fp, 8)]))) !=0) { goto Lloop_body_107; } else { goto Lloop_end_88; }
  Lloop_body_107: /* line 1  col 0 */
  Lloop_start_94: /* line 1  col 0 */
  temp_125 =  lte_71(bits32[fp],bits32[%add(fp, 4)],bits32[%add(fp, 12)]);
  if (temp_125 !=0) { goto LifTrue_91; } else { goto LifFalse_92; }
  LifTrue_91: /* line 1  col 0 */
  temp_90 = %sx32(%bit(%lt(bits32[%add(fp, 4)], bits32[%add(fp, 8)])));
  goto LifEnd_93;
  LifFalse_92: /* line 1  col 0 */
  temp_90 = 0;
  LifEnd_93: /* line 1  col 0 */
  if (temp_90 !=0) { goto Lloop_body_95; } else { goto Lloop_end_89; }
  Lloop_body_95: /* line 1  col 0 */
  bits32[%add(fp, 4)] = %add(bits32[%add(fp, 4)], 1);
  goto Lloop_start_94;
  Lloop_end_89: /* line 1  col 0 */
  Lloop_start_101: /* line 1  col 0 */
  temp_126 =  gt_72(bits32[fp],bits32[%add(fp, 8)],bits32[%add(fp, 12)]);
  if (temp_126 !=0) { goto LifTrue_98; } else { goto LifFalse_99; }
  LifTrue_98: /* line 1  col 0 */
  temp_97 = %sx32(%bit(%ge(bits32[%add(fp, 8)], bits32[%add(fp, 4)])));
  goto LifEnd_100;
  LifFalse_99: /* line 1  col 0 */
  temp_97 = 0;
  LifEnd_100: /* line 1  col 0 */
  if (temp_97 !=0) { goto Lloop_body_102; } else { goto Lloop_end_96; }
  Lloop_body_102: /* line 1  col 0 */
  bits32[%add(fp, 8)] = %sub(bits32[%add(fp, 8)], 1);
  goto Lloop_start_101;
  Lloop_end_96: /* line 1  col 0 */
  if (%sx32(%bit(%lt(bits32[%add(fp, 4)], bits32[%add(fp, 8)]))) !=0) { goto LifTrue_103; } else { goto LifFalse_104; }
  LifTrue_103: /* line 1  col 0 */
   exchange_86(fp,bits32[%add(fp, 4)],bits32[%add(fp, 8)]);
  goto LifEnd_105;
  LifFalse_104: /* line 1  col 0 */
  LifEnd_105: /* line 1  col 0 */
  goto Lloop_start_106;
  Lloop_end_88: /* line 1  col 0 */
   exchange_86(fp,bits32[%add(fp, 12)],bits32[%add(fp, 8)]);
  temp_108 = bits32[%add(fp, 8)];
  return(temp_108);
 continuation killer():
 return(0);
}}}
section "data" {
 partition_73_gc_data:
   bits32[] { 4, 1,0,0,0 };
   bits32[] { 8, 1,0,0,0,0,0,0,0 };
}

section "text" {
span 1 qsort_74_gc_data {
 qsort_74(bits32 pfp,bits32 lb,bits32 ub) { /* level 3, stack 4 */
  stackdata { align 32; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = lb;
  bits32[fp+8] = ub;
  bits32 temp_112;
  bits32 temp_127;
  if (%sx32(%bit(%lt(bits32[%add(fp, 4)], bits32[%add(fp, 8)]))) !=0) { goto LifTrue_109; } else { goto LifFalse_110; }
  LifTrue_109: /* line 1  col 0 */
  temp_127 =  partition_73(bits32[fp],bits32[%add(fp, 4)],bits32[%add(fp, 8)]);
  bits32[%add(fp, 12)] = temp_127;
   qsort_74(bits32[fp],bits32[%add(fp, 4)],%sub(bits32[%add(fp, 12)], 1));
   qsort_74(bits32[fp],%add(bits32[%add(fp, 12)], 1),bits32[%add(fp, 8)]);
  goto LifEnd_111;
  LifFalse_110: /* line 1  col 0 */
  LifEnd_111: /* line 1  col 0 */
  temp_112 = 0;
  return(temp_112);
 continuation killer():
 return(0);
}}}
section "data" {
 qsort_74_gc_data:
   bits32[] { 4, 1,0,0,0 };
   bits32[] { 5, 1,0,0,0,0 };
}

section "text" {
span 1 sort_51_gc_data {
 sort_51(bits32 pfp,bits32 by_name) { /* level 2, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = by_name;
  bits32 temp_113;
  temp_113 =  qsort_74(fp,0,%sub(bits32[%add(bits32[fp], 4)], 1));
  return(temp_113);
 continuation killer():
 return(0);
}}}
section "data" {
 sort_51_gc_data:
   bits32[] { 2, 1,0 };
   bits32[] { 3, 1,0,0 };
}

section "text" {
span 1 tiger_main_gc_data {
foreign "C"  tiger_main(bits32 pfp) { /* level 1, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32 temp_116;
  bits32 temp_42;
  bits32 temp_45;
  bits32 temp_44;
  bits32[%add(fp, 4)] = 10;
  temp_44 = foreign"C" alloc(%mul(%add(1, bits32[%add(fp, 4)]), 4)) also cuts to killer;
  temp_45 = %add(1, bits32[%add(fp, 4)]);
  Lloop_start_47: /* line 1  col 0 */
  if (temp_45 !=0) { goto Lloop_body_48; } else { goto Lloop_end_46; }
  Lloop_body_48: /* line 1  col 0 */
  temp_42 = foreign"C" alloc(8) also cuts to killer;
  bits32[%add(temp_42, 0)] = 0;
  bits32[%add(temp_42, 4)] = Lgbl_41;
  bits32[%add(temp_44, %mul(%sub(temp_45, 1), 4))] = temp_42;
  temp_45 = %sub(temp_45, 1);
  goto Lloop_start_47;
  Lloop_end_46: /* line 1  col 0 */
  bits32[temp_44] = bits32[%add(fp, 4)];
  bits32[%add(fp, 8)] = temp_44;
   initlist_49(fp);
   sort_51(fp,1);
   print_list_50(fp,Lgbl_114);
   sort_51(fp,0);
  temp_116 =  print_list_50(fp,Lgbl_115);
  return(temp_116);
 continuation killer():
 return(0);
}}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 3, 1,0,1 };
   bits32[] { 5, 1,0,1,0,1 };
}

