target byteorder little memsize 8 wordsize 32 pointersize 32;
import bits32 "tig_not" as not;
import bits32 "tig_chr" as chr;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_flush" as flush;
import bits32 "tig_ord" as ord;
import bits32 "tig_exit" as exit;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_size" as size;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_gc" as gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
export tiger_main;
section "data" {
align 32;
gc_data: bits32 { 0 };
  bits32 { 5 };
  Lgbl_86: bits32 { 0 }; bits8[] "\000";
}

section "text" {
span 1 add_mod_256_45_gc_data {
 add_mod_256_45(bits32 pfp,bits32 x,bits32 y) { /* level 2, stack 4 */
  stackdata { align 32; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = x;
  bits32[fp+8] = y;
  bits32 temp_53;
  bits32 temp_49;
  bits32[%add(fp, 12)] = %add(bits32[%add(fp, 4)], bits32[%add(fp, 8)]);
  if (%sx32(%bit(%ge(bits32[%add(fp, 12)], 256))) !=0) { goto LifTrue_50; } else { goto LifFalse_51; }
  LifTrue_50: /* line 1  col 0 */
  temp_49 = %sub(bits32[%add(fp, 12)], 256);
  goto LifEnd_52;
  LifFalse_51: /* line 1  col 0 */
  temp_49 = bits32[%add(fp, 12)];
  LifEnd_52: /* line 1  col 0 */
  temp_53 = temp_49;
  return(temp_53);
 continuation killer():
 return(0);
}}}
section "data" {
 add_mod_256_45_gc_data:
   bits32[] { 4, 1,0,0,0 };
   bits32[] { 5, 1,0,0,0,0 };
}

section "text" {
span 1 compute_bit_54_gc_data {
 compute_bit_54(bits32 pfp,bits32 bit_value) { /* level 3, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = bit_value;
  bits32 temp_79;
  bits32 temp_67;
  bits32 temp_63;
  bits32 temp_71;
  bits32 temp_59;
  bits32 temp_75;
  bits32 temp_55;
  if (%sx32(%bit(%ge(bits32[%add(bits32[fp], 4)], bits32[%add(fp, 4)]))) !=0) { goto LifTrue_56; } else { goto LifFalse_57; }
  LifTrue_56: /* line 1  col 0 */
  temp_55 = %sx32(%bit(%ge(bits32[%add(bits32[fp], 8)], bits32[%add(fp, 4)])));
  goto LifEnd_58;
  LifFalse_57: /* line 1  col 0 */
  temp_55 = 0;
  LifEnd_58: /* line 1  col 0 */
  if (temp_55 !=0) { goto LifTrue_76; } else { goto LifFalse_77; }
  LifTrue_76: /* line 1  col 0 */
  bits32[%add(bits32[fp], 4)] = %sub(bits32[%add(bits32[fp], 4)], bits32[%add(fp, 4)]);
  bits32[%add(bits32[fp], 8)] = %sub(bits32[%add(bits32[fp], 8)], bits32[%add(fp, 4)]);
  temp_75 = 0;
  goto LifEnd_78;
  LifFalse_77: /* line 1  col 0 */
  if (%sx32(%bit(%ge(bits32[%add(bits32[fp], 4)], bits32[%add(fp, 4)]))) !=0) { goto LifTrue_60; } else { goto LifFalse_61; }
  LifTrue_60: /* line 1  col 0 */
  temp_59 = %sx32(%bit(%lt(bits32[%add(bits32[fp], 8)], bits32[%add(fp, 4)])));
  goto LifEnd_62;
  LifFalse_61: /* line 1  col 0 */
  temp_59 = 0;
  LifEnd_62: /* line 1  col 0 */
  if (temp_59 !=0) { goto LifTrue_72; } else { goto LifFalse_73; }
  LifTrue_72: /* line 1  col 0 */
  bits32[%add(bits32[fp], 4)] = %sub(bits32[%add(bits32[fp], 4)], bits32[%add(fp, 4)]);
  temp_71 = bits32[%add(fp, 4)];
  goto LifEnd_74;
  LifFalse_73: /* line 1  col 0 */
  if (%sx32(%bit(%lt(bits32[%add(bits32[fp], 4)], bits32[%add(fp, 4)]))) !=0) { goto LifTrue_64; } else { goto LifFalse_65; }
  LifTrue_64: /* line 1  col 0 */
  temp_63 = %sx32(%bit(%ge(bits32[%add(bits32[fp], 8)], bits32[%add(fp, 4)])));
  goto LifEnd_66;
  LifFalse_65: /* line 1  col 0 */
  temp_63 = 0;
  LifEnd_66: /* line 1  col 0 */
  if (temp_63 !=0) { goto LifTrue_68; } else { goto LifFalse_69; }
  LifTrue_68: /* line 1  col 0 */
  bits32[%add(bits32[fp], 8)] = %sub(bits32[%add(bits32[fp], 8)], bits32[%add(fp, 4)]);
  temp_67 = bits32[%add(fp, 4)];
  goto LifEnd_70;
  LifFalse_69: /* line 1  col 0 */
  temp_67 = 0;
  LifEnd_70: /* line 1  col 0 */
  temp_71 = temp_67;
  LifEnd_74: /* line 1  col 0 */
  temp_75 = temp_71;
  LifEnd_78: /* line 1  col 0 */
  temp_79 = temp_75;
  return(temp_79);
 continuation killer():
 return(0);
}}}
section "data" {
 compute_bit_54_gc_data:
   bits32[] { 2, 1,0 };
   bits32[] { 9, 1,0,0,0,0,0,0,0,0 };
}

section "text" {
span 1 xor_46_gc_data {
 xor_46(bits32 pfp,bits32 x,bits32 y) { /* level 2, stack 4 */
  stackdata { align 32; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = x;
  bits32[fp+8] = y;
  bits32 temp_80;
  bits32 temp_111;
  bits32 temp_112;
  bits32 temp_109;
  bits32 temp_110;
  bits32 temp_107;
  bits32 temp_108;
  bits32 temp_105;
  bits32 temp_106;
  bits32 temp_103;
  bits32 temp_104;
  bits32 temp_101;
  bits32 temp_102;
  bits32 temp_99;
  bits32 temp_100;
  bits32 temp_97;
  bits32 temp_98;
  bits32[%add(fp, 12)] = 0;
  temp_98 = bits32[%add(fp, 12)];
  temp_97 =  compute_bit_54(fp,128);
  bits32[%add(fp, 12)] = %add(temp_98, temp_97);
  temp_100 = bits32[%add(fp, 12)];
  temp_99 =  compute_bit_54(fp,64);
  bits32[%add(fp, 12)] = %add(temp_100, temp_99);
  temp_102 = bits32[%add(fp, 12)];
  temp_101 =  compute_bit_54(fp,32);
  bits32[%add(fp, 12)] = %add(temp_102, temp_101);
  temp_104 = bits32[%add(fp, 12)];
  temp_103 =  compute_bit_54(fp,16);
  bits32[%add(fp, 12)] = %add(temp_104, temp_103);
  temp_106 = bits32[%add(fp, 12)];
  temp_105 =  compute_bit_54(fp,8);
  bits32[%add(fp, 12)] = %add(temp_106, temp_105);
  temp_108 = bits32[%add(fp, 12)];
  temp_107 =  compute_bit_54(fp,4);
  bits32[%add(fp, 12)] = %add(temp_108, temp_107);
  temp_110 = bits32[%add(fp, 12)];
  temp_109 =  compute_bit_54(fp,2);
  bits32[%add(fp, 12)] = %add(temp_110, temp_109);
  temp_112 = bits32[%add(fp, 12)];
  temp_111 =  compute_bit_54(fp,1);
  bits32[%add(fp, 12)] = %add(temp_112, temp_111);
  temp_80 = bits32[%add(fp, 12)];
  return(temp_80);
 continuation killer():
 return(0);
}}}
section "data" {
 xor_46_gc_data:
   bits32[] { 4, 1,0,0,0 };
   bits32[] { 20, 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
}

section "text" {
span 1 init_sbox_47_gc_data {
 init_sbox_47(bits32 pfp) { /* level 2, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32 temp_85;
  bits32 temp_113;
  bits32 temp_114;
  bits32 temp_115;
  bits32 temp_116;
  bits32[%add(fp, 4)] = 0;
  Lloop_start_83: /* line 1  col 0 */
  if (%sx32(%bit(%le(bits32[%add(fp, 4)], 255))) !=0) { goto Lloop_body_84; } else { goto Lloop_end_81; }
  Lloop_body_84: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[fp], 4)],bits32[%add(fp, 4)],49) also cuts to killer;
  temp_116 = bits32[fp];
  temp_115 = bits32[%add(fp, 4)];
  temp_114 =  add_mod_256_45(bits32[fp],bits32[%add(fp, 4)],31);
  temp_113 =  add_mod_256_45(temp_116,temp_115,temp_114);
  bits32[%add(bits32[%add(bits32[fp], 4)], %mul(%add(1, bits32[%add(fp, 4)]), 4))] = temp_113;
  bits32[%add(fp, 4)] = %add(bits32[%add(fp, 4)], 1);
  goto Lloop_start_83;
  Lloop_end_81: /* line 1  col 0 */
  temp_85 = 0;
  return(temp_85);
 continuation killer():
 return(0);
}}}
section "data" {
 init_sbox_47_gc_data:
   bits32[] { 2, 1,0 };
   bits32[] { 6, 1,0,0,0,0,1 };
}

section "text" {
span 1 swap_87_gc_data {
 swap_87(bits32 pfp,bits32 i,bits32 j) { /* level 3, stack 4 */
  stackdata { align 32; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = i;
  bits32[fp+8] = j;
  bits32 temp_89;
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(fp, 4)],57) also cuts to killer;
  bits32[%add(fp, 12)] = bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(1, bits32[%add(fp, 4)]), 4))];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(fp, 8)],58) also cuts to killer;
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(fp, 4)],58) also cuts to killer;
  bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(1, bits32[%add(fp, 4)]), 4))] = bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(1, bits32[%add(fp, 8)]), 4))];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(fp, 8)],58) also cuts to killer;
  bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(1, bits32[%add(fp, 8)]), 4))] = bits32[%add(fp, 12)];
  temp_89 = 0;
  return(temp_89);
 continuation killer():
 return(0);
}}}
section "data" {
 swap_87_gc_data:
   bits32[] { 4, 1,0,0,0 };
   bits32[] { 4, 1,0,0,0 };
}

section "text" {
span 1 encrypt_88_gc_data {
 encrypt_88(bits32 pfp,bits32 ch) { /* level 3, stack 4 */
  stackdata { align 32; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = ch;
  bits32 temp_90;
  bits32 temp_121;
  bits32 temp_122;
  bits32 temp_123;
  bits32 temp_118;
  bits32 temp_119;
  bits32 temp_120;
  bits32 temp_117;
  bits32[%add(fp, 8)] = 0;
  bits32[%add(fp, 12)] = 0;
  temp_117 =  add_mod_256_45(bits32[bits32[fp]],bits32[%add(bits32[fp], 4)],1);
  bits32[%add(bits32[fp], 4)] = temp_117;
  temp_120 = bits32[bits32[fp]];
  temp_119 = bits32[%add(bits32[fp], 8)];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(bits32[fp], 4)],64) also cuts to killer;
  temp_118 =  add_mod_256_45(temp_120,temp_119,bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(1, bits32[%add(bits32[fp], 4)]), 4))]);
  bits32[%add(bits32[fp], 8)] = temp_118;
   swap_87(bits32[fp],bits32[%add(bits32[fp], 4)],bits32[%add(bits32[fp], 8)]);
  temp_123 = bits32[bits32[fp]];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(bits32[fp], 4)],66) also cuts to killer;
  temp_122 = bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(1, bits32[%add(bits32[fp], 4)]), 4))];
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(bits32[fp], 8)],66) also cuts to killer;
  temp_121 =  add_mod_256_45(temp_123,temp_122,bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(1, bits32[%add(bits32[fp], 8)]), 4))]);
  bits32[%add(fp, 8)] = temp_121;
  foreign"C" bounds_check(bits32[%add(bits32[bits32[fp]], 4)],bits32[%add(fp, 8)],67) also cuts to killer;
  bits32[%add(fp, 12)] = bits32[%add(bits32[%add(bits32[bits32[fp]], 4)], %mul(%add(1, bits32[%add(fp, 8)]), 4))];
  temp_90 =  xor_46(bits32[bits32[fp]],bits32[%add(fp, 12)],bits32[%add(fp, 4)]);
  return(temp_90);
 continuation killer():
 return(0);
}}}
section "data" {
 encrypt_88_gc_data:
   bits32[] { 4, 1,0,0,0 };
   bits32[] { 10, 1,0,0,0,0,1,0,0,1,0 };
}

section "text" {
span 1 cypher_48_gc_data {
 cypher_48(bits32 pfp) { /* level 2, stack 5 */
  stackdata { align 32; fp : bits32[5]; }
  bits32[fp+0] = pfp;
  bits32 temp_95;
  bits32 temp_130;
  bits32 temp_125;
  bits32 temp_126;
  bits32 temp_127;
  bits32 temp_128;
  bits32 temp_129;
  bits32 temp_131;
  bits32 temp_124;
  bits32[%add(fp, 4)] = 0;
  bits32[%add(fp, 8)] = 0;
  bits32[%add(fp, 12)] = Lgbl_86;
  bits32[%add(fp, 16)] = Lgbl_86;
  temp_124 = foreign"C" getchar() also cuts to killer;
  bits32[%add(fp, 16)] = temp_124;
  Lloop_start_93: /* line 1  col 0 */
  temp_131 = foreign"C" compare_str(bits32[%add(fp, 16)],Lgbl_86) also cuts to killer;
  if (%sx32(%bit(%ne(temp_131, 0))) !=0) { goto Lloop_body_94; } else { goto Lloop_end_91; }
  Lloop_body_94: /* line 1  col 0 */
  temp_129 = bits32[%add(fp, 12)];
  temp_128 = foreign"C" ord(bits32[%add(fp, 16)]) also cuts to killer;
  temp_127 =  encrypt_88(fp,temp_128);
  temp_126 = foreign"C" chr(temp_127) also cuts to killer;
  temp_125 = foreign"C" concat(temp_129,temp_126) also cuts to killer;
  bits32[%add(fp, 12)] = temp_125;
  temp_130 = foreign"C" getchar() also cuts to killer;
  bits32[%add(fp, 16)] = temp_130;
  goto Lloop_start_93;
  Lloop_end_91: /* line 1  col 0 */
  temp_95 = bits32[%add(fp, 12)];
  return(temp_95);
 continuation killer():
 return(0);
}}}
section "data" {
 cypher_48_gc_data:
   bits32[] { 5, 1,0,0,1,1 };
   bits32[] { 10, 1,1,1,1,1,0,0,1,0,1 };
}

section "text" {
span 1 tiger_main_gc_data {
foreign "C"  tiger_main(bits32 pfp) { /* level 1, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32 temp_96;
  bits32 temp_132;
  bits32 temp_40;
  bits32 temp_39;
  temp_39 = foreign"C" alloc(%mul(%add(1, 256), 4)) also cuts to killer;
  temp_40 = %add(1, 256);
  Lloop_start_43: /* line 1  col 0 */
  if (temp_40 !=0) { goto Lloop_body_44; } else { goto Lloop_end_42; }
  Lloop_body_44: /* line 1  col 0 */
  bits32[%add(temp_39, %mul(%sub(temp_40, 1), 4))] = 0;
  temp_40 = %sub(temp_40, 1);
  goto Lloop_start_43;
  Lloop_end_42: /* line 1  col 0 */
  bits32[temp_39] = 256;
  bits32[%add(fp, 4)] = temp_39;
   init_sbox_47(fp);
  temp_132 =  cypher_48(fp);
  temp_96 = foreign"C" print(temp_132) also cuts to killer;
  return(temp_96);
 continuation killer():
 return(0);
}}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 2, 1,1 };
   bits32[] { 5, 1,0,1,0,1 };
}

