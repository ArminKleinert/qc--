target byteorder little memsize 8 wordsize 32 pointersize 32;
import bits32 "tig_not" as not;
import bits32 "tig_chr" as chr;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_flush" as flush;
import bits32 "tig_ord" as ord;
import bits32 "tig_exit" as exit;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_size" as size;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_gc" as gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
export tiger_main;
section "data" {
align 32;
gc_data: bits32 { 0 };
  bits32 { 6 };
  Lgbl_44: bits32 { 1 }; bits8[] "\n\000";
}

section "text" {
span 1 mod_32_gc_data {
 mod_32(bits32 pfp,bits32 n,bits32 m) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = n;
  bits32[fp+8] = m;
  bits32 temp_35;
  temp_35 = %sub(bits32[%add(fp, 4)], %mul_trunc(bits32[%add(fp, 8)], %quot(bits32[%add(fp, 4)], bits32[%add(fp, 8)])));
  return(temp_35);
 continuation killer():
 return(0);
}}}
section "data" {
 mod_32_gc_data:
   bits32[] { 3, 1,0,0 };
   bits32[] { 4, 1,0,0,0 };
}

section "text" {
span 1 mark_multiples_33_gc_data {
 mark_multiples_33(bits32 pfp,bits32 n) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = n;
  bits32 temp_43;
  bits32 temp_53;
  bits32 temp_54;
  bits32[%add(fp, 8)] = bits32[%add(fp, 4)];
  Lloop_start_41: /* line 1  col 0 */
  if (%sx32(%bit(%lt(bits32[%add(fp, 8)], bits32[%add(bits32[fp], 4)]))) !=0) { goto Lloop_body_42; } else { goto Lloop_end_36; }
  Lloop_body_42: /* line 1  col 0 */
  temp_54 =  mod_32(bits32[fp],bits32[%add(fp, 8)],bits32[%add(fp, 4)]);
  temp_53 = foreign"C" not(temp_54) also cuts to killer;
  if (temp_53 !=0) { goto LifTrue_38; } else { goto LifFalse_39; }
  LifTrue_38: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],bits32[%add(fp, 8)],18) also cuts to killer;
  bits32[%add(bits32[%add(bits32[fp], 8)], %mul_trunc(%add(1, bits32[%add(fp, 8)]), 4))] = 1;
  goto LifEnd_40;
  LifFalse_39: /* line 1  col 0 */
  LifEnd_40: /* line 1  col 0 */
  bits32[%add(fp, 8)] = %add(bits32[%add(fp, 8)], bits32[%add(fp, 4)]);
  goto Lloop_start_41;
  Lloop_end_36: /* line 1  col 0 */
  temp_43 = 0;
  return(temp_43);
 continuation killer():
 return(0);
}}}
section "data" {
 mark_multiples_33_gc_data:
   bits32[] { 3, 1,0,0 };
   bits32[] { 5, 1,0,0,0,0 };
}

section "text" {
span 1 step_34_gc_data {
 step_34(bits32 pfp,bits32 n) { /* level 2, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = n;
  bits32 temp_48;
  bits32 temp_55;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],bits32[%add(fp, 4)],24) also cuts to killer;
  temp_55 = foreign"C" not(bits32[%add(bits32[%add(bits32[fp], 8)], %mul_trunc(%add(1, bits32[%add(fp, 4)]), 4))]) also cuts to killer;
  if (temp_55 !=0) { goto LifTrue_45; } else { goto LifFalse_46; }
  LifTrue_45: /* line 1  col 0 */
  foreign"C" printi(bits32[%add(fp, 4)]) also cuts to killer;
  foreign"C" print(Lgbl_44) also cuts to killer;
   mark_multiples_33(bits32[fp],bits32[%add(fp, 4)]);
  goto LifEnd_47;
  LifFalse_46: /* line 1  col 0 */
  LifEnd_47: /* line 1  col 0 */
  temp_48 = 0;
  return(temp_48);
 continuation killer():
 return(0);
}}}
section "data" {
 step_34_gc_data:
   bits32[] { 2, 1,0 };
   bits32[] { 4, 1,0,0,0 };
}

section "text" {
span 1 tiger_main_gc_data {
foreign "C"  tiger_main(bits32 pfp) { /* level 1, stack 4 */
  stackdata { align 32; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32 temp_52;
  bits32 temp_27;
  bits32 temp_26;
  bits32[%add(fp, 4)] = 1000;
  temp_26 = foreign"C" alloc(%mul_trunc(%add(1, bits32[%add(fp, 4)]), 4)) also cuts to killer;
  temp_27 = %add(1, bits32[%add(fp, 4)]);
  Lloop_start_30: /* line 1  col 0 */
  if (temp_27 !=0) { goto Lloop_body_31; } else { goto Lloop_end_29; }
  Lloop_body_31: /* line 1  col 0 */
  bits32[%add(temp_26, %mul_trunc(%sub(temp_27, 1), 4))] = 0;
  temp_27 = %sub(temp_27, 1);
  goto Lloop_start_30;
  Lloop_end_29: /* line 1  col 0 */
  bits32[temp_26] = bits32[%add(fp, 4)];
  bits32[%add(fp, 8)] = temp_26;
  bits32[%add(fp, 12)] = 2;
  Lloop_start_50: /* line 1  col 0 */
  if (%sx32(%bit(%le(bits32[%add(fp, 12)], %sub(bits32[%add(fp, 4)], 1)))) !=0) { goto Lloop_body_51; } else { goto Lloop_end_49; }
  Lloop_body_51: /* line 1  col 0 */
   step_34(fp,bits32[%add(fp, 12)]);
  bits32[%add(fp, 12)] = %add(bits32[%add(fp, 12)], 1);
  goto Lloop_start_50;
  Lloop_end_49: /* line 1  col 0 */
  temp_52 = 0;
  return(temp_52);
 continuation killer():
 return(0);
}}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 4, 1,0,1,0 };
   bits32[] { 4, 1,0,0,1 };
}

