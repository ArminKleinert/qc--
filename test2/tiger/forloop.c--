target byteorder little memsize 8 wordsize 32 pointersize 32;
import bits32 "tig_not" as not;
import bits32 "tig_chr" as chr;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_flush" as flush;
import bits32 "tig_ord" as ord;
import bits32 "tig_exit" as exit;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_size" as size;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_gc" as gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
export tiger_main;
section "data" {
align 32;
gc_data: bits32 { 0 };
  bits32 { 6 };
  Lgbl_23: bits32 { 1 }; bits8[] "\n\000";
}

section "text" {
span 1 tiger_main_gc_data {
foreign "C"  tiger_main(bits32 pfp) { /* level 1, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32 temp_24;
  bits32 temp_25;
  bits32[%add(fp, 4)] = 0;
  bits32[%add(fp, 8)] = 0;
  Lloop_start_21: /* line 1  col 0 */
  if (%sx32(%bit(%le(bits32[%add(fp, 8)], 25))) !=0) { goto Lloop_body_22; } else { goto Lloop_end_20; }
  Lloop_body_22: /* line 1  col 0 */
  bits32[%add(fp, 4)] = %add(bits32[%add(fp, 4)], 1);
  temp_25 = foreign"C" chr(%add(bits32[%add(fp, 4)], 64)) also cuts to killer;
  foreign"C" print(temp_25) also cuts to killer;
  bits32[%add(fp, 8)] = %add(bits32[%add(fp, 8)], 1);
  goto Lloop_start_21;
  Lloop_end_20: /* line 1  col 0 */
  temp_24 = foreign"C" print(Lgbl_23) also cuts to killer;
  return(temp_24);
 continuation killer():
 return(0);
}}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 3, 1,0,0 };
   bits32[] { 3, 1,0,1 };
}

