target byteorder little memsize 8 wordsize 32 pointersize 32;
import bits32 "tig_not" as not;
import bits32 "tig_chr" as chr;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_flush" as flush;
import bits32 "tig_ord" as ord;
import bits32 "tig_exit" as exit;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_size" as size;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_gc" as gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
export tiger_main;
section "data" {
align 32;
gc_data: bits32 { 0 };
  bits32 { 7 };
  Lgbl_55: bits32 { 2 }; bits8[] " O\000";
  bits32 { 6 };
  Lgbl_64: bits32 { 1 }; bits8[] "\n\000";
  bits32 { 7 };
  Lgbl_57: bits32 { 2 }; bits8[] " .\000";
}

section "text" {
span 1 printboard_51_gc_data {
 printboard_51(bits32 pfp) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32 temp_67;
  bits32 temp_58;
  bits32[%add(fp, 4)] = 0;
  Lloop_start_65: /* line 1  col 0 */
  if (%sx32(%bit(%le(bits32[%add(fp, 4)], %sub(bits32[%add(bits32[fp], 4)], 1)))) !=0) { goto Lloop_body_66; } else { goto Lloop_end_53; }
  Lloop_body_66: /* line 1  col 0 */
  bits32[%add(fp, 8)] = 0;
  Lloop_start_62: /* line 1  col 0 */
  if (%sx32(%bit(%le(bits32[%add(fp, 8)], %sub(bits32[%add(bits32[fp], 4)], 1)))) !=0) { goto Lloop_body_63; } else { goto Lloop_end_54; }
  Lloop_body_63: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[fp], 12)],bits32[%add(fp, 4)],16) also cuts to killer;
  if (%sx32(%bit(%eq(bits32[%add(bits32[%add(bits32[fp], 12)], %mul_trunc(%add(1, bits32[%add(fp, 4)]), 4))], bits32[%add(fp, 8)]))) !=0) { goto LifTrue_59; } else { goto LifFalse_60; }
  LifTrue_59: /* line 1  col 0 */
  temp_58 = Lgbl_55;
  goto LifEnd_61;
  LifFalse_60: /* line 1  col 0 */
  temp_58 = Lgbl_57;
  LifEnd_61: /* line 1  col 0 */
  foreign"C" print(temp_58) also cuts to killer;
  bits32[%add(fp, 8)] = %add(bits32[%add(fp, 8)], 1);
  goto Lloop_start_62;
  Lloop_end_54: /* line 1  col 0 */
  foreign"C" print(Lgbl_64) also cuts to killer;
  bits32[%add(fp, 4)] = %add(bits32[%add(fp, 4)], 1);
  goto Lloop_start_65;
  Lloop_end_53: /* line 1  col 0 */
  temp_67 = foreign"C" print(Lgbl_64) also cuts to killer;
  return(temp_67);
 continuation killer():
 return(0);
}}}
section "data" {
 printboard_51_gc_data:
   bits32[] { 3, 1,0,0 };
   bits32[] { 3, 1,0,1 };
}

section "text" {
span 1 try_52_gc_data {
 try_52(bits32 pfp,bits32 c) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = c;
  bits32 temp_85;
  bits32 temp_73;
  bits32 temp_69;
  if (%sx32(%bit(%eq(bits32[%add(fp, 4)], bits32[%add(bits32[fp], 4)]))) !=0) { goto LifTrue_82; } else { goto LifFalse_83; }
  LifTrue_82: /* line 1  col 0 */
   printboard_51(bits32[fp]);
  goto LifEnd_84;
  LifFalse_83: /* line 1  col 0 */
  bits32[%add(fp, 8)] = 0;
  Lloop_start_80: /* line 1  col 0 */
  if (%sx32(%bit(%le(bits32[%add(fp, 8)], %sub(bits32[%add(bits32[fp], 4)], 1)))) !=0) { goto Lloop_body_81; } else { goto Lloop_end_68; }
  Lloop_body_81: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],bits32[%add(fp, 8)],25) also cuts to killer;
  if (%sx32(%bit(%eq(bits32[%add(bits32[%add(bits32[fp], 8)], %mul_trunc(%add(1, bits32[%add(fp, 8)]), 4))], 0))) !=0) { goto LifTrue_70; } else { goto LifFalse_71; }
  LifTrue_70: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[fp], 16)],%add(bits32[%add(fp, 8)], bits32[%add(fp, 4)]),25) also cuts to killer;
  temp_69 = %sx32(%bit(%eq(bits32[%add(bits32[%add(bits32[fp], 16)], %mul_trunc(%add(1, %add(bits32[%add(fp, 8)], bits32[%add(fp, 4)])), 4))], 0)));
  goto LifEnd_72;
  LifFalse_71: /* line 1  col 0 */
  temp_69 = 0;
  LifEnd_72: /* line 1  col 0 */
  if (temp_69 !=0) { goto LifTrue_74; } else { goto LifFalse_75; }
  LifTrue_74: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[fp], 20)],%sub(%add(bits32[%add(fp, 8)], 7), bits32[%add(fp, 4)]),25) also cuts to killer;
  temp_73 = %sx32(%bit(%eq(bits32[%add(bits32[%add(bits32[fp], 20)], %mul_trunc(%add(1, %sub(%add(bits32[%add(fp, 8)], 7), bits32[%add(fp, 4)])), 4))], 0)));
  goto LifEnd_76;
  LifFalse_75: /* line 1  col 0 */
  temp_73 = 0;
  LifEnd_76: /* line 1  col 0 */
  if (temp_73 !=0) { goto LifTrue_77; } else { goto LifFalse_78; }
  LifTrue_77: /* line 1  col 0 */
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],bits32[%add(fp, 8)],26) also cuts to killer;
  bits32[%add(bits32[%add(bits32[fp], 8)], %mul_trunc(%add(1, bits32[%add(fp, 8)]), 4))] = 1;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 16)],%add(bits32[%add(fp, 8)], bits32[%add(fp, 4)]),26) also cuts to killer;
  bits32[%add(bits32[%add(bits32[fp], 16)], %mul_trunc(%add(1, %add(bits32[%add(fp, 8)], bits32[%add(fp, 4)])), 4))] = 1;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 20)],%sub(%add(bits32[%add(fp, 8)], 7), bits32[%add(fp, 4)]),26) also cuts to killer;
  bits32[%add(bits32[%add(bits32[fp], 20)], %mul_trunc(%add(1, %sub(%add(bits32[%add(fp, 8)], 7), bits32[%add(fp, 4)])), 4))] = 1;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 12)],bits32[%add(fp, 4)],27) also cuts to killer;
  bits32[%add(bits32[%add(bits32[fp], 12)], %mul_trunc(%add(1, bits32[%add(fp, 4)]), 4))] = bits32[%add(fp, 8)];
   try_52(bits32[fp],%add(bits32[%add(fp, 4)], 1));
  foreign"C" bounds_check(bits32[%add(bits32[fp], 8)],bits32[%add(fp, 8)],29) also cuts to killer;
  bits32[%add(bits32[%add(bits32[fp], 8)], %mul_trunc(%add(1, bits32[%add(fp, 8)]), 4))] = 0;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 16)],%add(bits32[%add(fp, 8)], bits32[%add(fp, 4)]),29) also cuts to killer;
  bits32[%add(bits32[%add(bits32[fp], 16)], %mul_trunc(%add(1, %add(bits32[%add(fp, 8)], bits32[%add(fp, 4)])), 4))] = 0;
  foreign"C" bounds_check(bits32[%add(bits32[fp], 20)],%sub(%add(bits32[%add(fp, 8)], 7), bits32[%add(fp, 4)]),29) also cuts to killer;
  bits32[%add(bits32[%add(bits32[fp], 20)], %mul_trunc(%add(1, %sub(%add(bits32[%add(fp, 8)], 7), bits32[%add(fp, 4)])), 4))] = 0;
  goto LifEnd_79;
  LifFalse_78: /* line 1  col 0 */
  LifEnd_79: /* line 1  col 0 */
  bits32[%add(fp, 8)] = %add(bits32[%add(fp, 8)], 1);
  goto Lloop_start_80;
  Lloop_end_68: /* line 1  col 0 */
  LifEnd_84: /* line 1  col 0 */
  temp_85 = 0;
  return(temp_85);
 continuation killer():
 return(0);
}}}
section "data" {
 try_52_gc_data:
   bits32[] { 3, 1,0,0 };
   bits32[] { 5, 1,0,0,0,0 };
}

section "text" {
span 1 tiger_main_gc_data {
foreign "C"  tiger_main(bits32 pfp) { /* level 1, stack 6 */
  stackdata { align 32; fp : bits32[6]; }
  bits32[fp+0] = pfp;
  bits32 temp_86;
  bits32 temp_47;
  bits32 temp_46;
  bits32 temp_42;
  bits32 temp_41;
  bits32 temp_37;
  bits32 temp_36;
  bits32 temp_31;
  bits32 temp_30;
  bits32[%add(fp, 4)] = 8;
  temp_30 = foreign"C" alloc(%mul_trunc(%add(1, bits32[%add(fp, 4)]), 4)) also cuts to killer;
  temp_31 = %add(1, bits32[%add(fp, 4)]);
  Lloop_start_34: /* line 1  col 0 */
  if (temp_31 !=0) { goto Lloop_body_35; } else { goto Lloop_end_33; }
  Lloop_body_35: /* line 1  col 0 */
  bits32[%add(temp_30, %mul_trunc(%sub(temp_31, 1), 4))] = 0;
  temp_31 = %sub(temp_31, 1);
  goto Lloop_start_34;
  Lloop_end_33: /* line 1  col 0 */
  bits32[temp_30] = bits32[%add(fp, 4)];
  bits32[%add(fp, 8)] = temp_30;
  temp_36 = foreign"C" alloc(%mul_trunc(%add(1, bits32[%add(fp, 4)]), 4)) also cuts to killer;
  temp_37 = %add(1, bits32[%add(fp, 4)]);
  Lloop_start_39: /* line 1  col 0 */
  if (temp_37 !=0) { goto Lloop_body_40; } else { goto Lloop_end_38; }
  Lloop_body_40: /* line 1  col 0 */
  bits32[%add(temp_36, %mul_trunc(%sub(temp_37, 1), 4))] = 0;
  temp_37 = %sub(temp_37, 1);
  goto Lloop_start_39;
  Lloop_end_38: /* line 1  col 0 */
  bits32[temp_36] = bits32[%add(fp, 4)];
  bits32[%add(fp, 12)] = temp_36;
  temp_41 = foreign"C" alloc(%mul_trunc(%add(1, %sub(%add(bits32[%add(fp, 4)], bits32[%add(fp, 4)]), 1)), 4)) also cuts to killer;
  temp_42 = %add(1, %sub(%add(bits32[%add(fp, 4)], bits32[%add(fp, 4)]), 1));
  Lloop_start_44: /* line 1  col 0 */
  if (temp_42 !=0) { goto Lloop_body_45; } else { goto Lloop_end_43; }
  Lloop_body_45: /* line 1  col 0 */
  bits32[%add(temp_41, %mul_trunc(%sub(temp_42, 1), 4))] = 0;
  temp_42 = %sub(temp_42, 1);
  goto Lloop_start_44;
  Lloop_end_43: /* line 1  col 0 */
  bits32[temp_41] = %sub(%add(bits32[%add(fp, 4)], bits32[%add(fp, 4)]), 1);
  bits32[%add(fp, 16)] = temp_41;
  temp_46 = foreign"C" alloc(%mul_trunc(%add(1, %sub(%add(bits32[%add(fp, 4)], bits32[%add(fp, 4)]), 1)), 4)) also cuts to killer;
  temp_47 = %add(1, %sub(%add(bits32[%add(fp, 4)], bits32[%add(fp, 4)]), 1));
  Lloop_start_49: /* line 1  col 0 */
  if (temp_47 !=0) { goto Lloop_body_50; } else { goto Lloop_end_48; }
  Lloop_body_50: /* line 1  col 0 */
  bits32[%add(temp_46, %mul_trunc(%sub(temp_47, 1), 4))] = 0;
  temp_47 = %sub(temp_47, 1);
  goto Lloop_start_49;
  Lloop_end_48: /* line 1  col 0 */
  bits32[temp_46] = %sub(%add(bits32[%add(fp, 4)], bits32[%add(fp, 4)]), 1);
  bits32[%add(fp, 20)] = temp_46;
  temp_86 =  try_52(fp,0);
  return(temp_86);
 continuation killer():
 return(0);
}}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 6, 1,0,1,1,1,1 };
   bits32[] { 10, 1,0,0,1,0,1,0,1,0,1 };
}

