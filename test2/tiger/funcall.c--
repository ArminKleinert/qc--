target byteorder little memsize 8 wordsize 32 pointersize 32;
import bits32 "tig_not" as not;
import bits32 "tig_chr" as chr;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_flush" as flush;
import bits32 "tig_ord" as ord;
import bits32 "tig_exit" as exit;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_size" as size;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_gc" as gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
export tiger_main;
section "data" {
align 32;
gc_data: bits32 { 0 };
  bits32 { 11 };
  Lgbl_33: bits32 { 6 }; bits8[] " str2 \000";
  bits32 { 11 };
  Lgbl_35: bits32 { 6 }; bits8[] " str1 \000";
  bits32 { 6 };
  Lgbl_36: bits32 { 1 }; bits8[] "\n\000";
}

section "text" {
span 1 a_a_27_gc_data {
 a_a_27(bits32 pfp,bits32 c,bits32 d) { /* level 3, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = c;
  bits32[fp+8] = d;
  bits32 temp_28;
  foreign"C" print(bits32[%add(fp, 8)]) also cuts to killer;
  temp_28 =  fb_26(bits32[bits32[fp]],bits32[%add(fp, 4)]);
  return(temp_28);
 continuation killer():
 return(0);
}}}
section "data" {
 a_a_27_gc_data:
   bits32[] { 3, 1,0,1 };
   bits32[] { 4, 1,0,1,0 };
}

section "text" {
span 1 fa_25_gc_data {
 fa_25(bits32 pfp,bits32 a,bits32 b) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = a;
  bits32[fp+8] = b;
  bits32 temp_32;
  if (%sx32(%bit(%lt(bits32[%add(fp, 4)], 5))) !=0) { goto LifTrue_29; } else { goto LifFalse_30; }
  LifTrue_29: /* line 1  col 0 */
   a_a_27(fp,%add(bits32[%add(fp, 4)], 1),bits32[%add(fp, 8)]);
  goto LifEnd_31;
  LifFalse_30: /* line 1  col 0 */
  LifEnd_31: /* line 1  col 0 */
  temp_32 = 0;
  return(temp_32);
 continuation killer():
 return(0);
}}}
section "data" {
 fa_25_gc_data:
   bits32[] { 3, 1,0,1 };
   bits32[] { 4, 1,0,1,0 };
}

section "text" {
span 1 fb_26_gc_data {
 fb_26(bits32 pfp,bits32 d) { /* level 2, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = d;
  bits32 temp_34;
  temp_34 =  fa_25(bits32[fp],bits32[%add(fp, 4)],Lgbl_33);
  return(temp_34);
 continuation killer():
 return(0);
}}}
section "data" {
 fb_26_gc_data:
   bits32[] { 2, 1,0 };
   bits32[] { 3, 1,0,0 };
}

section "text" {
span 1 tiger_main_gc_data {
foreign "C"  tiger_main(bits32 pfp) { /* level 1, stack 1 */
  stackdata { align 32; fp : bits32[1]; }
  bits32[fp+0] = pfp;
  bits32 temp_37;
   fa_25(fp,4,Lgbl_35);
   fb_26(fp,1);
  temp_37 = foreign"C" print(Lgbl_36) also cuts to killer;
  return(temp_37);
 continuation killer():
 return(0);
}}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 1, 1 };
   bits32[] { 2, 1,0 };
}

