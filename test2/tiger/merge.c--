target byteorder little memsize 8 wordsize 32 pointersize 32;
import bits32 "tig_not" as not;
import bits32 "tig_chr" as chr;
import bits32 "tig_sizea" as sizea;
import bits32 "tig_substring" as substring;
import bits32 "tig_concat" as concat;
import bits32 "tig_flush" as flush;
import bits32 "tig_ord" as ord;
import bits32 "tig_exit" as exit;
import bits32 "tig_print" as print;
import bits32 "tig_printi" as printi;
import bits32 "tig_getchar" as getchar;
import bits32 "tig_size" as size;
import bits32 "tig_alloc" as alloc;
import bits32 "tig_gc" as gc;
import bits32 "tig_compare_str" as compare_str;
import bits32 "tig_bounds_check" as bounds_check;
export tiger_main;
section "data" {
align 32;
gc_data: bits32 { 0 };
  bits32 { 6 };
  Lgbl_95: bits32 { 1 }; bits8[] "-\000";
  bits32 { 6 };
  Lgbl_42: bits32 { 1 }; bits8[] "0\000";
  bits32 { 6 };
  Lgbl_51: bits32 { 1 }; bits8[] "\n\000";
  bits32 { 6 };
  Lgbl_49: bits32 { 1 }; bits8[] " \000";
  bits32 { 6 };
  Lgbl_41: bits32 { 1 }; bits8[] "9\000";
}

section "text" {
span 1 isdigit_39_gc_data {
 isdigit_39(bits32 pfp,bits32 s) { /* level 3, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = s;
  bits32 temp_47;
  bits32 temp_43;
  bits32 temp_109;
  bits32 temp_110;
  bits32 temp_108;
  bits32 temp_112;
  bits32 temp_113;
  bits32 temp_111;
  temp_111 = foreign"C" ord(bits32[%add(bits32[bits32[fp]], 4)]) also cuts to killer;
  temp_113 = temp_111;
  temp_112 = foreign"C" ord(Lgbl_42) also cuts to killer;
  if (%sx32(%bit(%ge(temp_113, temp_112))) !=0) { goto LifTrue_44; } else { goto LifFalse_45; }
  LifTrue_44: /* line 1  col 0 */
  temp_108 = foreign"C" ord(bits32[%add(bits32[bits32[fp]], 4)]) also cuts to killer;
  temp_110 = temp_108;
  temp_109 = foreign"C" ord(Lgbl_41) also cuts to killer;
  temp_43 = %sx32(%bit(%le(temp_110, temp_109)));
  goto LifEnd_46;
  LifFalse_45: /* line 1  col 0 */
  temp_43 = 0;
  LifEnd_46: /* line 1  col 0 */
  temp_47 = temp_43;
  return(temp_47);
 continuation killer():
 return(0);
}}}
section "data" {
 isdigit_39_gc_data:
   bits32[] { 2, 1,1 };
   bits32[] { 10, 1,1,0,0,0,0,0,0,0,0 };
}

section "text" {
span 1 skipto_40_gc_data {
 skipto_40(bits32 pfp) { /* level 3, stack 1 */
  stackdata { align 32; fp : bits32[1]; }
  bits32[fp+0] = pfp;
  bits32 temp_58;
  bits32 temp_114;
  bits32 temp_115;
  bits32 temp_52;
  bits32 temp_116;
  Lloop_start_56: /* line 1  col 0 */
  temp_116 = foreign"C" compare_str(bits32[%add(bits32[bits32[fp]], 4)],Lgbl_49) also cuts to killer;
  if (%sx32(%bit(%eq(temp_116, 0))) !=0) { goto LifTrue_53; } else { goto LifFalse_54; }
  LifTrue_53: /* line 1  col 0 */
  temp_52 = 1;
  goto LifEnd_55;
  LifFalse_54: /* line 1  col 0 */
  temp_115 = foreign"C" compare_str(bits32[%add(bits32[bits32[fp]], 4)],Lgbl_51) also cuts to killer;
  temp_52 = %sx32(%bit(%eq(temp_115, 0)));
  LifEnd_55: /* line 1  col 0 */
  if (temp_52 !=0) { goto Lloop_body_57; } else { goto Lloop_end_48; }
  Lloop_body_57: /* line 1  col 0 */
  temp_114 = foreign"C" getchar() also cuts to killer;
  bits32[%add(bits32[bits32[fp]], 4)] = temp_114;
  goto Lloop_start_56;
  Lloop_end_48: /* line 1  col 0 */
  temp_58 = 0;
  return(temp_58);
 continuation killer():
 return(0);
}}}
section "data" {
 skipto_40_gc_data:
   bits32[] { 1, 1 };
   bits32[] { 6, 1,0,1,0,0,0 };
}

section "text" {
span 1 readint_38_gc_data {
 readint_38(bits32 pfp,bits32 any) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = any;
  bits32 temp_62;
  bits32 temp_122;
  bits32 temp_120;
  bits32 temp_121;
  bits32 temp_118;
  bits32 temp_119;
  bits32 temp_123;
  bits32 temp_117;
  bits32[%add(fp, 8)] = 0;
   skipto_40(fp);
  temp_117 =  isdigit_39(fp,bits32[%add(bits32[fp], 4)]);
  bits32[%add(bits32[%add(fp, 4)], 0)] = temp_117;
  Lloop_start_60: /* line 1  col 0 */
  temp_123 =  isdigit_39(fp,bits32[%add(bits32[fp], 4)]);
  if (temp_123 !=0) { goto Lloop_body_61; } else { goto Lloop_end_59; }
  Lloop_body_61: /* line 1  col 0 */
  temp_119 = %mul_trunc(bits32[%add(fp, 8)], 10);
  temp_118 = foreign"C" ord(bits32[%add(bits32[fp], 4)]) also cuts to killer;
  temp_121 = %add(temp_119, temp_118);
  temp_120 = foreign"C" ord(Lgbl_42) also cuts to killer;
  bits32[%add(fp, 8)] = %sub(temp_121, temp_120);
  temp_122 = foreign"C" getchar() also cuts to killer;
  bits32[%add(bits32[fp], 4)] = temp_122;
  goto Lloop_start_60;
  Lloop_end_59: /* line 1  col 0 */
  temp_62 = bits32[%add(fp, 8)];
  return(temp_62);
 continuation killer():
 return(0);
}}}
section "data" {
 readint_38_gc_data:
   bits32[] { 3, 1,1,0 };
   bits32[] { 10, 1,1,0,1,0,0,0,0,0,0 };
}

section "text" {
span 1 readlist_63_gc_data {
 readlist_63(bits32 pfp) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32 temp_74;
  bits32 temp_70;
  bits32 temp_125;
  bits32 temp_69;
  bits32 temp_124;
  bits32 temp_67;
  temp_67 = foreign"C" alloc(4) also cuts to killer;
  bits32[%add(temp_67, 0)] = 0;
  bits32[%add(fp, 4)] = temp_67;
  temp_124 =  readint_38(bits32[fp],bits32[%add(fp, 4)]);
  bits32[%add(fp, 8)] = temp_124;
  if (bits32[%add(bits32[%add(fp, 4)], 0)] !=0) { goto LifTrue_71; } else { goto LifFalse_72; }
  LifTrue_71: /* line 1  col 0 */
  temp_69 = foreign"C" alloc(8) also cuts to killer;
  bits32[%add(temp_69, 0)] = bits32[%add(fp, 8)];
  temp_125 =  readlist_63(bits32[fp]);
  bits32[%add(temp_69, 4)] = temp_125;
  temp_70 = temp_69;
  goto LifEnd_73;
  LifFalse_72: /* line 1  col 0 */
  temp_70 = 0;
  LifEnd_73: /* line 1  col 0 */
  temp_74 = temp_70;
  return(temp_74);
 continuation killer():
 return(0);
}}}
section "data" {
 readlist_63_gc_data:
   bits32[] { 3, 1,1,0 };
   bits32[] { 7, 1,1,1,1,1,0,1 };
}

section "text" {
span 1 merge_64_gc_data {
 merge_64(bits32 pfp,bits32 a,bits32 b) { /* level 2, stack 3 */
  stackdata { align 32; fp : bits32[3]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = a;
  bits32[fp+8] = b;
  bits32 temp_89;
  bits32 temp_126;
  bits32 temp_76;
  bits32 temp_77;
  bits32 temp_127;
  bits32 temp_75;
  bits32 temp_81;
  bits32 temp_85;
  if (%sx32(%bit(%eq(bits32[%add(fp, 4)], 0))) !=0) { goto LifTrue_86; } else { goto LifFalse_87; }
  LifTrue_86: /* line 1  col 0 */
  temp_85 = bits32[%add(fp, 8)];
  goto LifEnd_88;
  LifFalse_87: /* line 1  col 0 */
  if (%sx32(%bit(%eq(bits32[%add(fp, 8)], 0))) !=0) { goto LifTrue_82; } else { goto LifFalse_83; }
  LifTrue_82: /* line 1  col 0 */
  temp_81 = bits32[%add(fp, 4)];
  goto LifEnd_84;
  LifFalse_83: /* line 1  col 0 */
  if (%sx32(%bit(%lt(bits32[%add(bits32[%add(fp, 4)], 0)], bits32[%add(bits32[%add(fp, 8)], 0)]))) !=0) { goto LifTrue_78; } else { goto LifFalse_79; }
  LifTrue_78: /* line 1  col 0 */
  temp_75 = foreign"C" alloc(8) also cuts to killer;
  bits32[%add(temp_75, 0)] = bits32[%add(bits32[%add(fp, 4)], 0)];
  temp_127 =  merge_64(bits32[fp],bits32[%add(bits32[%add(fp, 4)], 4)],bits32[%add(fp, 8)]);
  bits32[%add(temp_75, 4)] = temp_127;
  temp_77 = temp_75;
  goto LifEnd_80;
  LifFalse_79: /* line 1  col 0 */
  temp_76 = foreign"C" alloc(8) also cuts to killer;
  bits32[%add(temp_76, 0)] = bits32[%add(bits32[%add(fp, 8)], 0)];
  temp_126 =  merge_64(bits32[fp],bits32[%add(fp, 4)],bits32[%add(bits32[%add(fp, 8)], 4)]);
  bits32[%add(temp_76, 4)] = temp_126;
  temp_77 = temp_76;
  LifEnd_80: /* line 1  col 0 */
  temp_81 = temp_77;
  LifEnd_84: /* line 1  col 0 */
  temp_85 = temp_81;
  LifEnd_88: /* line 1  col 0 */
  temp_89 = temp_85;
  return(temp_89);
 continuation killer():
 return(0);
}}}
section "data" {
 merge_64_gc_data:
   bits32[] { 3, 1,1,1 };
   bits32[] { 11, 1,1,1,1,1,1,1,1,1,1,1 };
}

section "text" {
span 1 f_90_gc_data {
 f_90(bits32 pfp,bits32 i) { /* level 3, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = i;
  bits32 temp_94;
  bits32 temp_128;
  bits32 temp_129;
  bits32 temp_130;
  if (%sx32(%bit(%gt(bits32[%add(fp, 4)], 0))) !=0) { goto LifTrue_91; } else { goto LifFalse_92; }
  LifTrue_91: /* line 1  col 0 */
   f_90(bits32[fp],%quot(bits32[%add(fp, 4)], 10));
  temp_130 = %sub(bits32[%add(fp, 4)], %mul_trunc(%quot(bits32[%add(fp, 4)], 10), 10));
  temp_129 = foreign"C" ord(Lgbl_42) also cuts to killer;
  temp_128 = foreign"C" chr(%add(temp_130, temp_129)) also cuts to killer;
  foreign"C" print(temp_128) also cuts to killer;
  goto LifEnd_93;
  LifFalse_92: /* line 1  col 0 */
  LifEnd_93: /* line 1  col 0 */
  temp_94 = 0;
  return(temp_94);
 continuation killer():
 return(0);
}}}
section "data" {
 f_90_gc_data:
   bits32[] { 2, 1,0 };
   bits32[] { 6, 1,0,0,1,0,0 };
}

section "text" {
span 1 printint_65_gc_data {
 printint_65(bits32 pfp,bits32 i) { /* level 2, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = i;
  bits32 temp_102;
  if (%sx32(%bit(%lt(bits32[%add(fp, 4)], 0))) !=0) { goto LifTrue_99; } else { goto LifFalse_100; }
  LifTrue_99: /* line 1  col 0 */
  foreign"C" print(Lgbl_95) also cuts to killer;
   f_90(fp,%sub(0, bits32[%add(fp, 4)]));
  goto LifEnd_101;
  LifFalse_100: /* line 1  col 0 */
  if (%sx32(%bit(%gt(bits32[%add(fp, 4)], 0))) !=0) { goto LifTrue_96; } else { goto LifFalse_97; }
  LifTrue_96: /* line 1  col 0 */
   f_90(fp,bits32[%add(fp, 4)]);
  goto LifEnd_98;
  LifFalse_97: /* line 1  col 0 */
  foreign"C" print(Lgbl_42) also cuts to killer;
  LifEnd_98: /* line 1  col 0 */
  LifEnd_101: /* line 1  col 0 */
  temp_102 = 0;
  return(temp_102);
 continuation killer():
 return(0);
}}}
section "data" {
 printint_65_gc_data:
   bits32[] { 2, 1,0 };
   bits32[] { 3, 1,0,0 };
}

section "text" {
span 1 printlist_66_gc_data {
 printlist_66(bits32 pfp,bits32 l) { /* level 2, stack 2 */
  stackdata { align 32; fp : bits32[2]; }
  bits32[fp+0] = pfp;
  bits32[fp+4] = l;
  bits32 temp_106;
  if (%sx32(%bit(%eq(bits32[%add(fp, 4)], 0))) !=0) { goto LifTrue_103; } else { goto LifFalse_104; }
  LifTrue_103: /* line 1  col 0 */
  foreign"C" print(Lgbl_51) also cuts to killer;
  goto LifEnd_105;
  LifFalse_104: /* line 1  col 0 */
   printint_65(bits32[fp],bits32[%add(bits32[%add(fp, 4)], 0)]);
  foreign"C" print(Lgbl_49) also cuts to killer;
   printlist_66(bits32[fp],bits32[%add(bits32[%add(fp, 4)], 4)]);
  LifEnd_105: /* line 1  col 0 */
  temp_106 = 0;
  return(temp_106);
 continuation killer():
 return(0);
}}}
section "data" {
 printlist_66_gc_data:
   bits32[] { 2, 1,1 };
   bits32[] { 3, 1,1,0 };
}

section "text" {
span 1 tiger_main_gc_data {
foreign "C"  tiger_main(bits32 pfp) { /* level 1, stack 4 */
  stackdata { align 32; fp : bits32[4]; }
  bits32[fp+0] = pfp;
  bits32 temp_107;
  bits32 temp_135;
  bits32 temp_133;
  bits32 temp_134;
  bits32 temp_132;
  bits32 temp_131;
  temp_131 = foreign"C" getchar() also cuts to killer;
  bits32[%add(fp, 4)] = temp_131;
  temp_132 =  readlist_63(fp);
  bits32[%add(fp, 8)] = temp_132;
  temp_134 = foreign"C" getchar() also cuts to killer;
  bits32[%add(fp, 4)] = temp_134;
  temp_133 =  readlist_63(fp);
  bits32[%add(fp, 12)] = temp_133;
  temp_135 =  merge_64(fp,bits32[%add(fp, 8)],bits32[%add(fp, 12)]);
  temp_107 =  printlist_66(fp,temp_135);
  return(temp_107);
 continuation killer():
 return(0);
}}}
section "data" {
 tiger_main_gc_data:
   bits32[] { 4, 1,1,1,1 };
   bits32[] { 7, 1,0,1,1,1,1,1 };
}

