// execute the commands below to use this file as a test case
//
// this file tests to be sure that the output assembles without complaint
//
/// ./regr "BASE=`echo $SELF | sed s/.c--//`;
///         ../bin/qc-- backend=Backend.x86 -c $SELF > $BASE.s;
///         as -o $BASE.o $BASE.s" $REGRFLAGS  -err $BASE.2

target byteorder little;

p () {
	bits32 i, j, k;
	i = j;
	i = bits32[j];
	bits32[i] = j;
	bits32[i] = bits32[j];
	i = %sx32(bits8[j]);
	i = %sx32(bits16[j]);
	i = %zx32(bits8[j]);
	i = %zx32(bits16[j]);
	bits16[i] = %lobits16(j);
	bits8[i]  = %lobits8(j);
	// bits16[i] = %sx16(bits8[j]);  // no 16-bit temps yet
	i = j + k;
	i = j - k;
	i = %and(j, k);
	i = %or(j, k);
	i = %xor(j, k);
	i = bits32[j] + k;
	i = bits32[j] - k;
	i = %and(bits32[j], k);
	i = %or(bits32[j], k);
	i = %xor(bits32[j], k);
	i = j + bits32[k];
	i = j - bits32[k];
	i = %and(j, bits32[k]);
	i = %or(j, bits32[k]);
	i = %xor(j, bits32[k]);
	bits32[i] = j + bits32[k];
	bits32[i] = j - bits32[k];
	bits32[i] = %and(j, bits32[k]);
	bits32[i] = %or(j, bits32[k]);
	bits32[i] = %xor(j, bits32[k]);
	if (j < k) { goto L; }
	if (j <= k) { goto L; }
	if (%leu(j, k)) { goto L; }
   L:   return (99);
}
