# ------------------------------------------------------------------ 
# mkfile for test suite
# $Id$
# ------------------------------------------------------------------ 

TOP =           ..
PATH =          $PATH:$TOP/bin
QC   =          $TOP/bin/qc--$P

<               $TOP/config/config.mk
<               $TOP/config/noweb.mk
<               $TOP/config/c.mk

# ------------------------------------------------------------------ 
# High level virtual targets. 
# all - run all .tst files
# ------------------------------------------------------------------ 

all:V:    test
test:V:   all.dummy.tst $config_arch.test
test.opt:VQ:
	NPROC=1 mk $MKFLAGS QC=../bin/qc--.opt test

x86-linux.test:V: all.x86.tst rt.x86.tst lcc.x86.tst tiger.x86.tst norun.x86.tst
powerpc-darwin.test:V: all.ppc.tst
sparc-solaris.test:V: all.sparc8.tst lcc.sparc8.tst

test-lua:V: testdrv.lua
	$NOTANGLE -L'$file "%F"%N$line %L%N' -Rexample.tst testdrv.nw > example.tst
	$QC testdrv.lua example.tst

clean:V:            
	rm -f *.dvi *.log *.aux *.inc *.tex *.toc

clobber:V: clean
	rm -f testdrv.lua example.tst ocamlprof.dump

# ------------------------------------------------------------------ 
# Rules for individual test cases
# ------------------------------------------------------------------ 

testdrv.lua:D:  testdrv.nw
	$NOTANGLE -L'$file "%F"%N$line %L%N' -R$target $prereq > $target

testdrv.inc:D: testdrv.nw
	$NOWEAVE -delay -filter ../config/autodefs.lua -index testdrv.nw > testdrv.inc

%.tst:VQ: testdrv.lua
	echo "# $QC testdrv.lua $target"
	$QC testdrv.lua $target

opgen.lua:D:  opgen.nw
	$NOTANGLE -L'$file "%F"%N$line %L%N' -R$target $prereq > $target

copgen.lua:D:  copgen.nw ../interp/operator.nw
	($NOTANGLE -L'$file "%F"%N$line %L%N' -R$target copgen.nw
	 ($NOTANGLE -R'macro definitions for converting C to Lua' copgen.nw
	  $NOTANGLE -R'macro synonyms' ../interp/operator.nw
	  $NOTANGLE -R'operator definitions' ../interp/operator.nw
	 ) | cpp | sed '/^#/d'
	) > $target


ctest.opt:VQ:
	mk QC=../bin/qc--.opt ctest
ctest:V: optest
	./optest -v -nan -nan 300000

copgen.c:D: opgen.lua copgen.lua 
	($NOTANGLE -R'type definitions for rounding mode' ../interp/operator.nw
	 ../bin/qc-- opgen.lua copgen.lua
	) > $target

optest: optest.o copgen.o cmmopgen.o
	cc -o $target $prereq -lm

cmmopgen.c--:D: opgen.lua $QC
	$QC opgen.lua -e 'Testgen.emit()' > $target

cmmopgen.o: cmmopgen.c-- $QC
	$QC -c -globals cmmopgen.c--

################################################################

oopgen: oopgen.o
	$CC $CFLAGS -o $target $prereq

ops%.c--:D: oopgen
	./oopgen $stem > $target

'^ops([0-9]*)$':R: ops'\1'.c-- `which $QC`
	$QC -v -globals -o $target ops$stem.c--

'^optest([0-9]*)$':VR: ops'\1'
	./$prereq
