# this is the machine on which the C-- runtime system will execute
TARGET=x86-linux
ASDLGEN=camlGen

NOWEAVE=`echo ${NOWEAVE-noweave}`

# should split into ASDLSOURCES and CAMLSOURCES

ASDLSRC=asm cmmir ast
ASDLSRCDOTDEFS=`echo $ASDLSRC | sed 's/ /.defs /g;s/$/.defs/'`
ASDLSRCDOTTEX=`echo   $ASDLSRC | sed 's/ /.tex /g;s/$/.tex/'`
ASDLSRCDOTASDL=`echo   $ASDLSRC | sed 's/ /.asdl /g;s/$/.asdl/'`
ASDLSRCDOTHTML=`echo   $ASDLSRC | sed 's/ /.html /g;s/$/.html/'`
ASDLSRCDOTNW=`echo   $ASDLSRC | sed 's/ /.nw /g;s/$/.nw/'`
ASDLSRCREGEXP=`echo $ASDLSRC | sed 's/ /|/g'`

OCAMLSRC=sourcemap
OCAMLSRCDOTDEFS=`echo $OCAMLSRC | sed 's/ /.defs /g;s/$/.defs/'`
OCAMLSRCDOTTEX=`echo  $OCAMLSRC | sed 's/ /.tex /g;s/$/.tex/'`
OCAMLSRCDOTML=`echo   $OCAMLSRC | sed 's/ /.ml /g;s/$/.ml/'`
OCAMLSRCDOTMLI=`echo  $OCAMLSRC | sed 's/ /.mli /g;s/$/.mli/'`
OCAMLSRCDOTCMO=`echo   $OCAMLSRC | sed 's/ /.cmo /g;s/$/.cmo/'`
OCAMLSRCDOTCMI=`echo   $OCAMLSRC | sed 's/ /.cmi /g;s/$/.cmi/'`
OCAMLSRCDOTHTML=`echo $OCAMLSRC | sed 's/ /.html /g;s/$/.html/'`
OCAMLSRCDOTNW=`echo   $OCAMLSRC | sed 's/ /.nw /g;s/$/.nw/'`
OCAMLSRCREGEXP=`echo  $OCAMLSRC | sed 's/ /|/g'`



NWLIB1=/usr/public/pkg/noweb/lib
NWLIB2=/usr/local/lib/noweb
NWLIB3=/usr/cs/contrib/lib/noweb
NWLIB4=/usr/local/noweb/lib

# change code to put things in derived locations

HTMLDIR=WWW/
TEXDIR=TEX/

ASDLSRCDOTHTML=`echo $ASDLSRC | sed "s@^@$HTMLDIR@;s@ @.html $HTMLDIR@g;s/\$/.html/"`
OCAMLSRCDOTHTML=`echo $OCAMLSRC | sed "s@^@$HTMLDIR@;s@ @.html $HTMLDIR@g;s/\$/.html/"`

%.g: %.nw
	notangle -L -R$target $prereq | cpif $target


all:V: caml

clean:V: 
	rm -f *.html *~ *.t cm.dot cm.ps cm.eps 
	rm -f *.aux *.dvi *.toc *.ps *.log *.blg
	rm -f *.cmi *.cmo *.o 

clobber:V: clean
	rm -f *.g *.sml *.sig *.ord *.lex *.tab *.mli *.ml *.[ch] *.mly
	rm -f *.tex *.html *.defs cm.gif *.a
	rm -rf CM NW WWW
	rm -f *.asdl

html:V: $ASDLSRCDOTHTML $OCAMLSRCDOTHTML 

################################################################
#
#	counting lines of code

counts:V: count
count:V: $ASDLSRCDOTNW
	PATH="$NWLIB1:$NWLIB2:$NWLIB3:$NWLIB4:$PATH"
	export PATH
	markup $prereq | elide 'refman:*' '\*' | nocount -f



$TEXDIR%.ps: %.dot
	dot -Tps $prereq > $target

%.eps: %.ps
	ps2epsi $prereq $target

$HTMLDIR%.gif: %.dot
	egrep -v '^  (page|size|ratio) = ' $prereq |
	dot -Tgif | giftool -rgb white > $target

WWW:
	mkdir $target 2>/dev/null

^$HTMLDIR($ASDLSRCREGEXP)'\.'html:R: '\1'.nw `echo $HTMLDIR | sed 's@/$@@'`
	echo '\section*{Contents}
	\tableofcontents' |
	$NOWEAVE -filter 'elide refman:*' -filter l2h -autodefs asdl -html -index - $prereq | htmltoc > $target

^$HTMLDIR($OCAMLSRCREGEXP)'\.'html:R: '\1'.nw `echo $HTMLDIR | sed 's@/$@@'`
	echo '\section*{Contents}
	\tableofcontents' |
	$NOWEAVE -filter 'elide refman:*' -filter l2h -html -index - $prereq | htmltoc > $target

${HTMLDIR}index.html: index.nw
	$NOWEAVE -filter l2h -html $prereq | htmltoc | htmlgif > $target


################ defined identifiers (not used here)

^($ASDLSRCREGEXP)'\.'defs:R: '\1'.nw 
	nodefs -auto asdl $prereq > $target

all.defs: $ASDLSRCDOTDEFS 
	sort -u $prereq | cpif $target

################ literate source 

^($ASDLSRCREGEXP)'\.'tex:R: '\1'.nw
	$NOWEAVE -autodefs asdl -index -n $stem1.nw >$target


DOCINPUTS="doc.tex $ASDLSRCDOTTEX"

docin:V: $DOCINPUTS

doc.dvi: $DOCINPUTS

doc.tex: doc.nw
	$NOWEAVE -delay doc.nw >$target

doc_check:V: doc.tex
	for i in $ASDLSRCDOTTEX; do 
	  j=`basename $i .tex`
	  fgrep -s "\include{$j}" doc.tex || echo "$i not in doc" 1>&2
        done

%.nwi: %.tex
	noindex $prereq


###################
#
#  Targets for interfaces

caml:V: $OCAMLSRCDOTCMI $OCAMLSRCDOTCMO asm.cmi asm.cmo iRNode.cmi iRNode.cmo \
	aST.cmi aST.cmo iR.cmi iR.cmo 

CAMLOPTS="-I /home/cellar/nr/zephyr/asdlGen-19990816/src/ocaml"

option.mli: util.nw
	notangle -R$target -L'# %L "%F"%N' $prereq > $target
option.ml: util.nw
	notangle -R$target -L'# %L "%F"%N' $prereq > $target


asm.mli asm.ml asmUtil.mli asmUtil.ml: asm.asdl
	$ASDLGEN --ocaml --pickler=sexp $prereq

rTL.mli rTL.ml: rtl.asdl
	$ASDLGEN --ocaml --pickler=sexp $prereq

iRNode.mli iRNode.ml: rtl.asdl irnode.asdl
	$ASDLGEN --ocaml --pickler=sexp $prereq

iR.mli iR.ml: ir.asdl irnode.asdl rtl.asdl ast.asdl
	$ASDLGEN --ocaml --pickler=sexp $prereq

aST.mli aST.ml aSTUtil.mli aSTUtil.ml: ast.asdl
	$ASDLGEN --ocaml --pickler=sexp $prereq

%.asdl: %.nw
	notangle -R$target -L' --#line %-1L "%F"%N'  $prereq > $target

irnode.asdl: cmmir.nw
	notangle -R$target -L' --#line %-1L "%F"%N'  $prereq > $target
ir.asdl: cmmir.nw
	notangle -R$target -L' --#line %-1L "%F"%N'  $prereq > $target

%.ml: %.nw
	notangle -Rimplementation -L'# %L "%F"%N' $prereq > $target
%.mli: %.nw
	notangle -Rinterface -L'# %L "%F"%N' $prereq > $target

%.cmi: %.mli
	ocamlc $CAMLOPTS -c $stem.mli
%.cmo: %.ml
	ocamlc $CAMLOPTS -c $stem.ml

iRNode.cmi: rTL.cmi
iRNode.cmo: rTL.cmi
iR.cmi: iRNode.cmi
iR.cmo: iRNode.cmi
sourcemap.cmo: option.cmi 


################################################################
#
#	run-time interface

cmmrti.h: rti.nw
	notangle -filter "nocond '$TARGET'" -R$target -L $prereq | cpif $target

rti:V: cmmrti.h
	(echo '#include "cmmrti.h"'; echo 'int garbage = 77;') > rti-test.c
	gcc -ansi -pedantic -Wall -c rti-test.c

	