% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% l2h macro module 1 <a href="#$1.html"><tt>#1.nw</tt></a>(<a href="#$1.dvi">.dvi</a>)
% l2h macro exfile 1 <a href="#$1"><tt>#1</tt></a>
% l2h macro image 1 <img alt="Dependency graph" src="#1.gif" ALIGN=right></img>

\input{../macros.tex}

The Control Operators.
<<ctrlPlus.mli>>=
(* ctrl-plus.ml
   Shift and reset in ocaml.
   Transliteration of Andrzej Filinski's specification in SML/NJ, POPL'94.
   Vincent Balat, Olivier Danvy, and Andrzej Filinski, August 5, 1997 *)

module type ESCAPE =
  sig
    type void
    val coerce : void -> 'a
    val escape : (('a -> void) -> 'a) -> 'a
  end;;

module Escape : ESCAPE
    
module type CONTROL =
  sig
    type ans
    val reset : (unit -> ans) -> ans
    val shift : (('a -> ans) -> ans) -> 'a
  end;;


module Control(A : sig type ans end):CONTROL with type ans = A.ans

@ And their implementation

<<ctrlPlus.ml>>=
(* ctrl-plus.ml
   Shift and reset in ocaml.
   Transliteration of Andrzej Filinski's specification in SML/NJ, POPL'94.
   Vincent Balat, Olivier Danvy, and Andrzej Filinski, August 5, 1997 *)

module type ESCAPE =
  sig
    type void
    val coerce : void -> 'a
    val escape : (('a -> void) -> 'a) -> 'a
  end;;

module Escape : ESCAPE =
  struct
    type void = VOID of void
    let rec coerce (VOID v) = coerce v
    let escape f = Callcc.callcc (fun k -> f (fun x -> Callcc.throw k x))
  end;;

module type CONTROL =
  sig
    type ans
    val reset : (unit -> ans) -> ans
    val shift : (('a -> ans) -> ans) -> 'a
  end;;

module Control(A : sig type ans end): CONTROL
with type ans = A.ans =
  struct
    open Escape
    exception MissingReset
    type ans = A.ans

    let mk  = ref (fun _ -> raise MissingReset)
    let abort x = coerce (!mk x) 

    let reset t = escape (fun k -> let m = !mk 
                                  in mk := (fun r -> (mk := m; k r)); 
                                     abort (t ()))
    let shift h = escape (fun k -> 
      abort (h (fun v -> reset (fun () -> coerce (k v)))))
  end

@ 
