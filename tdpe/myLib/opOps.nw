% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% l2h macro module 1 <a href="#$1.html"><tt>#1.nw</tt></a>(<a href="#$1.dvi">.dvi</a>)
% l2h macro exfile 1 <a href="#$1"><tt>#1</tt></a>
% l2h macro image 1 <img alt="Dependency graph" src="#1.gif" ALIGN=right></img>

\input{macros.tex}

\section{Utilities for the [[option]] type}

[[combApp f [a1;...;an] ]] returns [[Some [b1;...;bn] ]] if [[f ai = Some
bi]] for all [[i]] (even if n=0),  and None otherwise.
<<opOps.mli>>=
val combApp : ('a -> 'b option) -> 'a list -> 'b list option
@

[[findFirst f [a1;...;an] ]] returns [[Some bi]] where [[i]] is the
first such that [[f ai = Some bi]]. Iif no such [[i]] exists, it returns
[[None]].
<<opOps.mli>>=
val findFirst : ('a -> 'b option) -> 'a list -> 'b option
@

[[selectiveReplace f [a1;...;an] ]] returns [[ Some [b1;...;bn]]] where,
for all [[i]], [[bi]] is
\begin{itemize}
\item [[x]] if [[f ai = Some x]],
\item [[ai]] otherwise
\end{itemize}
and there exists some [[ai]] such that [[f ai = Some x]]. Otherwise, it
returns [[None]]
<<opOps.mli>>=
val selectiveReplace : ('a -> 'a option) -> 'a list -> 'a list option
@

These functions are used to manipulate partial functions. They implement
the star and bind operations for the ``option'' (exception) monad.
<<opOps.mli>>=
val star : ('a -> 'b) -> 'a option -> 'b option
val bind : ('a -> 'b option) -> 'a option -> 'b option
val lift : ('a -> 'b) -> 'a -> 'b option
@

\section{Implementation}
The implementation is straightforward.
<<opOps.ml>>=

let rec combApp f =
  function
      [] -> Some []
    | (a::axs) ->
        (match (f a,combApp f axs) with
          (Some b,Some bs) -> Some (b::bs)
        | _ -> None)

let rec findFirst f =
  function
      [] -> None
    | (a::axs) ->
        let v = f a in
        match v with
          Some b -> v
        | None -> findFirst f axs

@ I am purposely careful to impose the order of applications of [[f]] to
the elements of the list.
<<opOps.ml>>=
let selectiveReplace f ls =
  let rec walk =
    function
        [] -> (false,[])
      | a::axs ->
          let v = f a in
          let (success,vs) = walk axs in 
          (match v with
            Some x -> true,x::vs
          | None -> (success,a::vs)) in
  let (success,newls) = walk ls in
  if success then Some newls
  else None

let star f =
  function
      Some x -> Some (f x)
    | None -> None

let bind f =
  function
      Some x -> f x
    | None -> None

let lift f = fun x -> Some (f x)
@ 

