% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% l2h macro module 1 <a href="#$1.html"><tt>#1.nw</tt></a>
% l2h macro exfile 1 <a href="#$1"><tt>#1</tt></a>

\input{macros.tex}

\section{A forward substitution function on RTLs}

This module implements a forward-substitution procedure on RTLs. We are given
two RTLs [[rtl1]] and [[rtl2]], which we assume to be succesive
instructions in an instruction stream. If [[sigma]] is the initial
state of the machine, the effects take place as:
\begin{verbatim}
             rtl1                rtl2
  sigma   ---------> sigma'    --------> sigma''
\end{verbatim}
The procedure returns [[rtl2]] in which references to locations [[l]] in
assigned as [[l <- e]] by [[rtl1]] are replaced with the assigned
expression [[e]]. 

The procedure makes sure that the result of evaluation of [[l]] in
[[sigma]] is identical with the result of evaluation of [[l]] in
[[sigma']]. The same is done for the substituted expression [[e]].

<<rtlSubst.mli>>=

val frwdSubst : Rtl.rtl -> Rtl.rtl -> Rtl.rtl option

@ \section{Implementation}

<<rtlSubst.ml>>=

module R = Rtl.Private
module RPb = Rtl
module RR = Rtl.Revert

let (<) x y = Base.lessthan x y
let (+) x y = Base.add x y

exception DiffNonsense
exception IDontKnowYet
    
let frwdSubst rtl1 rtl2 =
  let (R.Rtl rtl1) = Rtl.Convert.rtl rtl1 in
  let (R.Rtl rtl2) = Rtl.Convert.rtl rtl2 in

@ [[Before]] means evaluated in [[sigma]],
  [[After]] means  evaluated in [[sigma']]
<<rtlSubst.ml>>=

  let constEq c1 c2 =
    match (c1,c2) with
      (R.Bool b1,R.Bool b2) ->
        if b1 then b2
        else not(b2)
    | (R.Bits b1,R.Bits b2) -> (Bitops.eq' b1 b2)
    | (R.Link (s1,w1),R.Link (s2,w2)) -> (s1=s2) && (w1=w2)
    | _ -> false in

  let constBiggerDiff c1 w1 c2 w2 =
    match (c1,c2) with
      (R.Bool b1,R.Bool b2) -> raise DiffNonsense
    | (R.Bits(b1,w1),R.Bits(b2,w2)) -> raise IDontKnowYet
    | (R.Link (s1,w1),R.Link (s2,w2)) -> false (* something I do not know of yet *)
    | _ -> false in
@ Here some approximations are made. I return [[false]] whenever I am
not sure [[true]] holds.
<<rtlSubst.ml>>=
  let rec sameValue expBefore expAfter =
    match expBefore with
      R.Const c1 ->
        (match expAfter with
          R.Const c2 -> constEq c1 c2
        | R.Fetch(locAfter,widthAfter) -> false 
        | R.App(op,oplist) -> false)

    | R.Fetch(locBefore,widthBefore) ->
        (match expAfter with
          R.Const c2 -> false 
        | R.Fetch(locAfter,widthAfter) ->
            (widthBefore=widthAfter &&
             unTouched locAfter widthAfter &&
             sameLoc locBefore locAfter) 
        | R.App(op,oplist) -> false )

    | R.App(op,oplist) -> false
@ The [[expNotWithinDiff]] function tries to establish wether the
defined vicinities of two expressions do not overlap. It conservatively
returns [[true]].
<<rtlSubst.ml>>=
  and expNotWithinDiff expBefore widthBefore expAfter widthAfter =
    (match expBefore with
      R.Const cBefore ->
        (match expAfter with
          R.Const cAfter ->
            constBiggerDiff cBefore widthBefore cAfter widthAfter
        | R.Fetch(loc,width) -> false  
        | R.App(op,exs) -> false )

    | R.Fetch(loc,width) -> false 
    | R.App(op,exs) -> false)
              
  
  and sameLoc locBefore locAfter =
    (match (locBefore,locAfter) with
      (R.Cell(space1,agg1,width1,expBefore,assrt1),
       R.Cell(space2,agg2,width2,expAfter,assrt2))
      when space1=space2 &&
        width1 = width2 && (* here we may do some more ... *)
        sameValue expBefore expAfter -> true
    | _ -> false)

  and noOverlap locBefore widthBefore locAfter widthAfter =
    match (locBefore,locAfter) with
      (R.Cell(space1,agg1,width1,expBefore,assrt1),
       R.Cell(space2,agg2,width2,expAfter,assrt2)) ->
         if (space1=space2)
         then expNotWithinDiff expBefore widthBefore expAfter widthAfter
         else false
    | (_,_) -> true

  and unTouched locAfter widthAfter =
    List.for_all (fun (e,eff) ->
      match eff with
        R.Store(l,e,w) -> noOverlap l w locAfter widthAfter
      | R.Kill l -> noOverlap l (Rtlutil.locwidth' l) locAfter widthAfter) rtl1 in
  
  let rec locReplaceExp loc exp_source width_source exp_dest =
    match exp_dest with
      R.Const c -> exp_dest
    | R.Fetch (locAfter,width_dest)
      when width_dest = width_source && (* here we can probably do better ... *)
        (sameLoc loc locAfter) &&
        sameValue exp_source exp_source -> exp_source
    | R.Fetch (_,_) -> exp_dest
    | R.App(op, explist) ->
        R.App(op,List.map (locReplaceExp loc exp_source width_source) explist) in
  
  let rec locReplaceEff l e w eff =
    match eff with
      R.Store(l1,e1,w1) -> R.Store(l1,locReplaceExp l e w e1,w1)
    | R.Kill l -> eff in
  
  (* for the moment we ignore guards *)
  
  let locReplaceRtl l e w rtl =
    List.map (function (g,eff) -> (g,locReplaceEff l e w eff)) rtl in

  let substEffect (g,eff) rtl = 
    match eff with
      R.Store(l,e,w) -> locReplaceRtl l e w rtl
    | R.Kill l -> rtl

  in Some (RR.rtl (R.Rtl (List.fold_right substEffect rtl1 rtl2)))


@ 
