
To compile the code in this directory you will need the OCaml source
code (and the other tools needed for qc--). Your OCaml compiler should
be obtained by compiling the same version of the source code. Use the
"OCAMLSOURCES" variable in the mkfile to control the location of your
local instalation of the OCaml source code. I suggest the OCaml-3.00
version.

   (The source code is needed to compile an external object function
    which is used to implement a stack-copying callcc (experimental
    code due to Xavier Leroy).  The implementation of TDPE we use is
    based on "callcc". To compile the object functiuon (C code), you
    need the source code of the OCaml compiler.)

Due to the use of callcc, the program here can be compiled only to
bytecode, and not to native code. 

Compilation:

  - Do a "mk clean" at the top-level of the qc-- distribution. This is
    needed in order to remove the .ml and .mli source code of the
    evaluating instantiations in the "/src" directory. Running "mk" in
    this directory will extract the residualising instantiations from
    the same Noweb files.

  - run "mk".

mkfile variables:

  - The "MACHINE" variable determines the target machine-instruction
    set. The machine-dependent code is expected to be placed in an
    identically-named sub-directory.

    For the moment, machine-dependent code is provided for two
    instruction sets: 101 (a simplistic calculator) and a simplified
    version of Sparc instruction set.


Command line-options:

   - run "main -help" for a list of options.

Documentation:

To read the documentation, run "mk html" and start with main.html.

----------------------------------------

If you want to generate residualizing instances for _other instruction
sets_, get the SML code from CVS:

cvs -d ~damian/Repository co nbegen

and run it with the appropriate parameters.

Be warned: even if you do that, it will still not compile. You need to
generate the encoder and the recognizer with the toolkit. Even then,
the generated code needs to be edited by hand to compile properly.

The generation of residualizing instances of machine instructions is
still in the works.

----------------------------------------

Questions, problems? Mail to <damian@eecs.harvard.edu>.



