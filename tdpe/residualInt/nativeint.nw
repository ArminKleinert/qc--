% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% l2h substitution C C--
% l2h substitution PAL C--
% l2h substitution asdl ASDL
% l2h substitution ocaml OCaml
% l2h substitution forall forall

\section{Residualizing instantiations of native  ints}

<<nativeint.mli>>=
type nativeint = Base.std_nativeint

val shift_right_logical : nativeint -> int -> nativeint
val shift_left : nativeint -> int -> nativeint
val shift_right : nativeint -> int -> nativeint

<<nativeint.ml>>=

module Sy = Syntax
module T = Tdpe

type nativeint = Base.std_nativeint
    
(*let shift_right_logical e1 n =
  match e1 with
    Sy.NINT x -> Sy.NINT (OldNInt.shift_right_logical x n)
  | _ -> T.nbe' (T.arrow(T.a',T.arrow(T.a',T.a'))) (S.VAR "Nativeint.shift_right_logical") e1 (Sy.INT n)

let shift_left e1 n =
  match e1 with
    Sy.NINT x -> Sy.NINT (OldNInt.shift_left x n)
  | _ -> T.nbe' (T.arrow(T.a',T.arrow(T.a',T.a'))) (S.VAR "Nativeint.shift_left") e1 (Sy.INT n)*)

let shift_right_logical e1 n =
  T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.a'))) (Sy.VAR "Nativeint.shift_right_logical") e1 (Sy.INT n)

let shift_left e1 n =
  T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.a'))) (Sy.VAR "Nativeint.shift_left") e1 (Sy.INT n)
let shift_right e1 n =
  T.nbe' (T.arrowN(T.a',T.arrowN(T.a',T.a'))) (Sy.VAR "Nativeint.shift_right") e1 (Sy.INT n)
@       
