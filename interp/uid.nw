% -*- mode: Noweb; noweb-code-mode: c-mode -*- %

This document contains the interface and implementation of unique identifiers (uids).

% ----------------------------------------------------------------------------
\section{Interface}
% ----------------------------------------------------------------------------

<<uid.h>>=
#ifndef _UID_H
#define _UID_H

<<type definitions>>
<<function prototypes>>

#endif /* _UID_H */
@ 

% ----------------------------------------------------------------------------
\subsection{Data Structures}
% ----------------------------------------------------------------------------

We represent $uid$'s as indicated above: with a thread id and a frame id.  For ease of thread identification, we choose to actually make the thread id a pointer to the structure representing the current thread.  The pointer is of type [[void *]] because of mutually recursive definition dependencies among types [[uid]] and [[thread]].
<<type definitions>>=
typedef struct {
  void         *thread;
  unsigned int  frame;
} uid;
@ 

% ----------------------------------------------------------------------------
\subsection{Utility Functions}
% ----------------------------------------------------------------------------

Some helper functions assist in managing unique identifiers.  [[new_uid]] returns a new unique identifier for an activation in the given thread.  [[dies_uid]] registers the given [[uid]] as dead, and [[islive_uid]] returns 0 if and only if the given [[uid]] is dead.
<<function prototypes>>=
uid    new_uid(void *t);
void   dies_uid(uid u);
void   dies_uid_range(uid newest, uid oldest);
int    islive_uid(uid u);
@ 

% ----------------------------------------------------------------------------
\section{Implementation}
% ----------------------------------------------------------------------------

<<uid.c>>=
#include "uid.h"

#include <assert.h>
#include "intervals.h"
#include "thread.h"

<<function definitions>>
@

% ----------------------------------------------------------------------------
\subsection{Utility Functions}
% ----------------------------------------------------------------------------

Given a thread, we construct a new [[uid]] by finding the next frame id to be issued in the thread and cast the thread pointer to a [[void *]].
<<function definitions>>=
uid new_uid(void *t) {
  thread *th = (thread *) t;
  uid     u;

  u.thread = t;
  u.frame  = th->next_frame_id++;

  return u;
}
@ 
When the death of a [[uid]] is signalled, we must add its [[frame_id]] to the [[dead_list]] of the [[thread]].
<<function definitions>>=
void dies_uid(uid u) {
  thread *t = find_thread(u);
  assert(t != NULL);  /* this can't happen */

  t->dead_list = interval_list_add(t->dead_list, u.frame, u.frame);
}
@ 
To kill off an entire range of [[uid]]s, we use [[dies_uid_range]].
<<function definitions>>=
void   dies_uid_range(uid newest, uid oldest) {
  thread *t = find_thread(newest);

  /* these can't happen */
  assert(t != NULL);
  assert(t == find_thread(oldest));

  t->dead_list = interval_list_add(t->dead_list, oldest.frame, newest.frame);  
}
@ 
To determine if a [[uid]] is still live, we must simply check if its frame id is listed in the [[dead_list]] of the [[thread]] pointed to by its thread id.
<<function definitions>>=
int islive_uid(uid u) {
  thread *t = find_thread(u);
  assert(t != NULL);  /* this can't happen */

  return !interval_list_member(t->dead_list, u.frame);
}
@ 
