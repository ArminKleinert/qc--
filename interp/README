---------------------------------------------------------------------
QC-- Interpreter
---------------------------------------------------------------------

Known Issues/Thoughts/Worries ::

 [translation from compiler]

    * Stackdata translation unimplemented!
    * "Cut to" is not properly translated
      (assertions fail, labels are not found, translation is wrong, etc.)!
    * Continuations are not properly translated
      (see above; also, continuations must be specially defined with
       define_continuation assembly instruction--define_label is not good
       enough for interpreter as of now)!

    * Rounding modes are currently being translated...
    * Interpreter is not told correct number of global registers.

    * Multiple returns have not been tested 
      (contingent upon continuations; see above)

    * Multiple variable assignment has not been tested.
    * Translation of guarded-RTLs is not tested.

 [client]

    * Not all C standard library functions are registered.  In fact, only a
      few are (e.g., malloc, free, printf, exit, and others).
    * The registration of printf is special yet is not documented.

 [runtime system]

    * Cmm_FindStackData is unimplemented.
    * Cmm_RunThread is no longer in the language definition, yet is required by
      this implementation in order to run a thread.
    * We use static boot-up code to pass an argument off to an initial C--
      procedure; unfortunately, this means that a newly created thread would
      be suspended at the boot-up procedure and not the initial procedure.
      This would be noticeable when observed through the runtime system.

 [interpreter]

    * It is unclear how stackdata access is to be handled in the interpreter;
      this is strongly dependent on how the compiler will be able to inform
      the interpreter of stackdata labels, sizes and of how references to
      stackdata labels will be successfully translated to interpreter Lua
      code
    * Mutual dependencies among separate assembly units is not allowed for now.
    * When calls are made from a C-- procedure to a C-- procedure, the caller's
      activation record indicates that it is suspended at (has a PC of) the
      address of the instruction immediately following the call--not at the
      call site itself.
      This would be noticeable when observed through the runtime system.
    * Not all common C function signatures are registered; this will need to
      be modified in order to accomodate more varied sorts of C functions.
    * 64-bit ints are not currently supported, nor are floats larger than
      32-bits wide.
    * Cuts across different threads are 100% untested; unexpected behavior
      might occur.
          - Consider this situation: a procedure 'p' contains a continuation
            'cont'.  At runtime, an activation of 'p' calls itself, and
            then that activation calls itself--leaving 3 live activations.
            When this youngest activation of 'p' cuts to 'cont', which
            activation record is cut to?  Which activation record would the
            interpreter as it is now cut to?
    * LIMITCHECK instruction unimplemented.
    * BUG : span token must be a positive integer (0 does not work!)

