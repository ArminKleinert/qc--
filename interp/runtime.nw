\section{Introduction}
This document contains the interface and implementation of the {\PAL} run-time system, as explained in CVS revision 1.59 of the {\PAL} Reference Manual.
Please see the manual for detailed information about the functions contained herein.
\section{{\PAL} Runtime System Interface}
\subsection{Types}
<<faux type declarations>>=
typedef Cmm_Codeptr;
typedef Cmm_Dataptr;
typedef Cmm_Word;

typedef Cmm_Activation;
typedef Cmm_Cont;
@
\subsection{Creating and Running a Thread}
[[Cmm_CreateThread]] returns a {\PAL} continuation that will execute the {\PAL} call [[f(x)]], when run.
UPDATE this
<<faux {\PAL} prototypes>>=
bits32, bits32 CreateThread(bits32 f, bits32 x, bits32 s, bits32 n);
@ 
<<function prototypes>>=
Cmm_Cont       *Cmm_CreateThread(Cmm_Codeptr f, Cmm_Dataptr s, 
                                 Cmm_Dataptr s_limit,
                                 Cmm_Dataptr *limit_cookie);
Cmm_Cont       *Cmm_RunThread   (Cmm_Cont *k);
@ 
\subsection{Walking the Stack}
<<function prototypes>>=
Cmm_Activation *Cmm_YoungestActivation(const Cmm_Cont *t);
int             Cmm_isOldestActivation(const Cmm_Activation *a);
Cmm_Activation *Cmm_NextActivation(const Cmm_Activation *a);
int             Cmm_ChangeActivation(Cmm_Activation *a);
void           *Cmm_FindLocalVar(const Cmm_Activation *a, unsigned n);
unsigned        Cmm_localVarCount(const Cmm_Activation *a);
void           *Cmm_FindDeadLocalVar(const Cmm_Activation *a, unsigned n);
Cmm_Dataptr     Cmm_GetDescriptor(const Cmm_Activation *a, Cmm_Word token);
@ 
\subsection{The Global Registers}
<<faux {\PAL} prototypes>>=
RestoreGlobals( bits32 gp );
SaveGlobals( bits32 gp );
%GlobalSize
@ 
<<function prototypes>>=
void           *Cmm_FindGlobalVar(int n);
unsigned        Cmm_GlobalCount  (void);
unsigned        Cmm_GlobalSize   (void);
@ 
\subsection{Controlling the Interpreter}
DOCUMENT
<<function prototypes>>=
int  Cmm_open(int valstack_size, int argstack_size);
void Cmm_close();
@ 
\section{Implementation}
The header file for the {\PAL} runtime system is contained within [[runtime.h]].
<<runtime.h>>=
#ifndef _RUNTIME_H
#define _RUNTIME_H

#include "interp.h"

<<type definitions>>

<<declarations for external definitions>>
<<function prototypes>>

#endif /* _RUNTIME_H */
@ 
We import a few values from [[interp.m]]; namely, the number of globals in the loaded {\PAL} code, the array in which the {\PAL} global values are actually stored, and the Lua tag we use to store [[span]] values in our Lua span tables.
<<declarations for external definitions>>=
extern int    num_globals;
extern value *globals;
extern int    lua_CMM_span_value_tag;
@
The implementation of the {\PAL} runtime system is contained within [[runtime.c]].
<<runtime.c>>=
#include "runtime.h"

<<thread functions>>
<<stack-walking functions>>
<<global register functions>>
<<controlling the interpreter>>
@ 
\subsection{Types}
The types used in the runtime system's interface are all [[typedef]]'d in reality.
We actually use a [[CMM_label]] to represent a code pointer so that we can easily pass more information than simply a program counter (e.g., we can also pass around [[procedure]] records).
<<type definitions>>=
typedef CMM_label   *Cmm_Codeptr;
@ 
[[Cmm_Dataptr]] and [[Cmm_Activation]] are simply renamed (and capitalized) versions of their counterparts ([[dataptr]] and [[activation]]).
<<type definitions>>=
typedef dataptr      Cmm_Dataptr;
typedef activation   Cmm_Activation;
@ 
The next type definition is confusing, though.  A [[Cmm_Cont]] is actually a [[thread]]; we need to keep track of more information than simply a stack pointer and a program counter.
<<type definitions>>=
typedef thread       Cmm_Cont;
@ 
\subsection{Creating and Running a Thread}
The work of creating a thread is farmed out to [[init_thread]], as defined in [[interp.nw]]; and the work of running a thread is taken care of by similarly defined [[run_interp]].
\emph{FIX: for the moment, it is unclear what exactly [[Cmm_RunThread]] should return, if anything at all.}
<<thread functions>>=
Cmm_Cont *Cmm_CreateThread(Cmm_Codeptr f, Cmm_Dataptr s, Cmm_Dataptr s_limit,
                           Cmm_Dataptr *limit_cookie) {
  thread *t = init_thread(f, s, s_limit);
  *limit_cookie = (Cmm_Dataptr) t->callstack_base;
  return (Cmm_Cont *) t;
}

Cmm_Cont *Cmm_RunThread (Cmm_Cont *k) {
  run_interp((thread *) k);

  /* URGENT FIX what should the return of this function be? */
  return NULL;
}
@ 
\subsection{Walking the Stack}
Walking the stack is very easy, given our representation of activation stacks.
To find the youngest activation, determine if an activation is the oldest in its thread, and to find the activation of a given activation's caller we do some pointer arithmetic; this arithmetic, of course, relies on the stacks' direction of growth.
<<stack-walking functions>>=
Cmm_Activation *Cmm_YoungestActivation(const Cmm_Cont *t) {
  assert(t->callstack_free > t->callstack_base);
  return (Cmm_Activation *) (t->callstack_free - 1);
}

int Cmm_isOldestActivation(const Cmm_Activation *a) {
  thread *t = find_thread(a->u);
  return (t->callstack_free == t->callstack_base + 1);
}

Cmm_Activation *Cmm_NextActivation(const Cmm_Activation *a) {
  if (Cmm_isOldestActivation(a)) {
    cmm_err("[runtime system] already at oldest activation in thread");
  }

  return (Cmm_Activation *) (a - 1);
}
@ 
DOCUMENT
\emph{These functions are unimplemented and fail assertions for now.}
<<stack-walking functions>>=
int Cmm_ChangeActivation(Cmm_Activation *a) {
  assert(0);

  /* CODE HERE */
  return 0;
}

void *Cmm_FindLocalVar(const Cmm_Activation *a, unsigned n) {
  assert(0);

  /* CODE HERE */
  return NULL;
}

unsigned Cmm_localVarCount(const Cmm_Activation *a) {
  assert(0);

  /* CODE HERE */
  return 0;
}

void *Cmm_FindDeadLocalVar(const Cmm_Activation *a, unsigned n) {
  assert(0);

  /* CODE HERE */
  return NULL;
}
@
Finding a descriptor is harder.
[[Cmm_GetDescriptor]] must look up the given [[token]] in the Lua span table of the given activation's thread; moreover, it must look for the innermost (table entry with greatest index) value associated with the token.
<<stack-walking functions>>=
Cmm_Dataptr Cmm_GetDescriptor(const Cmm_Activation *a, Cmm_Word token) {
  thread    *t = find_thread(a->u);
  lua_State *L = t->span_table.L;
  int        n;
  CMM_label *lbl;

  lua_pushtable(L, t->span_table);
  lua_pushnumber(L, (double) token);
  lua_gettable(L, -2);

  if (!lua_istable(L, -1) || (n = lua_getn(L, -1)) <= 0) {
    lua_pop(L, 2); /* pop non-table val, table */
    return (Cmm_Dataptr) 0;
  }
  lua_rawgeti(L, -1, n);
  if (!lua_isuserdata(L, -1) ||
      lua_tag(L, -1) != lua_CMM_span_value_tag ||
      (lbl = lua_touserdata(L, -1)) == NULL)
  {
    /* FIX this shouldn't really happen; maybe we should assert */
    lua_pop(L, 3); /* pop bogus val, 2 tables */
    return (Cmm_Dataptr) 0;
  }
  lua_pop(L, 3);   /* pop lbl, 2 tables */

  return (Cmm_Dataptr) (location(CMM_label_raddr(lbl)));
}
@ 
\subsection{The Global Registers}
We have full access to the global variables, so these three functions for accesing the global registers are easy to implement in their present form.
<<global register functions>>=
void *Cmm_FindGlobalVar(int n) {
  return (void *) (globals + n);
}
unsigned Cmm_GlobalCount(void) {
  return (num_globals < 0 ? 0 : (unsigned) num_globals);
}
unsigned Cmm_GlobalSize(void) {
  return Cmm_GlobalCount() * sizeof(value);
}
@ 
\subsection{Controlling the Interpreter}
So we can better control how the runtime system fits in with the interpreter, we wrap the interpreter's [[cmm_interp_open]] and [[cmm_interp_close]] functions.
For one thing, this allows us to register select C functions in the runtime system with the interpreter (to be called from {\PAL}), while keeping the interpreter's implementation otherwise ignorant of the runtime system.
<<controlling the interpreter>>=
int Cmm_open(int valstack_size, int argstack_size) {
  return cmm_interp_open(valstack_size, argstack_size);

  /* register runtime functions with C-- */
  /* FINISH this */
}

void Cmm_close() {
  cmm_interp_close();
}
@ 
