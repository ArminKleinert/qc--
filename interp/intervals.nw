% -*- mode: Noweb; noweb-code-mode: c-mode -*- %

This document contains the interface and implementation of a simple collection of functions for representing lists of integer intervals in C.

Here is the interface to this collection:

<<function prototypes>>=
interval_list *interval_list_new   (void);
interval_list *interval_list_add   (interval_list *list, unsigned int lower,
								    unsigned int upper);
interval_list *interval_list_remove(interval_list *list, unsigned int i);
int            interval_list_member(interval_list *list, unsigned int i);
void           interval_list_free  (interval_list *list);
void           interval_list_print (interval_list *list);
@ 

A sample client of this interface might be:

<<sample client>>=
interval_list *i = interval_list_new(); /* creates empty interval list i    */

i = interval_list_add(i, 4, 5);         /* adds the interval [4, 5] to i    */
i = interval_list_add(i, 12, 13);       /* adds the interval [12, 13] to i  */

if (interval_list_member(i, 12))        /* should print out the string      */
	 printf("This works!  12 is in i!\n");

interval_list_print(i);                 /* prints the intervals in the list */
interval_list_free(i);                  /* frees the list                   */
@ 

Note that [[interval_list_add]] returns a pointer to the beginning of the list (which might have changed during the add operation).

And now for the implementation:

<<intervals.h>>=
#include <stdio.h>
#include <assert.h>

#define min(X,Y) ((X) < (Y) ? (X) : (Y))
#define max(X,Y) ((X) > (Y) ? (X) : (Y))

typedef struct interval_list_t {
  unsigned int lower;
  unsigned int upper;

  struct interval_list_t *next;
} interval_list;

<<function prototypes>>
@ 

And the C code:

<<intervals.c>>=
#include "intervals.h"

/* intervals are specified with inclusive endpoints (i.e., [lower, upper]) */

interval_list *interval_list_new(void) {
  return NULL;
}

interval_list *interval_list_add(interval_list *list, unsigned int lower, 
								 unsigned int upper)
{
  interval_list *temp, *last, *free_temp;
  interval_list *beg = NULL;
  interval_list *new;

  for (temp = list, last = NULL; temp != NULL; last = temp, temp = temp->next)
  {
	if (upper < temp->lower - 1) {
	  if (beg == NULL) {
		new = (interval_list *) malloc(sizeof(interval_list));
		assert(new != NULL);
		new->next  = temp->next;
		new->lower = lower;
		new->upper = upper;
		if (last == NULL)
		  return new;
		else {
		  last->next = new;
		  return list;
		}
	  } else {
		beg->upper = max(upper, last->upper);
		beg->next  = temp;

		for (free_temp = beg->next, last = beg; 
			 free_temp != NULL && free_temp != temp;
			 last = free_temp, free_temp = free_temp->next)
		  free(last);
		free(last);

		return list;
	  }
	}

	if (lower >= temp->lower && upper <= temp->upper)
	  return list;

	if ((lower <= temp->lower - 1 || lower <= temp->upper + 1) && beg == NULL)
	  beg      = temp;
  }

  if (beg == NULL) {
	new = (interval_list *) malloc(sizeof(interval_list));
	assert(new != NULL);
	new->next = NULL;
	new->lower = lower;
	new->upper = upper;
	if (last == NULL)
	  return new;
	else {
	  last->next = new;
	  return list;
	}
  } else {
	beg->next  = NULL;
	beg->lower = min(lower, beg->lower);
	beg->upper = max(last->upper, upper);

	for (free_temp = beg->next, last = beg; 
		 free_temp != NULL && free_temp != temp;
		 last = free_temp, free_temp = free_temp->next)
	  free(last);
	free(last);	

	return list;
  }
}

interval_list *interval_list_remove(interval_list *list, unsigned int i) {
  interval_list *last, *temp;
  interval_list *new;

  for (temp = list, last = NULL; temp != NULL; last = temp, temp = temp->next)
  {
	if (i == temp->lower && i == temp->upper) {
	  if (last == NULL)
		return temp->next;
	  last->next = temp->next;
	  return list;
	}

	if (i == temp->lower) {
	  temp->lower++;
	  return list;
	}

	if (i == temp->upper) {
	  temp->upper--;
	  return list;
	}

	if (i > list->lower && i < list->upper) {
	  new = (interval_list *) malloc(sizeof(interval_list));
	  assert(new != NULL);
	  new->next   = temp->next;
	  new->lower  = temp->lower;
	  new->upper  = i - 1;
	  temp->lower = i + 1;

	  if (last == NULL)
		return new;
	  
	  last->next = new;
	  return list;
	}
  }

  return list;
}

int interval_list_member(interval_list *list, unsigned int i) {
  for ( ; list != NULL; list = list->next)
	if (i >= list->lower && i <= list->upper)
	  return 1;

  return 0;
}

void interval_list_free(interval_list *list) {
  interval_list *last;

  for (last = NULL; list != NULL; last = list, list = list->next)
	if (last != NULL)
	  free(last);

  free(last);
}

void interval_list_print(interval_list *list) {
  for ( ; list != NULL; list = list->next)
	printf("[%u, %u]\n", list->lower, list->upper);
}
@ 
