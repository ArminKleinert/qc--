% -*- mode: Noweb; noweb-code-mode: c-mode -*- %

This document contains the interface and implementation of tables; these ``tables'' are essentially wrappers for Lua tables.

% ----------------------------------------------------------------------------
\section{Interface}
% ----------------------------------------------------------------------------

<<table.h>>=
#ifndef _TABLE_H
#define _TABLE_H

#include <assert.h>

#include <lua.h>
#define  LUA_LOCK 1

<<type definitions>>
<<macro definitions>>
<<function prototypes>>

#endif /* _TABLE_H */
@ 

% ----------------------------------------------------------------------------
\subsection{Data Structures}
% ----------------------------------------------------------------------------

We choose to use tables (dynamic, associative arrays) in our representation of various pieces of data.
The [[table]] data structure allows us to encapsulate all information we need to know about a given table.
<<type definitions>>=
typedef struct {
  lua_State  *L;      /* the Lua interpreter in which this reference works */
  int        data;    /* this is a Lua reference to a Lua table */
} table;
@ 
These tables are actually stored using embedded Lua tables that may be manipulated using the following convenience macros.

% ----------------------------------------------------------------------------
\subsection{Utility Helpers}
% ----------------------------------------------------------------------------

[[fresh_table]] creates a new [[table]] structure with properly initialized data members.
[[free_table_data]] frees the data stored in a [[table]] structure, but does \emph{not} free the argument [[table]] structure itself.
[[lua_pushtable]] pushes a copy of the given table atop the Lua stack.
[[lua_table_foreach]] evaluates Lua function named in string [[str]] for each element in table [[t]]; it returns a Lua error code.

<<function prototypes>>=
table fresh_table(void);
@ 

<<faux prototypes>>=
void  free_table_data  (lua_State *L, table t);
void  lua_pushtable    (lua_State *L, table t);
int   lua_table_foreach(lua_State *L, table t, const char *str);
@ 

Note that a couple of the most important tables are stored globally.

% ----------------------------------------------------------------------------
\section{Implementation}
% ----------------------------------------------------------------------------

<<table.c>>=
#include "table.h"
#include <assert.h>

<<function definitions>>
@

% ----------------------------------------------------------------------------
\subsection{Utility Functions}
% ----------------------------------------------------------------------------

[[fresh_table]] simply creates a fresh [[table]] structure, initializes its Lua table reference to [[LUA_NOREF]] and its [[lua_State *]] to [[NULL]].

<<function definitions>>=
table fresh_table(void) {
  table new_table;

  new_table.L    = NULL;
  new_table.data = LUA_NOREF;

  return new_table;
}
@ 

% ----------------------------------------------------------------------------
\subsection{Utility Macros}
% ----------------------------------------------------------------------------

We write a few macros to make it easier to deal with tables stored in Lua.
[[lua_pushtable]] looks for the table referred to by a given [[table]] structure; if it does not exist, the table is created as a global variable in the given Lua interpreter.
Either way, the table is left atop the Lua stack.
Note that a [[table]] structure must be passed in, not a [[table *]] pointer to one.

<<macro definitions>>=
#define lua_pushtable(LS, TAB) \
if ((TAB).data == LUA_NOREF || (TAB).data == LUA_REFNIL) { \
  lua_newtable((LS)); \
  (TAB).L    = (LS); \
  (TAB).data = lua_ref((LS), LUA_LOCK); \
  assert((TAB).data != LUA_NOREF && (TAB).data != LUA_REFNIL); \
} \
assert(lua_getref((LS), (TAB).data));
@

[[free_table_data]] simply releases the lock on and effectively throws away the Lua table storing a given [[table]] structure's data.
Here also, a [[table]] structure itself must be passed in, and not a [[table *]].

<<macro definitions>>=
#define free_table_data(L, TAB) \
if ((TAB).data != LUA_NOREF && (TAB).data != LUA_REFNIL) { \
  lua_unref((L), (TAB).data);  \
  (TAB).L    = NULL;           \
  (TAB).data = LUA_NOREF;      \
}
@
