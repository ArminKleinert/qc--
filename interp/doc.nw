\documentclass[twoside]{report}
\usepackage{noweb}
\title{The Quick {\PAL} Interpreter}
\author{Reuben Olinsky}
\usepackage{tabularx,array} 
\usepackage{hyperref}
\usepackage{path}
\usepackage{amsmath}
\usepackage{grammar}
\usepackage[dvips]{graphicx}  
\input{../config/macros.tex}
\pagestyle{noweb}
\usepackage{alltt}
\begin{document} 

\pagenumbering{roman}
\maketitle
\cleardoublepage
\tableofcontents
\cleardoublepage
\pagenumbering{arabic}


\newcommand\myinput[1]{\cleardoublepage\input{#1}}

\chapter{Known Issues/Thoughts/Worries}

\paragraph{Translation from compiler}
\begin{itemize}
    \item  Stackdata translation unimplemented!
    \item  "Cut to" is not properly translated
      (assertions fail, labels are not found, translation is wrong, etc.)!
    \item  Continuations are not properly translated
      (see above; also, continuations must be specially defined with
       [[define_continuation]] assembly instruction---[[define_label]] is not good
       enough for interpreter as of now)!

    \item  Rounding modes are currently being translated...
    \item  Interpreter is not told correct number of global registers.

    \item  Multiple returns have not been tested 
      (contingent upon continuations; see above)

    \item  Multiple variable assignment has not been tested.
    \item  Translation of guarded-RTLs is not tested.
\end{itemize}

 \paragraph{client}

\begin{itemize}
    \item  Not all C standard library functions are registered.  In fact, only a
      few are (e.g., malloc, free, printf, exit, and others).
    \item  The registration of printf is special yet is not documented.
\end{itemize}

 \paragraph{runtime system}
\begin{itemize}
    \item  [[Cmm_FindStackData]] is unimplemented.
    \item  [[Cmm_RunThread]] is no longer in the language definition, yet is required by
      this implementation in order to run a thread.
    \item  We use static boot-up code to pass an argument off to an initial {\PAL}
      procedure; unfortunately, this means that a newly created thread would
      be suspended at the boot-up procedure and not the initial procedure.
      This would be noticeable when observed through the runtime system.
\end{itemize}

 \paragraph{interpreter}
\begin{itemize} 
    \item  It is unclear how stackdata access is to be handled in the interpreter;
      this is strongly dependent on how the compiler will be able to inform
      the interpreter of stackdata labels, sizes and of how references to
      stackdata labels will be successfully translated to interpreter Lua
      code
    \item  Mutual dependencies among separate assembly units is not allowed for now.
    \item  When calls are made from a {\PAL} procedure to a {\PAL} procedure, the caller's
      activation record indicates that it is suspended at (has a PC of) the
      address of the instruction immediately following the call---not at the
      call site itself.
      This would be noticeable when observed through the runtime system.
    \item  Not all common C function signatures are registered; this will need to
      be modified in order to accomodate more varied sorts of C functions.
    \item  64-bit ints are not currently supported, nor are floats larger than
      32-bits wide.
    \item  Cuts across different threads are 100% untested; unexpected behavior
      might occur.
          - Consider this situation: a procedure 'p' contains a continuation
            'cont'.  At runtime, an activation of 'p' calls itself, and
            then that activation calls itself---leaving 3 live activations.
            When this youngest activation of 'p' cuts to 'cont', which
            activation record is cut to?  Which activation record would the
            interpreter as it is now cut to?
    \item  LIMITCHECK instruction unimplemented.
    \item  BUG : span token must be a positive integer (0 does not work!)
\end{itemize}

\chapter{All the interfaces}
\input{interfaces.inc}

\let\origsection\section
\let\origsubsection\subsection
\let\origsubsubsection\subsubsection
\let\subsubsection\subsection
\let\subsection\section
\let\section\chapter

\part{Modules with interfaces}
\input{manual.inc}
\input{client.inc}
\input{types.inc}
\input{value.inc}
\input{stack.inc}
\input{lualink.inc}
\input{table.inc}
\input{intervals.inc}
\input{uid.inc}
\input{activation.inc}
\input{controlflow.inc}
\input{label.inc}
\input{thread.inc}
\input{assemblyunit.inc}
\input{encoding.inc}
\input{interp.inc}
\input{operator.inc}
\input{ccall.inc}
\input{span.inc}
\input{disasm.inc}
\input{runtime.inc}

\part{Unused stuff}
\input{opgen.inc}

\end{document}
