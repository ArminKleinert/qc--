#
# Quick C-- Interpreter
#

NAME     = qc--interp
VERSION  = `date +%Y%m%d`

# ------------------------------------------------------------------
# paths
# ------------------------------------------------------------------

TOP      = ..
LIBDIR   = /home/lair/olinsky/lib
BINDIR   = ../bin

LUALIBS  = $LIBDIR/liblua.a $LIBDIR/liblualib.a
TOOLS    = /home/lair/olinsky/bin/tools

# ------------------------------------------------------------------
# main targets
# ------------------------------------------------------------------

INTERP   = evaluating
DEPEND   = $CC -MM $INCLUDES

all:V:     $NAME
update:V:  $BINDIR/$NAME

depend:V:  $DEPEND

test:VQ:
           cd test/
           mk $MKFLAGS test
           cd ..

clean:V:
           rm -f *.o clients/*.o

clobber:V: clean
	       rm -f *.blg *.log *.dvi *.inc *.toc *.aux 
           rm -f clients/*.blg clients/*.inc
	       rm -f $NWTEXFILES interfaces.nw clients/gc.tex prof.out core *~
           rm -f $NAME clients/gc_client
           rm -f *.m *.i decode.fetch bytecode.sled clients/*.i
           rm -f $COREHDRS $INTERPSRCS
           rm -f $CLIENTHDRS $CLIENTSRCS

# ------------------------------------------------------------------
# important file sets
# ------------------------------------------------------------------

NWFILES    = `echo *.nw`

COREHDRS   = activation.h \
             assemblyunit.h \
             ccall.h \
             controlflow.h \
             disasm.h \
             encode.h \
             encoding.h \
             interp.h \
             intervals.h \
             label.h \
             lualink.h \
             machine.h \
             operator.h \
             runtime.h \
             span.h \
             stack.h \
             table.h \
             thread.h \
             types.h \
             uid.h \
             value.h

EXTSRCS    = arena.c \
             assert.c \
             atom.c \
             except.c \
             mclib.c \
             mem.c

INTERPSRCS = assemblyunit.c \
             ccall.c \
             controlflow.c \
             disasm-dec.c \
             encode.c \
             encoding.c \
             interp-dec.c \
             intervals.c \
             label.c \
             lualink.c \
             operator.c \
             runtime.c \
             span.c \
             stack.c \
             table.c \
             thread.c \
             uid.c \
             value.c

CORESRCS   = $EXTSRCS $INTERPSRCS
COREOBJS   = ${CORESRCS:%.c=%.o}

CLIENTHDRS = client.h clients/gc.h
CLIENTSRCS = client.c clients/gc.c

HDRS       = $COREHDRS $CLIENTHDRS
SRCS       = $CORESRCS $CLIENTSRCS

code:V:      $SRCS $HDRS

# ------------------------------------------------------------------
# rules and tools 
# ------------------------------------------------------------------

<../config/c.mk

LIBS         = -L$LIBDIR -lm
INCLUDES     = -Iinclude -Iinclude/cii -I.

CFLAGS       = -g -ansi -pedantic -Wall $INCLUDES

<../config/noweb.mk
<../config/man.mk

NOTANGLEOPTS = -L

# ------------------------------------------------------------------
# copy files to their official directories
# ------------------------------------------------------------------

$BINDIR/$NAME:  $NAME
                cp $prereq $target

# ------------------------------------------------------------------
# binaries
# ------------------------------------------------------------------

gc:V:     clients/gc_client
interp:V: $NAME

$NAME:    $COREOBJS client.o
    $CC $CFLAGS $LIBS -o $target $COREOBJS client.o $LUALIBS

clients/gc_client: $COREOBJS clients/gc.o
    $CC $CFLAGS $LIBS -o $target $COREOBJS clients/gc.o $LUALIBS

###
###
### alternately built binaries (for sparc, lcc, etc.)

lcc-interp:V: clean
    mk code $MKFLAGS
    mk $NAME CC=lcc CFLAGS='-g -A -A -b' $MKFLAGS
    mk clients/gc_client CC=lcc CFLAGS='-g -A -A -b' $MKFLAGS

sparc-interp:V:
    mk $NAME $MKFLAGS MACHINE=sparc TOOLS=/home/lair/olinsky/bin/sparc/tools

# ------------------------------------------------------------------
# documentation-related files
# ------------------------------------------------------------------

interfaces:V: interfaces.dvi

interfaces.nw: $INTERFACES
    rm -f interfaces.nw
    touch interfaces.nw
    for i in $INTERFACES;
    do
       echo "\section{Interface: [[$i]]}" >> interfaces.nw
       sed -e '/noweb-code-mode/d' \
           -e '/^This document contains /d' \
           -e '/section{Interface/d' \
           -e '/section{Implementation/q' $i | \
       sed -e '/section{Implementation/d' >> interfaces.nw
    done

NWTEXFILES = ${NWFILES:%.nw=%.tex}

INTERFACES = activation.nw \
             assemblyunit.nw \
             ccall.nw \
             controlflow.nw \
             disasm.nw \
             encoding.nw \
             intervals.nw \
             label.nw \
             lualink.nw \
             operator.nw \
             span.nw \
             stack.nw \
             table.nw \
             thread.nw \
             types.nw \
             uid.nw \
             value.nw

interp.tex: interp.nw
	$NOWEAVE -delay -autodefs c -index $prereq > $target

### some old documentation files

design.tex: design.inc
	echo "\input{design.inc}" > $target

state.tex: state.inc
    echo "\input{state.inc}" > $target

# ------------------------------------------------------------------ 
# source code targets
# ------------------------------------------------------------------ 

bytecode.sled:D: interp.nw
	$NOTANGLE $NOTANGLEOPTS -R$target $prereq | $CPIF $target

decode.fetch:D: interp.nw
    $NOTANGLE $NOTANGLEOPTS -R$target $prereq | $CPIF $target

machine.h:D: interp.nw
    if [ -n "$MACHINE" ]; then
      $NOTANGLE $NOTANGLEOPTS -R$target.$MACHINE $prereq | $CPIF $target
    else
      $NOTANGLE $NOTANGLEOPTS -R$target.x86 $prereq | $CPIF $target
    fi

encode.c encode.h: bytecode.sled
    $TOOLS -lc-cons-names -encoder encode $prereq

%-dec.c:D: %.m bytecode.sled decode.fetch
    $TOOLS -lc-cons-names -decoder $target -matcher $stem.m \
		bytecode.sled decode.fetch

'(([^/]*/)*)(.*)\.h$':RD:       '\1\3.nw'
	$NOTANGLE $NOTANGLEOPTS -R$stem3.h $prereq | $CPIF $target

'(([^/]*/)*)(.*)\.c$':RD:       '\1\3.nw'
	$NOTANGLE $NOTANGLEOPTS -R$stem3.c $prereq | $CPIF $target

%.m:D: %.nw
    $NOTANGLE -R$target $prereq | $CPIF $target

# ------------------------------------------------------------------ 
# recalculate dependencies
# ------------------------------------------------------------------ 

depend:V: $SRCS $HDRS
    cp mkfile mkfile.bak
    sed '/^# DO NOT DELETE/q' mkfile.bak > mkfile
    $DEPEND $SRCS | sed 's/gc\.o:/clients\/gc\.o:/' >> mkfile

# ------------------------------------------------------------------ 
# intermediate code targets
# ------------------------------------------------------------------ 
#
# for development and debugging only

'(([^/]*/)*)(.*)\.i$':RD:       '\1\3.c' $HDRS
    $CC -P -E $INCLUDES $stem3.c > $target

# ------------------------------------------------------------------ 
# operator generator targets (experimental, and not currently used)
# ------------------------------------------------------------------ 

opgen:	opgen.icn
	icont -o $target $prereq

%.icn:D: %.nw
	$NOTANGLE -L'#line %-1L "%F"%N' -R$target $prereq > $target

optest:V: opgen
	echo "v1:f32 v2:f32 feq32 -- v1 == v2 : bool" | ./opgen

%-ops.c:D: %.ops opgen
	./opgen $stem.ops > $target


#
# -- end of mkfile --
#

#
# [dependencies]
#
# DO NOT DELETE THIS LINE -- mk depend depends on it
arena.o: arena.c include/cii/assert.h include/cii/except.h \
 include/cii/arena.h
assert.o: assert.c
atom.o: atom.c
except.o: except.c
mclib.o: mclib.c
mem.o: mem.c
assemblyunit.o: assemblyunit.c assemblyunit.h controlflow.h \
 activation.h table.h types.h machine.h uid.h value.h lualink.h \
 encoding.h interp.h intervals.h label.h thread.h
ccall.o: ccall.c ccall.h table.h value.h types.h machine.h label.h \
 assemblyunit.h controlflow.h activation.h uid.h lualink.h interp.h \
 intervals.h thread.h
controlflow.o: controlflow.c controlflow.h activation.h table.h \
 types.h machine.h uid.h value.h interp.h assemblyunit.h intervals.h \
 label.h thread.h
disasm-dec.o: disasm-dec.c disasm.h label.h assemblyunit.h \
 controlflow.h activation.h table.h types.h machine.h uid.h value.h \
 operator.h
encode.o: encode.c encode.h
encoding.o: encoding.c encoding.h table.h assemblyunit.h controlflow.h \
 activation.h types.h machine.h uid.h value.h encode.h label.h \
 lualink.h operator.h interp.h intervals.h thread.h span.h
interp-dec.o: interp-dec.c interp.h activation.h table.h types.h \
 machine.h uid.h value.h assemblyunit.h controlflow.h intervals.h \
 label.h thread.h lualink.h encode.h ccall.h operator.h encoding.h \
 span.h stack.h
intervals.o: intervals.c intervals.h
label.o: label.c label.h assemblyunit.h controlflow.h activation.h \
 table.h types.h machine.h uid.h value.h lualink.h interp.h \
 intervals.h thread.h
lualink.o: lualink.c lualink.h table.h interp.h activation.h types.h \
 machine.h uid.h value.h assemblyunit.h controlflow.h intervals.h \
 label.h thread.h encoding.h
operator.o: operator.c operator.h table.h value.h types.h machine.h \
 stack.h lualink.h interp.h activation.h uid.h assemblyunit.h \
 controlflow.h intervals.h label.h thread.h
runtime.o: runtime.c runtime.h label.h assemblyunit.h controlflow.h \
 activation.h table.h types.h machine.h uid.h value.h interp.h \
 intervals.h thread.h lualink.h ccall.h span.h
span.o: span.c span.h table.h label.h assemblyunit.h controlflow.h \
 activation.h types.h machine.h uid.h value.h interp.h intervals.h \
 thread.h lualink.h
stack.o: stack.c stack.h value.h types.h machine.h interp.h \
 activation.h table.h uid.h assemblyunit.h controlflow.h intervals.h \
 label.h thread.h
table.o: table.c table.h
thread.o: thread.c thread.h intervals.h label.h assemblyunit.h \
 controlflow.h activation.h table.h types.h machine.h uid.h value.h \
 interp.h
uid.o: uid.c uid.h intervals.h thread.h label.h assemblyunit.h \
 controlflow.h activation.h table.h types.h machine.h value.h
value.o: value.c value.h types.h machine.h
client.o: client.c client.h runtime.h label.h assemblyunit.h \
 controlflow.h activation.h table.h types.h machine.h uid.h value.h \
 interp.h intervals.h thread.h disasm.h ccall.h
clients/gc.o: clients/gc.c clients/gc.h runtime.h label.h assemblyunit.h \
 controlflow.h activation.h table.h types.h machine.h uid.h value.h \
 interp.h intervals.h thread.h ccall.h
