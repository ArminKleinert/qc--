##############################################################################
#
# Quick C-- Interpreter
#
# This mkfile is used to build qc--interp, the Quick C-- Interpreter.
#
# IMPORTANT BUILD TARGETS ::
#
#   all         : builds qc--interp
#   update      : builds qc--interp and copies binary to $BINDIR
#   depend      : updates dependencies for proper compilation
#   gc          : builds experimental garb. collecting interp client gc_client
#   exn         : builds experimental exn. dispatching interp client exn_client
#   clean       : cleans object files (*.o)
#   clobber     : cleans all binaries, object files, and source code that can
#                 be regenerated from .NW files
#
# IMPORTANT DOCUMENTATION TARGETS ::
#
#   doc.dvi     : builds main documentation file for entire interpreter;
#                 includes formalization, module interfaces and implementations
#
#   client.dvi  : builds DVI doc. of client.nw, the included interp. client
#   runtime.dvi : builds DVI doc. of runtime.nw, the C-- runtime system
#

NAME      = qc--interp
LIBNAME   = lib$NAME.a
VERSION   = `date +%Y%m%d`

# ------------------------------------------------------------------
# paths
# ------------------------------------------------------------------

TOP       = ..
BINDIR    = $TOP/bin
LIBDIR    = $TOP/lib
MODE      = user
# change to MODE=developer to turn on Toolkit features

# ------------------------------------------------------------------
# main targets
# ------------------------------------------------------------------

INTERP    = evaluating
DEPEND    = -MM

all:V:      $NAME $LIBNAME libinclude
all.opt:V:  all

update:V:     $BINDIR/$NAME $LIBDIR/$LIBNAME libinclude
update.opt:V: update

libinclude:V:
	 		cd libinclude/ ; mk all ; cd ..

test:VQ:
	(cd test; mk $MKFLAGS test)

clean:V:
	rm -f *.o
	(cd clients; mk clean)

clean.opt:V: clean

clobber:V:  clean
	rm -f *.blg *.log *.dvi *.inc *.toc *.aux 
	rm -f $NWTEXFILES
	rm -f prof.out core *~
	rm -f $NAME $LIBNAME
	rm -f *.m *.i decode.fetch bytecode.sled
	rm -f $INTERPHDRS $INTERPSRCS
	rm -f $CLIENTHDRS $CLIENTSRCS
	rm -f inspect.lua inspect.clua
	rm -f mkfile.bak
	(cd clients   ; mk clobber)
	(cd libinclude ; mk clobber)

# cleani does _not_ remove mclib.o or the CII *.o (which don't change often)
cleani:V:
	rm -f $INTERPOBJS client.o
	(cd clients ; mk clean)


# ------------------------------------------------------------------
# rules and tools 
# ------------------------------------------------------------------

<mkfile.$MODE
<$TOP/config/c.mk
<$TOP/config/lua.mk
<$TOP/config/noweb.mk
<$TOP/config/man.mk

LIBS         = -lm $LUALIBS
INCLUDES     = -I./include -I./include/cii -I. $LUAINCLUDES

CFLAGS       = -g -ansi -pedantic -Wall $INCLUDES

NOTANGLEOPTS = -L


# ------------------------------------------------------------------
# important file sets
# ------------------------------------------------------------------

NWFILES    = `echo *.nw`

INTERPHDRS = activation.h \
             assemblyunit.h \
             c-features.h \
             ccall.h \
             controlflow.h \
             disasm.h \
             encoding.h \
             float-features.h \
             interp.h \
             intervals.h \
             label.h \
             lualink.h \
             machine.h \
             operator.h \
             runtime.h \
             span.h \
             stack.h \
             table.h \
             thread.h \
             types.h \
             uid.h \
             value.h

GENHDRS    = encode.h

EXTSRCS    = arena.c \
             assert.c \
             atom.c \
             except.c \
             fmt.c \
             mclib.c \
             mem.c \
             mp.c \
             xp.c

INTERPSRCS = activation.c \
             assemblyunit.c \
             c-features.c \
             ccall.c \
             controlflow.c \
             encoding.c \
             intervals.c \
             label.c \
             lualink.c \
             operator.c \
             runtime.c \
             span.c \
             stack.c \
             table.c \
             thread.c \
             uid.c \
             value.c

GENSRCS    = interp-dec.c \
             disasm-dec.c \
             encode.c

INTERPOBJS = ${INTERPSRCS:%.c=%.o} ${GENSRCS:%.c=%.o}

CORESRCS   = $EXTSRCS $INTERPSRCS $GENSRCS
COREHDRS   = $INTERPHDRS $GENHDRS
COREOBJS   = ${CORESRCS:%.c=%.o}

CLIENTHDRS = client.h
CLIENTSRCS = client.c
CLIENTOBJS = ${CLIENTSRCS:%.c=%.o}

HDRS       = $COREHDRS $CLIENTHDRS
SRCS       = $CORESRCS $CLIENTSRCS

code:V:      $SRCS $HDRS

# ------------------------------------------------------------------
# copy files to their official directories
# ------------------------------------------------------------------

$BINDIR/$NAME:  $NAME
	cp $prereq $target

$LIBDIR/$LIBNAME: $LIBNAME
	cp $prereq $target

# ------------------------------------------------------------------
# binaries
# ------------------------------------------------------------------

interp:V: $NAME
gc:V:     clients/gc_client
exn:V:    clients/exn_client

$NAME:    $COREOBJS client.o
	$CC $CFLAGS $LIBS -o $target $COREOBJS client.o

# $LIBNAME: $COREOBJS $LIBLUA $LIBLUALIB
$LIBNAME: $COREOBJS

clients/%: libinclude
	(cd clients ; mk $stem)

###
###
### alternately built binaries (for sparc, lcc, etc.)

atac-interp:V:
	mk sparc-interp $MKFLAGS MODE=$MODE NOTANGLEOPTS= CC='atac gcc' 

#    sed '/\#line/d' interp-dec.c > interp-dec.c
#    sed '/\#line/d' disasm-dec.c > disasm-dec.c

lcc-interp:V:
	mk update \
	   $MKFLAGS MODE=$MODE \
	   C99=no-c99 IEC60559=no-iec60559 \
	   CC=lcc CFLAGS='-g -A -A -b $INCLUDES'
	mk gc \
	   $MKFLAGS MODE=$MODE \
	   C99=no-c99 IEC60559=no-iec60559 \
	   CC=lcc CFLAGS='-g -A -A -b $INCLUDES'
	mk exn \
	   $MKFLAGS MODE=$MODE \
	   C99=no-c99 IEC60559=no-iec60559 \
	   CC=lcc CFLAGS='-g -A -A -b $INCLUDES'

sparc-interp:V:
	mk update \
	   $MKFLAGS MODE=$MODE MACHINE=sparc \
	   C99=no-c99 IEC60559=no-iec60559 \
	   NOTANGLEOPTS=$NOTANGLEOPTS \
	   TOOLS=/home/lair/olinsky/bin/sparc/tools \
	   LUAINCLUDES=-I/home/lair/olinsky/include \
	   LUALIBS='/home/lair/olinsky/lib/sparc/o/*.o' \
	   CC='$CC'
	mk gc  $MKFLAGS MODE=$MODE MACHINE=sparc \
	       C99=no-c99 IEC60559=no-iec60559 \
	       NOTANGLEOPTS=$NOTANGLEOPTS \
	       TOOLS=/home/lair/olinsky/bin/sparc/tools \
	       LUAINCLUDES=-I/home/lair/olinsky/include \
	       LUALIBS='/home/lair/olinsky/lib/sparc/o/*.o' \
	       CC='$CC'
	mk exn $MKFLAGS MODE=$MODE MACHINE=sparc \
	       C99=no-c99 IEC60559=no-iec60559 \
	       NOTANGLEOPTS=$NOTANGLEOPTS \
	       TOOLS=/home/lair/olinsky/bin/sparc/tools \
	       LUAINCLUDES=-I/home/lair/olinsky/include \
	       LUALIBS='/home/lair/olinsky/lib/sparc/o/*.o' \
	       CC='$CC'

# ------------------------------------------------------------------
# dependency recalculation
# ------------------------------------------------------------------

depend:V:   $SRCS $HDRS
	cp mkfile mkfile.bak
	sed '/^# DO NOT DELETE/q' mkfile.bak > mkfile
	$CC $DEPEND $INCLUDES $SRCS |
	  sed 's/gc\.o:/clients\/gc\.o:/'   |
	  sed 's/exn\.o:/clients\/exn\.o:/' >> mkfile


# ------------------------------------------------------------------
# documentation-related files
# ------------------------------------------------------------------

NWTEXFILES = ${NWFILES:%.nw=%.tex}
NWINCFILES = ${NWFILES:%.nw=%.inc}

# INTERFACES should be in a sensible order so the print-out makes sense
INTERFACES = features.nw \
             types.nw \
             value.nw \
             stack.nw \
             lualink.nw \
             table.nw \
             intervals.nw \
             uid.nw \
             activation.nw \
             controlflow.nw \
             label.nw \
             thread.nw \
             assemblyunit.nw \
             encoding.nw \
             operator.nw \
             ccall.nw \
             span.nw \
             disasm.nw \
             inspect.nw \
             runtime.nw \

interfaces:V: interfaces.dvi

interfaces.tex: interfaces.nw
	$NOWEAVE -delay -autodefs c -index $prereq > $target

interfaces.dvi: ${INTERFACES:%.nw=%.inc}

doc.tex: doc.nw
	$NOWEAVE -delay -autodefs c -index $prereq > $target

doc.dvi:  $NWINCFILES

### some old documentation files

design.tex: design.inc
	echo "\input{design.inc}" > $target

state.tex: state.inc
	echo "\input{state.inc}" > $target

# ------------------------------------------------------------------ 
# source code targets
# ------------------------------------------------------------------ 

bytecode.sled:D: interp.nw
	$NOTANGLE $NOTANGLEOPTS -R$target $prereq | $CPIF $target

decode.fetch:D:  interp.nw
	$NOTANGLE $NOTANGLEOPTS -R$target $prereq | $CPIF $target

machine.h:D:     interp.nw
	$NOTANGLE $NOTANGLEOPTS -R$target.${MACHINE-x86} $prereq | $CPIF $target

c-features.h:D:     features.nw
	$NOTANGLE $NOTANGLEOPTS -R$target.${C99-c99} $prereq | $CPIF $target

c-features.c:D:     features.nw
	$NOTANGLE $NOTANGLEOPTS -R$target.${C99-c99} $prereq | $CPIF $target

float-features.h:D: features.nw
	$NOTANGLE $NOTANGLEOPTS -R$target.${IEC60559-iec60559} $prereq |
	$CPIF $target

'(([^/]*/)*)(.*)\.h$':RD:       '\1\3.nw'
	$NOTANGLE $NOTANGLEOPTS -R$stem3.h $prereq | $CPIF $target

'(([^/]*/)*)(.*)\.c$':RD:       '\1\3.nw'
	$NOTANGLE $NOTANGLEOPTS -R$stem3.c $prereq | $CPIF $target

%.m:D: %.nw
	$NOTANGLE -R$target $prereq | $CPIF $target

inspect.lua:D:  inspect.nw
	$NOTANGLE -R$target $prereq > $target

inspect.clua:D: inspect.lua
	sed -e 's/\\/\\\\/g' \
	  -e 's/"/\\"/g'   \
	  -e 'i \'         \
	  -e '\"\\'        \
	  -e 's/$/\\n"/'   $prereq > $target

# ------------------------------------------------------------------ 
# intermediate code targets
# ------------------------------------------------------------------ 
#
# for development and debugging only

'(([^/]*/)*)(.*)\.i$':RD:       '\1\3.c' $HDRS
	$CC -P -E $INCLUDES $stem3.c > $target

# ------------------------------------------------------------------ 
# operator generator targets (experimental, and not currently used)
# ------------------------------------------------------------------ 

opgen:	opgen.icn
	icont -o $target $prereq

%.icn:D: %.nw
	$NOTANGLE -L'#line %-1L "%F"%N' -R$target $prereq > $target

optest:V: opgen
	echo "v1:f32 v2:f32 feq32 -- v1 == v2 : bool" | ./opgen

%-ops.c:D: %.ops opgen
	./opgen $stem.ops > $target


#
# -- end of mkfile --
#

#
# [dependencies]
#
# DO NOT DELETE THIS LINE -- mk depend depends on it
arena.o: arena.c include/cii/assert.h include/cii/except.h \
 include/cii/arena.h
assert.o: assert.c
atom.o: atom.c
except.o: except.c
fmt.o: fmt.c include/cii/assert.h include/cii/except.h \
 include/cii/fmt.h include/cii/mem.h
mclib.o: mclib.c
mem.o: mem.c
mp.o: mp.c include/cii/assert.h include/cii/except.h include/cii/fmt.h \
 include/cii/mem.h include/cii/xp.h include/cii/mp.h
xp.o: xp.c include/cii/assert.h include/cii/except.h include/cii/xp.h
assemblyunit.o: assemblyunit.c assemblyunit.h controlflow.h \
 activation.h table.h types.h machine.h uid.h stack.h value.h \
 lualink.h encoding.h interp.h intervals.h label.h thread.h \
 c-features.h
c-features.o: c-features.c c-features.h
ccall.o: ccall.c ccall.h table.h stack.h value.h types.h machine.h \
 label.h assemblyunit.h controlflow.h activation.h uid.h lualink.h \
 interp.h intervals.h thread.h c-features.h
controlflow.o: controlflow.c controlflow.h activation.h table.h \
 types.h machine.h uid.h stack.h value.h interp.h assemblyunit.h \
 intervals.h label.h thread.h c-features.h
encoding.o: encoding.c encoding.h table.h assemblyunit.h controlflow.h \
 activation.h types.h machine.h uid.h stack.h value.h encode.h label.h \
 lualink.h operator.h interp.h intervals.h thread.h c-features.h \
 span.h
intervals.o: intervals.c intervals.h
label.o: label.c label.h assemblyunit.h controlflow.h activation.h \
 table.h types.h machine.h uid.h stack.h value.h lualink.h interp.h \
 intervals.h thread.h c-features.h
lualink.o: lualink.c lualink.h table.h interp.h activation.h types.h \
 machine.h uid.h stack.h value.h assemblyunit.h controlflow.h \
 intervals.h label.h thread.h c-features.h encoding.h operator.h \
 inspect.clua
operator.o: operator.c operator.h table.h stack.h value.h types.h \
 machine.h c-features.h float-features.h lualink.h interp.h \
 activation.h uid.h assemblyunit.h controlflow.h intervals.h label.h \
 thread.h
runtime.o: runtime.c runtime.h label.h assemblyunit.h controlflow.h \
 activation.h table.h types.h machine.h uid.h stack.h value.h interp.h \
 intervals.h thread.h c-features.h lualink.h ccall.h span.h
span.o: span.c span.h table.h label.h assemblyunit.h controlflow.h \
 activation.h types.h machine.h uid.h stack.h value.h interp.h \
 intervals.h thread.h c-features.h lualink.h
stack.o: stack.c stack.h value.h types.h machine.h interp.h \
 activation.h table.h uid.h assemblyunit.h controlflow.h intervals.h \
 label.h thread.h c-features.h
table.o: table.c table.h
thread.o: thread.c thread.h intervals.h label.h assemblyunit.h \
 controlflow.h activation.h table.h types.h machine.h uid.h stack.h \
 value.h interp.h c-features.h
uid.o: uid.c uid.h intervals.h thread.h label.h assemblyunit.h \
 controlflow.h activation.h table.h types.h machine.h stack.h value.h
value.o: value.c value.h types.h machine.h interp.h activation.h \
 table.h uid.h stack.h assemblyunit.h controlflow.h intervals.h \
 label.h thread.h c-features.h
interp-dec.o: interp-dec.c interp.h activation.h table.h types.h \
 machine.h uid.h stack.h value.h assemblyunit.h controlflow.h \
 intervals.h label.h thread.h c-features.h float-features.h lualink.h \
 encode.h ccall.h operator.h encoding.h span.h
disasm-dec.o: disasm-dec.c disasm.h label.h assemblyunit.h \
 controlflow.h activation.h table.h types.h machine.h uid.h stack.h \
 value.h operator.h interp.h intervals.h thread.h c-features.h
encode.o: encode.c encode.h
client.o: client.c client.h runtime.h label.h assemblyunit.h \
 controlflow.h activation.h table.h types.h machine.h uid.h stack.h \
 value.h interp.h intervals.h thread.h c-features.h disasm.h ccall.h

