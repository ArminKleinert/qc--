% -*- mode: Noweb; noweb-code-mode: c-mode -*- %

\ifx\nointro\undefined
This document contains facilities that allow the interpreter to use C language extensions if they are available.
\fi

% ----------------------------------------------------------------------------
\interface{[[features]] : Utilizing Extended C Language Features}
% ----------------------------------------------------------------------------

This document ([[features.nw]]) contains header files that allow the
conditional use of C language extensions:

\begin{itemize}
\item
 Header file [[c-features.h : c99]] makes use of ISO C99 language
 features not found in earlier versions of the C language standard. 

\item
 Header file [[float-features.h : iec60559]] makes use of IEC 60559
 floating-point arithmetic features. 

\item
 Header file [[c-features.h : no-c99]] is a dummy header file that
 warns the user and performs a no-op anytime a C99-only feature is
 used. 

\item
 Header file [[float-features.h : no-iec60559]] is a dummy header file
 that warns the user and performs a no-op anytime an IEC 60559-only
 feature is used. 

\end{itemize}

To enable use of C99 language extensions, the [[c99]] version of
[[c-features.h]] should be extracted from this noweb document; otherwise
the [[no-c99]] version should be extracted.

To enable use of IEC 60559 floating-point extensions, the [[iec60559]] version
of [[float-features.h]] should be extracted from this noweb document; otherwise
the [[no-iec60559]] version should be extracted.

C code should include [[c-features.h]] or [[float-features.h]] as needed.

% ----------------------------------------------------------------------------
\implementation{Utilizing Extended C Language Features}
% ----------------------------------------------------------------------------

% ----------------------------------------------------------------------------
\subsection{C99 Extensions}
% ----------------------------------------------------------------------------

<<c-features.h.c99>>=
#ifndef _C_FEATURES_H
#define _C_FEATURES_H

#define __USE_ISOC99 1
#include <string.h>

#endif /* _C_FEATURES_H */
@
We write a dummy function in the implementation of [[c-features.c.c99]] so
the C compiler does not complain when it finds an otherwise empty [[.c]] file.
<<c-features.c.c99>>=
#include "c-features.h"

void _dummy_function(void) {}
@ 
If the user is not using a C99-compliant compiler, we need to go ahead and
declare and define [[strcasecmp]]; otherwise, it should be provided by the C 
standard library.
<<c-features.h.no-c99>>=
#ifndef _C_FEATURES_H
#define _C_FEATURES_H

#include <stdio.h>

#define _C99_NOOP(op) \
fprintf(stderr, "WARNING: C99 operation '%s' not supported; further runtime " \
                "results may be wrong\n" \
              , #op \
       )

int strcasecmp(const char *s1, const char *s2);

#endif /* _C_FEATURES_H */
@

<<c-features.c.no-c99>>=
#include "c-features.h"

#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int strcasecmp(const char *s1, const char *s2) {
  char     *u1 = (char *) malloc(sizeof(char) * (strlen(s1) + 1));
  char     *u2 = (char *) malloc(sizeof(char) * (strlen(s2) + 2));
  int       rc;
  unsigned  i;

  u1 = strcpy(u1, s1);
  u2 = strcpy(u2, s2);

  for (i = 0; i < strlen(u1); i++)
    u1[i] = toupper(u1[i]);
  for (i = 0; i < strlen(u2); i++)
    u2[i] = toupper(u2[i]);

  rc = strcmp(u1, u2);

  free(u1);
  free(u2);

  return rc;
}
<<c-features.c.no-c99>>=
float sqrt32(float x) {
  return (float) sqrt((double) x);
}
@ 

% ----------------------------------------------------------------------------
\subsection{IEC 60559 Extensions}
% ----------------------------------------------------------------------------

<<float-features.h.iec60559>>=
#ifndef _FLOAT_FEATURES_H
#define _FLOAT_FEATURES_H
 
#include <fenv.h>
#pragma STDC FENV_ACCESS ON

#endif /* _FLOAT_FEATURES_H */
@

<<float-features.h.no-iec60559>>=
#ifndef _FLOAT_FEATURES_H
#define _FLOAT_FEATURES_H

#include <stdio.h>

#define _IEC60559_NOOP(op) \
fprintf(stderr, "WARNING: IEC 60559 floating-point operation '%s' " \
                "not supported; further runtime results may be wrong\n" \
              , #op \
       )

#define FE_DOWNWARD   0
#define FE_UPWARD     0
#define FE_TONEAREST  0
#define FE_TOWARDZERO 0
#define INFINITY      0.0

#define fegetround() \
( _IEC60559_NOOP(fegetround) \
, 0 \
)

#define fesetround(X) \
( _IEC60559_NOOP(fesetround) \
, 0 \
)

#define isunordered(X,Y) \
( _IEC60559_NOOP(isunordered) \
, 0 \
)

#define isless(X,Y) \
( _IEC60559_NOOP(isless) \
, 0 \
)

#define isgreater(X,Y) \
( _IEC60559_NOOP(isgreater) \
, 0 \
)

#define nearbyintf(X) \
( _IEC60559_NOOP(nearbyintf) \
, 0.0 \
)

#define nearbyint(X) \
( _IEC60559_NOOP(nearbyint) \
, 0.0 \
)

#endif /* _FLOAT_FEATURES_H */
@
