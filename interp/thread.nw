% -*- mode: Noweb; noweb-code-mode: c-mode -*- %

This document contains the interface and implementation of {\PAL} threads.

% ----------------------------------------------------------------------------
\section{Interface}
% ----------------------------------------------------------------------------

<<thread.h>>=
#ifndef _THREAD_H
#define _THREAD_H

#include "intervals.h"
#include "label.h"
#include "uid.h"

<<type definitions>>
<<function prototypes>>

#endif /* _THREAD_H */
@ 

% ----------------------------------------------------------------------------
\subsection{Data Structures}
% ----------------------------------------------------------------------------

A {\PAL} thread may simply be realized as a separate activation stack.  
For matters of $uid$ bookkeeping, we need to keep track of the next frame id to be handed out to a fresh activation as well as a list of dead frame id's.  
We use a [[interval_list]] to represent this list (see [[intervals.nw]]).  
For memory management of a thread's stack, we actually maintain three separate stacks: an [[activation]] stack, a local variable stack, and a stack-data stack.  
The idea is that we allocate from these three stacks when we need to create a new activation record in a given thread.  
The pointers in the [[thread]] structure are used to perform this allocation as well as to recover space on the stacks formerly used by dead activations.

<<type definitions>>=
typedef struct {
  unsigned int next_frame_id;

  void          *stack_base;
  void          *stack_limit;
  void          *stack_free;

  interval_list *dead_list;
} thread;
@ 

% ----------------------------------------------------------------------------
\subsection{Stack Layout}
% ----------------------------------------------------------------------------

Stackdata, locals, and activation information are all stored on a thread's one
stack.

\begin{verbatim}

   |---------|<--- t->stack_base
   |         |
   | locals0 |   
   |_________|   This is a sample stack.  The top is the oldest part; growth
   |         |   is here drawn toward the bottom.  In the implementation,
   | stackd0 |   growth is toward increasing addresses.
   |_________|     When creating space for a new activation, we first create
   |         |   space for locals, then space for stackdata.  The activation
   |  act0   |   record is stored locally in C until we must leave it for
   |---------|   some reason (cut/call/etc.).  Then, we store the activation
   | locals1 |   at the extremum, after its locals and stackdata.
   |---------|     At this point, we store locals and stackdata for the next
   | stackd1 |   activation.
   |         |   
   |         |
   |---------|<--- t->stack_free
   |         |
   |         |



   |         |
   |---------|<--- t->stack_limit

\end{verbatim}

All activations are of fixed size ([[sizeof(activation)]]). 
Locals and stackdata space vary in size, depending on a specific activation's needs.

Finally, a word on suspended threads.
A suspended thread is essentially one that is not presently running through
the interpreter; in such a thread, the youngest activation \emph{is} present
atop the thread's stack--but is distinguishable from an ordinary activation.
Such a ``suspended activation'' has a [[NULL]] $\kappa$ field (its call-site 
annotations) as well as a [[NULL]] [[callee]] field.

Such activations would be found: as the first initialized activation of a
brand-new thread, or as the youngest activation of a thread that had been
running and cut over to another thread or the runtime system.

% ----------------------------------------------------------------------------
\subsection{Utility Functions}
% ----------------------------------------------------------------------------

Helper functions [[init_thread]] and [[find_thread]] assist in thread management: [[init_thread]] initializes the data members of a [[thread]] object, given a sufficient amount of space to devote to storing the activation stack and local environment.  [[find_thread]] returns the thread uniquely identified by some [[uid]].
<<function prototypes>>=
thread *init_thread(CMM_label *lbl, void *stack_space, unsigned n);
thread *find_thread(uid u);
@

% ----------------------------------------------------------------------------
\section{Implementation}
% ----------------------------------------------------------------------------

<<thread.c>>=
#include "thread.h"

#include <stdlib.h>
#include "interp.h"
#include "value.h"
#include "activation.h"
#include "table.h"

<<function definitions>>
@

% ----------------------------------------------------------------------------
\subsection{Thread Initialization}
% ----------------------------------------------------------------------------

It takes a bit of work to initialize a thread.

Given sufficient space in memory, we set up a stack for storing locals,
stackdata, and activations.
See the section above on stack layout for more information about how exactly
we allocate memory on the stack.

We have to remember to initialize the [[thread]]'s fields, as well as set
up the thread's first activation--in suspended state, of course.

<<function definitions>>=
thread *init_thread(CMM_label *lbl, void *stack_space, unsigned n) {
  void   *stack_limit = (void *) (((u_int8 *) stack_space) + n);

  thread *t = (thread *) malloc(sizeof(thread));
  mem_assert(t);

  t->next_frame_id = 0;
  
  /* we carve out areas for stackdata, callstack, locals from the memory block
     handed into init_thread */

  t->stack_base  = stack_space;
  t->stack_limit = stack_limit;
  t->stack_free  = t->stack_base;

  t->dead_list       = interval_list_new();

  <<set up first activation record>>

  return t;
}
@

When we initialize a thread, start it off with an activation in a suspended state.
The only difference between this suspended activation and a normal activation is that its [[kappa]] field (as well as its [[callee]] field) is left [[NULL]], for it was not called by any other activation.

<<set up first activation record>>= 
  assert(lbl != NULL);
  assert(lbl->ty == CMM_PROCEDURE);
  assert(lbl->lbl.proc != NULL);
  {
    /* locals, then stackdata, then activation */

    actptr      act;
    stack       locals;
    sptr        locals_end;
    datastack   stackdata;
    dataptr     stackdata_end;

    procedure  *start = lbl->lbl.proc;

    assert(location_known(start->raddr));

    <<allocate local memory for activation of procedure [[start]]>>

    act                = (actptr) t->stack_free;
    t->stack_free      = (void *) (((actptr) (t->stack_free)) + 1);
    assert(t->stack_free <= t->stack_limit);

    act->locals        = locals;
    act->locals_end    = locals_end;
    act->stackdata     = stackdata;
    act->stackdata_end = stackdata_end;

    act->pc            = (bytecodeptr) location(start->raddr);
    act->u             = new_uid(t);
    /* leave kappa NULL to indicate this is the end of a thread */
    act->kappa         = NULL;
    act->callee        = NULL;
  }
@ 

Finally, we must allocate space for the local environment of the first activation to be run (the activation for procedure [[start]]).
This memory is taken off the thread [[t]]'s stack, in accordance with our
stack layout convention.

<<allocate local memory for activation of procedure [[start]]>>=
  /* we allocate locals-space and stackdata-space for the first activation */
  locals             = t->stack_free;
  t->stack_free      = (void *) (((sptr) (t->stack_free)) + 
                                 start->num_locals);
  locals_end         = t->stack_free;

  stackdata          = t->stack_free;
  t->stack_free      = (void *) (((dataptr) (t->stack_free)) + 
                                 start->stackdata_size);
  stackdata_end      = t->stack_free;
@

% ----------------------------------------------------------------------------
\subsection{Helper Functions}
% ----------------------------------------------------------------------------

Recall that the thread id of a given [[uid]] is actually a [[void *]] pointer to the thread to which the activation uniquely identified by the [[uid]] belongs.
As such, it is rather easy to find a thread given a [[uid]].

<<function definitions>>=
thread *find_thread(uid u) {
  return (thread *) u.thread;
}
@ 
