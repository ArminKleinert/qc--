# ------------------------------------------------------------------ 
# $Id$
# ------------------------------------------------------------------ 

# ------------------------------------------------------------------ 
# paths
# ------------------------------------------------------------------ 

TOP    =    ..
INTERP =    evaluating
DEPEND =    DEPEND

LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man

prefix =    /usr/local

TKDIR = /home/lair/nr/zephyr/cvs/toolkit
TKRTL = $TKDIR/rtl
SLEDLIBDIR = $TKDIR
RTLSPECDIR = $TKRTL
SLEDSPECDIR = /home/lair/nr/toolkit/www/specs
LRTLHEAP=/usr/share/smlnj/bin/.heap/lrtl.x86-linux


# ------------------------------------------------------------------ 
# (high level) virtual targets
# ------------------------------------------------------------------ 

HTML =          `echo *.nw       | sed 's/\.nw/.html/g;'`
INC  =          `echo *.nw       | sed 's/\.nw/.inc/g;'`

all:V:          src cmo lib
all.opt:V:      
update:V:       update-lib
update.opt:V:   

dvi:V:          $INC
html:V:         $HTML

test:VQ:
                echo "nothing to be done"

depend:V:       $DEPEND

clean:V:    
                rm -f *.cmo *.cmi *.cmx *.o
                rm -f *.output
                
clobber:V:      clean
                rm -rf *.ml *.mll *.mli DEPEND 
                rm -rf ocamlerror ocamlerror.opt
                rm -rf ocamlerror.pod ocamlerror.1
                rm -rf *.aux *.log *.dvi *.tex *.inc *.toc

install:V:      all.opt
                install -s ocamlerror.opt $prefix/bin/ocamlerror
                install    ocamlerror.1   $prefix/man/man1  


# ------------------------------------------------------------------ 
# rules and tools for OCaml
# ------------------------------------------------------------------ 

<../config/ocaml.mk
<../config/noweb.mk

MACHINEREGEX=sparc

<../config/lrtl.mk

# compiler flags used by the rules just included

OCAMLC_FLAGS =  -g -I $LIBDIR
OCAMLO_FLAGS =     -I $LIBDIR

# ------------------------------------------------------------------ 
# gather ye specifications where ye may
# ------------------------------------------------------------------ 

$SLEDSPECDIR/&.spec: $SLEDSPECDIR/&.nw
	(cd `dirname $target`; mk `basename $target`)

$SLEDSPECDIR/&-names.spec: $SLEDSPECDIR/&.nw
	(cd `dirname $target`; mk `basename $target`)

$TKRTL/&.rtl: $TKRTL/&.nw
	(cd `dirname $target`; mk `basename $target`)

&.sled: $SLEDSPECDIR/&.spec $SLEDSPECDIR/&-names.spec
	cat $prereq > $target

&.rtl: $TKRTL/&.rtl
	cat $prereq > $target


# ------------------------------------------------------------------ 
# important file sets
# ------------------------------------------------------------------ 

sledlib.mli: $TKDIR/caml-lib.nw
	notangle -L"$LINE" -R$target $prereq > $target

sledlib.ml: $TKDIR/caml-lib.nw
	notangle -L"$LINE" -R$target $prereq > $target

LOCAL =         sledlib.ml	\
		sparc.ml	\
                sparcmkasm.ml   \
		sparcrec.ml	\

LOCALI =        sledlib.mli	\
		sparc.mli	\
                sparcmkasm.mli   \

BAREML  =		sparcrec.ml	\

sparcrec.cmi: sparcrec.cmo
	# do nothing; the compiler does it

CMO =           `echo $LOCAL       | sed 's/\.ml/.cmo/g'`
CMI =           `echo $LOCALI      | sed 's/\.mli/.cmi/g'` \
                `echo $BAREML      | sed 's/\.ml/.cmi/g'`
cmo:V: $CMO
CMX =           `echo $LOCAL       | sed 's/\.ml/.cmx/g'`
OBJ =           `echo $LOCAL       | sed 's/\.ml/.o/g'`

SCAN =          $LOCAL $LOCALI

src:V: $SCAN

# ------------------------------------------------------------------ 
# building binaries
# ------------------------------------------------------------------ 

LIBCMO =       gen.cma
LIBCMX =       gen.cmxa

lib:V: $LIBCMO
update-lib:V: $LIBDIR/$LIBCMO

$LIBCMO:        $CMO
		$OCAMLC $OCAMLC_FLAGS -a -o $target $prereq
                

$LIBCMX:	$CMX
		$OCAMLO $OCAMLO_FLAGS -a -o $target $prereq

# ------------------------------------------------------------------ 
# update hierarchy
# ------------------------------------------------------------------ 

$LIBDIR/$LIBCMO:    $LIBCMO dirs $LOCALI $CMI
		    for i in $LIBCMO $LOCALI $CMI
                    do
		        cmp -s $i $LIBDIR/$i || cp $i $LIBDIR 
		    done

$LIBDIR/$LIBCMX:    $LIBCMX dirs
		    for i in $LIBCMX $NAME.a *.mli *.cmi
                    do
		        cmp -s $i $LIBDIR/$i || cp $i $LIBDIR
		    done

dirs:VQ:
                    for i in $LIBDIR; do
                        if [ ! -d $i ]; then
                            echo "missing directory $i"
                            echo "invoke mk from the toplevel the first time"
                            echo "to create all directories"
                            false
                        fi
                    done    


# ------------------------------------------------------------------ 
# recalculate dependencies
# make sure that generators are run first
# ------------------------------------------------------------------ 

depend:V: $DEPEND
$DEPEND:	$SCAN
		$OCAMLDEP -I $LIBDIR $SCAN > $DEPEND

# ------------------------------------------------------------------ 
# include dependencies
# ------------------------------------------------------------------ 

<$DEPEND

