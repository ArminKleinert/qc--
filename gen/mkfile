# :VIm ts=8 et sw=4:
# ------------------------------------------------------------------ 
# $Id$
# ------------------------------------------------------------------ 

#                           READ ME FIRST
#
# This mkfile can be used in two modes.  In `gen' mode, the Lambda-RTL
# Translator is used to generate .ml and .mli files from .sled and .rtl
# descriptions.  In `normal' mode, the .ml and .mli files are taken as
# given, and there is no reference to Lambda-RTL.
#
# To use the mkfile in `gen' mode, run `mk MODE=gen'.

# Currently the compilation of sparcrec.ml to native code with ocamlopt
# fails.  

MODE=normal

# ------------------------------------------------------------------ 
# paths
# ------------------------------------------------------------------ 

TOP    =        ..
INTERP =        evaluating
DEPEND =        DEPEND

LIBDIR =        ../lib
BINDIR =        ../bin
MANDIR =        ../man

# extend PATH for special tools

PATH   =        $PATH:/usr/share/smlnj/bin

TKDIR =         /home/lair/nr/zephyr/cvs/toolkit
TKRTL =         $TKDIR/rtl
SLEDLIBDIR =    $TKDIR
RTLSPECDIR =    $TKRTL
SLEDSPECDIR =   /home/lair/nr/toolkit/www/specs
LRTLHEAPi =     /usr/share/smlnj/bin/.heap/lrtl.x86-linux

# ------------------------------------------------------------------ 
# (high level) virtual targets
# ------------------------------------------------------------------ 

all:V:          src cmo libcmo
all.opt:V:      src cmx libcmx
                
# update and update.opt are defined below. They rely on variables
# that are not visible here.

html dvi test:VQ:          
                echo "nothing to be done"          

depend:V:       $DEPEND

# What is the policy here? Does clean remove *.ml* files that we generate
# using special tools or not? These files are derived, but they are also
# in the repository. I vote for not removing them because a casual user
# would be unable to derive them again.

clean:V:    
                # sparcrec.* is precious, so we keep it
                # rm -rf *.cmo *.cmx *.cmi *.o
                rm -f `find . -not -name 'sparcrec*' -name '*.cm*'` 
                rm -f `find . -not -name 'sparcrec*' -name '*.o'` 
                rm -f *.output
                rm -rf *.aux *.log *.dvi *.tex *.inc *.toc
                rm -f gen.cma gen.cmxa gen.a
                rm -f $DEPEND
                
clobber:V:      clean
                rm -f gen.cma gen.cmxa gen.a
                # rm -f ast.ml* astUtil.ml*
                # rm -f rtlasdl.ml* rtlasdlUtil.ml*

# ------------------------------------------------------------------ 
# rules and tools for OCaml
# ------------------------------------------------------------------ 

<../config/ocaml.mk
<../config/noweb.mk

MACHINEREGEX=sparc

<mkfile.$MODE

# compiler flags used by the rules just included
# 
# We compile with -nolabels until the code generators are updated
# to generate OCaml 3.04 compliant code.

OCAMLC_FLAGS =  -g -I $LIBDIR -nolabels
OCAMLO_FLAGS =  -p -I $LIBDIR -nolabels

# ------------------------------------------------------------------ 
# important file sets
# ------------------------------------------------------------------ 

# currently some machine generated code does not fit to the 
# runtime code in sledlib. Since we don't use it right now,
# we comment those out.

LOCAL =         sledlib.ml      \
                sparc.ml        \
                sparcmkasm.ml   \
                # sparcrec.ml   \
                # sparcrtl.ml   \
                ast.ml          \
                astUtil.ml      \
                rtlasdl.ml      \
                rtlasdlUtil.ml  \

LOCALI =        sledlib.mli     \
                sparc.mli       \
                sparcmkasm.mli  \
                ast.mli         \
                astUtil.mli     \
                rtlasdl.mli     \
                rtlasdlUtil.mli \
                

BAREML  =       # sparcrec.ml    

sparcrec.cmi:   sparcrec.cmo
                # do nothing; the compiler does it

CMO =           `echo $LOCAL       | sed 's/\.ml/.cmo/g'`
CMI =           `echo $LOCALI      | sed 's/\.mli/.cmi/g'` \
                `echo $BAREML      | sed 's/\.ml/.cmi/g'`
CMX =           `echo $LOCAL       | sed 's/\.ml/.cmx/g'`
OBJ =           `echo $LOCAL       | sed 's/\.ml/.o/g'`

SCAN =          $LOCAL $LOCALI

cmo:V:          $CMO
cmx:V:          $CMX

src:V:          $SCAN

# ------------------------------------------------------------------ 
# building binaries
# ------------------------------------------------------------------ 

LIBCMO =        gen.cma
LIBCMX =        gen.cmxa
LIBOBJ =        gen.a

libcmo          \
$LIBCMO:        $CMO
                $OCAMLC $OCAMLC_FLAGS -a -o $LIBCMO $prereq
                
libcmx          \
$LIBCMX:        $CMX
                $OCAMLO $OCAMLO_FLAGS -a -o $LIBCMX $prereq

# ------------------------------------------------------------------ 
# update hierarchy
# ------------------------------------------------------------------ 

update:V:           $LIBCMO dirs $LOCALI $CMI
                    for i in $LIBCMO $LOCALI $CMI
                    do
                        cmp -s $i $LIBDIR/$i || cp $i $LIBDIR 
                    done

update.opt:V:       $LIBCMX dirs $LOCALI $CMI
                    for i in $LIBCMX $LOCALI $CMI $LIBOBJ
                    do
                        cmp -s $i $LIBDIR/$i || cp $i $LIBDIR
                    done

dirs:VQ:
                    for i in $LIBDIR; do
                        if [ ! -d $i ]; then
                            echo "missing directory $i"
                            echo "invoke mk from the toplevel the first time"
                            echo "to create all directories"
                            false
                        fi
                    done    


# ------------------------------------------------------------------ 
# recalculate dependencies
# make sure that generators are run first
# ------------------------------------------------------------------ 

depend:V: $DEPEND
$DEPEND:        $SCAN
                $OCAMLDEP -I $LIBDIR $SCAN > $DEPEND

# ------------------------------------------------------------------ 
# include dependencies
# ------------------------------------------------------------------ 

<$DEPEND

