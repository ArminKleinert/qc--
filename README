
                        The Quick C-- Compiler

              ``Bringing you compiler technology that is well
              understood, but difficult to implement'' 
                                                         
This directory contains the source code for the Quick C-- compiler for
the C-- language.  C-- is an intermediate language for compilers with
a concrete syntax.  Informations about C-- and the Quick C-- compiler
can be found at: http://www.cminusminus.org

For building the compiler from source code see the INSTALL document. 
The INSTALL document also contains a road map the the source code
organization.

Once the compiler is build from source code, or, if you are looking at
a binary distribution, the compiler binary qc-- can be found in the
bin/ directory. The Unix style manual page is man/man1/qc--.1.

        bin/qc--                    Compiler binary.
        bin/qc--interp              QC-- Interpreter
        man/man1/qc--.1             Manual page.
        man/man1/qc--internals.1    Compiler hacker's manual page
        INSTALL                     How to build qc-- from source.

The Quick C-- compiler is still under development. Please see the
manual page for how to invoke the compiler. Even though it is not
currently the default setting, you may want to use the `dls'
register allocator. This allocator is dramatically faster than our
implementation of the default register allocator. You may invoke
the `dls' allocator on the command line, as in the following example:
  qc-- backend=Backend.x86 backend.ralloc=Ralloc.dls hello.c--

The Quick C-- compiler is protected by copyright.  It is not
public-domain software or shareware, and it is not protected by a
``copyleft'' agreement like the one used by the Free Software
Foundation.

Quick C-- is available free for any use in any field of endeavor.  
You may redistribute Quick C-- in whole or in part provided you
acknowledge its source and include this COPYRIGHT file.  You may
modify Quick C-- and create derived works, provided you retain this
copyright notice, but the result may not be called Quick C-- without
written consent.


CAVEATS:

The native-code back ends aren't ready.
x86 doesn't support floating point.
We currently use the Fortran convention to assign variables to int or float. 
Integer variables should have names beginning with letters I through N.
The default register allocator is _extremely_ slow; you may want to follow
the above suggestions about using the `dls' allocator.
