#!/bin/sh

# to get a fresh interpreter, you must run
# `mk INTERP=xxx update.opt' in the lua directory

PATH=$PATH:../bin
TIME=${TIME-/usr/bin/time}

version=fixed_hash
version=chose_good_sizes
version=dropped_allocation

function fail {
  echo "$1 fails on $2" 1>&2
  exit 1
}

function badout {
  echo "$1 produces bad output on $2; try" 1>&2
  echo "  diff $3 $4" 1>&2
  echo "  spiff -r$tolerance $3 $4" 1>&2
  exit 1
}

function findsize {
  case $1 in
    ackermann) if [ $2 -ge 100 ]; then echo 6; elif [ $2 -gt 10 ]; then echo 4
               else echo $2
               fi ;;
    fibo)      if [ $2 -ge 100 ]; then echo 20; 
               else echo $2
               fi ;;
    *)         echo $2 ;;
  esac
}

# hello is a pointless benchmark
# moments is not usable; requires sort() plus file of numbers
# regexmatch is not usable; regexp not implemented yet
# strcat uses a custom string buffer
# wc requires regexp support
# wordfreq requires regexp support

FILES="ackermann ary ary2 ary3 fibo hash heapsort lists 
	methcall nestedloop objinst random reversefile 
	strcat2 sumcol matrix hash2 sieve spellcheck"

# really cool idea: compute size as function of number of seconds desired!
# sizes here aim at about 10 seconds
function goodsize {
  case $1 in
    ackermann) echo 6 ;;  # could be 7 if times improve (29sec)
    matrix) echo 3 ;;
    ary)  echo 20000 ;;  # notable nonlinearity from 20000 to 40000
    ary2) echo 20000 ;;  # notable nonlinearity from 20000 to 40000
    ary3) echo 70    ;;  # expected to be quadratic
    fibo) echo 27    ;;
    hash) echo 10000 ;;  # more gets into nonlinear region
    heapsort) echo 3000 ;; # newcurve pts 200 0.09 1000 1.04 2000 4.0 3000 9.26 4000 16.73
    lists) echo 1000 ;;
       # newgraph newline pts 4000 1.68 6000 3.10 8000 4.79 10000 6.78
    methcall) echo 9000 ;;   # is quadratic for oclbench, linear for lbench
    nestedloop) echo 6 ;;    # exponential; hard to push to 7
    objinst)  echo 15000 ;;  # quadratic
    random)   echo 40000 ;;  # quadratic
    reversefile) echo 0  ;;  # not used
    strcat2) echo 9000 ;;    # quadratic, as expected
    sumcol) echo 0       ;;  # not used
    matrix) echo 3       ;;  # linear
    hash2)  echo 6       ;;  # linear
    sieve)  echo 2       ;;
    spellcheck) echo 0   ;;  # not used
    *) findsize $1 $2 $3 ;;
  esac
}

# 
function longsize {
  case $1 in
    ackermann) echo 6 ;;  # could be 7 if times improve (29sec) EXP
    matrix) echo 10 ;;
    ary)  echo 250000 ;;  # notable nonlinearity from 20000 to 40000
    ary2) echo 250000 ;;  # notable nonlinearity from 20000 to 40000
    ary3) echo 2100    ;;  # expected to be quadratic
    fibo) echo 29    ;;  # EXP
    hash) echo 100000 ;;  # more gets into nonlinear region
    heapsort) echo 30000 ;; # newcurve pts 200 0.09 1000 1.04 2000 4.0 3000 9.26 4000 16.73
    lists) echo 15000 ;;
       # newgraph newline pts 4000 1.68 6000 3.10 8000 4.79 10000 6.78
    methcall) echo 90000 ;;   # is quadratic for oclbench, linear for lbench
    nestedloop) echo 10 ;;    # exponential; hard to push to 7
    objinst)  echo 60000 ;;  # quadratic
    random)   echo 150000 ;;  # quadratic
    reversefile) echo 0  ;;  # not used
    strcat2) echo 15000 ;;    # quadratic, as expected
    sumcol) echo 0       ;;  # not used
    matrix) echo 100       ;;  # linear
    hash2)  echo 75       ;;  # linear
    sieve)  echo 50       ;;
    spellcheck) echo 0   ;;  # not used
    *) findsize $1 $2 $3 ;;
  esac
}


function smallsize {
  case $1 in
    ackermann) echo 6 ;;  # could be 7 if times improve (29sec)
    matrix) echo 3 ;;
    ary) echo 2000 ;;
  esac
}

size=${SIZE-2}
size2=${SIZE2-100}
thesize=goodsize

INTERP=-std
PROFILE=-p

while [ $# -gt 0 ]; do
  case $1 in
    -std|-old|-stdu|-c) INTERP=$1 ; shift ;;
    -p) PROFILE=-p ; shift ;;
    -nop) PROFILE= ; shift ;;
    -size) size="${2-size}"; shift; shift ;;
    -size2) size2="${2-size2}"; shift; shift ;;
    -long) thesize=longsize ; shift;; 
    *) break ;;
  esac
done

if [ $# -gt 0 ]; then 
  FILES="$*"
fi

for base in $FILES
do
  base="`echo $base | sed 's/\.lua$//'`"
  i="$base.lua"
  echo $i 1>&2
  truesize=`$thesize $base $size $size2`
  interp=oclbench${INTERP}${PROFILE}.opt

    if [ -r $i.Input ]; then
      input=$i.Input
    else
      input=/dev/null
    fi
    $TIME -f "at size $truesize, $interp took %e seconds" \
    $TIME \
       -f "version=$version base=$base size=$truesize size2=$size INTERP=$INTERP PROFILE=$PROFILE sec=%e memmax=%M memavg=%K" \
       -o $i.stats -a \
      <$input $interp $i $truesize $size2 > $i.out$INTERP$PROFILE || fail $interp $i

  case $base in
     random) tolerance=1.0 ;;
     heapsort) tolerance=0.5 ;;
     *)      tolerance=0.01 ;;
  esac
  for suffix in -c # lbench oclbenchna
  do
    baseline=$i.out$suffix  # baseline output believed to be correct
    if [ ! -r $baseline ]; then
      echo "==> Re-Run $0 with options -c -nop to create baseline for comparison" 1>&1
      exit 1
    fi
    spiff -r$tolerance $baseline $i.out$INTERP$PROFILE > /dev/null || 
      badout "$interp" "$i" "$baseline" "$i.out$INTERP$PROFILE"
  done
done
