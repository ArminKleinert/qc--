vim: set ts=8 et sw=4:

    $Id$

 o  semantic error: constructor `Store' is used inconsistently
    Please give the 2 inconsistent uses...  -- NR

 o  I'm getting some very bad line numbers in ocamlburg error messages
    The problem appears to be that ocamlburg inserts #line before an
    included chunk but not after.  The right move is to instert #line to
    mark the spot in generated code, e.g., something like the following,
    when the input is from x86rec.nw and the output is to x86rec.ml:


         170 # 131 "x86rec.nw"
         171                         ( I.freg (N.to_int k)) ))
         172 # 173 "x86rec.ml"
         173             })
         174             inf


    It may be easier to do this with a post pass, e.g., have camlburg emit

         170 # 131 "x86rec.nw"
         171                         ( I.freg (N.to_int k)) ))
         172 # 000 "/dev/stdout"
         173             })
         174             inf

    and then have a postpass replace the /dev/stdout line with the actual
    file and line number. -- NR


 o  Make code more imperative; replace { foo with x = ..} 
    with (foo.x <- ..; foo )
 o  spec ::= decls "%%" rules "%%" decls ?
