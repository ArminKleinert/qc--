# :vim ts=8 sw=4 et:
# ------------------------------------------------------------------ 
# $Id$ 
# ------------------------------------------------------------------ 
#
# This directory depends on ../cllib, and specifically the targets
# update and update.opt there.
#
# Before doing anything else, run a "mk depend" to build the 
# dependency file. Otherwise the buil process will get stuck!

# ------------------------------------------------------------------ 
# paths
# ------------------------------------------------------------------ 

NAME =      ocamlburg

TOP    =    ..
INTERP =    evaluating
DEPEND =    DEPEND

LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man

prefix =    /usr/local

# ------------------------------------------------------------------ 
# (high level) virtual targets
# ------------------------------------------------------------------ 

HTML =          `echo *.nw       | sed 's/\.nw/.html/g;'`
DVI  =          `echo *.nw       | sed 's/\.nw/.dvi/g;'`
PS   =          `echo *.nw       | sed 's/\.nw/.ps/g;'`

# files that belong to the runtime system
RTCMO =         camlburg.cmo camlburg.cmi camlburg.mli 
RTCMX =         camlburg.cmx camlburg.cmi camlburg.mli camlburg.o

all:V:          ocamlburg      runtime     man
all.opt:V:      ocamlburg.opt  runtime.opt man 

update:V:       $RTCMO all 
                cp $RTCMO       $LIBDIR
                cp ocamlburg       $BINDIR
                cp ocamlburg.1     $MANDIR/man1
                
update.opt:V:   $RTCMX all.opt 
                cp $RTCMX       $LIBDIR
                cp ocamlburg.opt   $BINDIR
                test -f $BINDIR/ocamlburg || cp ocamlburg.opt $BINDIR/ocamlburg
                cp ocamlburg.1     $MANDIR/man1
    
dvi:V:          $DVI
html:V:         $HTML
ps:V:           $PS

man:V:          ocamlburg.1 

test:VQ:        sample.cmo iburg.cmo

depend:V:       $DEPEND

runtime:V:      camlburg.ml $RTCMO
runtime.opt:V:  camlburg.ml $RTCMX

clean:V:    
                rm -f *.cmo *.cmi *.cmx *.o *.sig 
                rm -f *.output
                rm -f *.mll *.mly
                rm -f parse.ml* lex.ml*
                rm -f *.ml *.mll *.mli $DEPEND *.mly
                rm -f *.aux *.log *.dvi *.tex *.inc *.toc *.html
                rm -f *.ps *.pdf
                rm -f *.pod
                
clobber:V:      clean
                rm -f ocamlburg ocamlburg.opt ocamlburg.1
                rm -f nofake*
                rm -f pp.*
                rm -f srcmap.*
                rm -f pod2htm*
                rm -f *.tar*

install:V:      ocamlburg.opt ocamlburg.1
                install -s ocamlburg.opt $prefix/bin/ocamlburg
                install    ocamlburg.1   $prefix/man/man1                

# ------------------------------------------------------------------ 
# rules and tools for OCaml
# ------------------------------------------------------------------ 

<../config/ocaml.mk
<../config/noweb.mk

# compiler flags used by the rules just included

PROFILE = -p
# no profiling for camlburg
OCAMLC_FLAGS =  -g -I $LIBDIR
OCAMLO_FLAGS =     -I $LIBDIR

# ------------------------------------------------------------------ 
# important file sets
# ------------------------------------------------------------------ 

ML =            code.ml         \
                spec.ml         \
                parseerror.ml   \
                parse.ml        \
                lex.ml          \
                norm.ml         \
                burg.ml         \
                main.ml         \
                

MLI =           burg.mli        \
                code.mli        \
                main.mli        \
                norm.mli        \
                parse.mli       \
                parseerror.mli  \
                spec.mli        \


SCAN =          $ML $MLI \
                camlburg.ml camlburg.mli\
                sampleclient.ml\


CMO =           `echo $ML       | sed 's/\.ml/.cmo/g'`
CMX =           `echo $ML       | sed 's/\.ml/.cmx/g'`

# ------------------------------------------------------------------ 
# building binaries
# ------------------------------------------------------------------ 

ocamlburg:      $LIBDIR/cllib.cma  $CMO 
                $OCAMLC $OCAMLC_FLAGS -o $target $prereq
                
ocamlburg.opt:  $LIBDIR/cllib.cmxa $CMX
                $OCAMLO $OCAMLO_FLAGS -o $target $prereq

# ------------------------------------------------------------------ 
# extra rules for cases not covered by noweb.mk or to resolve
# ambiguities
# ------------------------------------------------------------------ 

lex.mll:        lex.nw
	        $NOTANGLE -R$target $prereq > $target

lex.ml:         lex.mll
                $OCAMLLEX $prereq

parse.mly:      parse.nw
                $NOTANGLE -R$target $prereq > $target

parse.ml:       parse.mly

parse.mli       \
parse.ml        \
parse.output:   parse.mly
                $OCAMLYACC -v parse.mly

ocamlburg.pod:  main.nw
                $NOTANGLE -R$target $prereq > $target

# ------------------------------------------------------------------ 
# Examples
# ------------------------------------------------------------------ 

sample.mlb:     sample.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

sampleclient.ml: sample.nw
                $NOTANGLE -L"$LINE" -R$target $prereq > $target

sample.ml:      sample.mlb ocamlburg runtime
                ./ocamlburg sample.mlb > $target

iburg.ml:       iburg.mlb ocamlburg runtime
                ./ocamlburg iburg.mlb > $target

# ------------------------------------------------------------------ 
# export distribution to outside world
# ------------------------------------------------------------------ 

nofake.nw:      ../tools/nofake.nw
                cp $prereq $target

pp.nw:          ../cllib/pp.nw
                cp $prereq $target

srcmap.nw:      ../cllib/srcmap.nw
                cp $prereq $target

nofake:         nofake.nw
                notangle -R$target $prereq > $target
                chmod +x $target

nofake.1:       nofake
                $POD2MAN nofake > $target

nofake-man.html:    nofake
                $POD2HTML nofake > $target


EXPORT =        README DEPEND Makefile                      \
                iburg.mlb                                   \
                ocamlburg.1 ocamlburg-man.html              \
                nofake nofake.1 nofake-man.html nofake.html \
                burg.nw burg.html                           \
                camlburg.nw camlburg.html                   \
                code.nw code.html                           \
                lex.nw lex.html                             \
                main.nw main.html                           \
                norm.nw norm.html                           \
                parse.nw parse.html                         \
                parseerror.nw parseerror.html               \
                pp.nw pp.html                               \
                sample.nw sample.html                       \
                spec.nw spec.html                           \
                srcmap.nw srcmap.html                       \

tidy:V:         $HTML nofake-man.html ocamlburg-man.html
                tidy -f /dev/null -im $prereq || exit 0

# 1.0 was officially released 05 March 2002 
# 1.1 26 March 2002 - bug fix release for bug in camlburg.nw.
# 1.2 27 March 2002 - NR suggets max_cost=2^16

FILE =          "ocamlburg-1.3"

tar:V:          $FILE.tar.gz 

$FILE.tar.gz:   $EXPORT tidy mkfile
                ln -s . $FILE
                tar czvhf $FILE.tar.gz `ls -1 $EXPORT | sed "s|^|$FILE/|"`
                rm -f $FILE

tartest:V:      tar
                tar zxvf $FILE.tar.gz
                ( cd $FILE && make ) && rm -rf $FILE

www:V:          $FILE.tar.gz
                cp $prereq $HOME/../cminusminus/www/download

# ------------------------------------------------------------------ 
# recalculate dependencies
# make sure that generators are run first
# ------------------------------------------------------------------ 

$DEPEND:        $SCAN
                $OCAMLDEP $SCAN > $DEPEND

# ------------------------------------------------------------------ 
# include dependencies
# ------------------------------------------------------------------ 

<$DEPEND

