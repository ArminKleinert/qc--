% l2h macro module 1 <a href="#$1.html"><tt>#1.nw</tt></a>

% ------------------------------------------------------------------ 
\section{Runtime Module \texttt{Camlburg}}
% ------------------------------------------------------------------ 

The code genreated by module \module{Burg} relies of a few function that
are provided by its runtime system. All this code resides in this small
module and must be shipped with any generated code.

<<camlburg.mli>>=
(* $Id$ *)

type cost = int                         (* matching cost for a rule *)
type 'a nt =                            (* cost/action pair for a nonterm *)
    { cost : cost
    ; action : unit -> 'a; 
    } 
val inf_cost : int                      (* maximal cost *)
val infinity : 'a nt                    (* the least defined nt *)
val choice : 'a nt list -> 'a nt        (* find cheapest nt *)
val matches : 'a -> 'a -> int           (* cost function for literals *)
@

% ------------------------------------------------------------------ 
\subsection{Implementation}
% ------------------------------------------------------------------ 

<<camlburg.ml>>=
(* $Id$ *)

type cost = int

type 'a nt = 
    { cost:     cost
    ; action:   unit -> 'a
    }

let inf_cost    = max_int / 2
let infinity = 
    { cost = inf_cost
    ; action = (fun () -> assert false) 
    }

let min x y     = if x.cost < y.cost then x else y
let choice nts  = List.fold_left min (List.hd nts) (List.tl nts)
let matches x y = if x = y then 0 else inf_cost
@




