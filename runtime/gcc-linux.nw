% -*- mode: Noweb; noweb-code-mode: c-mode -*-
% $Id$

% ---------------------------------------------------------------------------
\section{Walking GCC-Linux Stack Frames}
% ---------------------------------------------------------------------------
This version of the gcc stack walker assumes that a frame pointer is
being used (no --fomit-frame-pointer). Every function stores the frame
pointer in [[EBP]], and this register is saved at the top of each
stack frame on entry.
<<gcc-linux.c>>=
#include "qc--runtime.h"
#include "pcmap.h"
#include <assert.h>
#include <stdio.h>

#define EBP 9 /* r[5] */
@
On initialization, the [[young_in_overflow]] pointer is the callee's
deallocation point.    Because the x86 uses a frame pointer, we don't
actually need this information.
<<gcc-linux.c>>=
void Cmm_init_c_frame(Cmm_Activation *a, char *young_in_overflow) {
  Cmm_Word ebp;
  assert(a->regs[EBP]);
  ebp = *a->regs[EBP];
  a->vfp = (char *) ebp;
  a->u.cwalk.tries = 0;   /* logging only */
}
extern struct cmm_activation_methods *Cmm_cmm_frame_methods;
<<gcc-linux.c>>=
@
I know how to restore EBP, but not the other regs.
The [[qc--]] client needs to kill all regs before calling a C function.
<<gcc-linux.c>>=
#define NOISY 0

int Cmm_c_change_activation(Cmm_Activation *a) {
  Cmm_Word callerebp;
  Cmm_Codeptr ra;
  pc_map_entry *entry;
  int i;

  assert(a->vfp != 0);   /* protect against an unexpected error */
  <<possibly shout about our departure, showing arguments>>
  callerebp = *(Cmm_Word *)a->vfp;
  <<possibly announce caller's ebp>>
  if (callerebp == 0) {
    <<possibly shout about finishing tries>>
    return 0;
  }
  for(i = 0; i < NUM_REGS; i++)
    a->regs[i] = NULL;
  a->regs[EBP] = (Cmm_Word*)a->vfp;  /* point to location of caller's EBP */
  ra = ((Cmm_Codeptr *)a->vfp)[1];
  a->pc = ra;  /* for debugging only */
  entry = Cmm_lookup_entry(ra);
  if (entry) {
    if (Cmm_is_thread_start_frame(entry, ra))
      return 0;  /* such a frame must not be seen */
    a->rtdata = entry;
    /* deallocation point = vfp + 8
       deallocation point = callervfp + entry->outalloc

       so  callervfp = vfp + 8 - entry-outalloc  */
    a->vfp += 8 - Cmm_as_offset(entry->outalloc);
    a->methods = Cmm_cmm_frame_methods;
  } else {
    a->vfp = (char *)callerebp;
  }
  return 1;
}
<<possibly shout about our departure, showing arguments>>=
#if NOISY
 {
  Cmm_Word *myebp = (Cmm_Word*) a->vfp;
  fprintf(stderr, "Leaving C activation; my ebp = %p, ra = %p, caller's EBP = %p\n",
          (void*)myebp, (void*)myebp[1], (void*)myebp[0]);
  for (i = 0; i < 3; i++) fprintf(stderr, "  arg[%d] = 0x%08x\n", i, myebp[i+2]);
 }
#endif
<<possibly announce caller's ebp>>=
#if 0
  fprintf(stderr, "walked to caller %%ebp == 0x%08x\n", callerebp);
#endif
<<possibly shout about finishing tries>>=
#if NOISY
    fprintf(stderr, "finished C walk with callerebp = 0x%08x, tries = %d\n",
            (unsigned)callerebp, a->u.cwalk.tries);
#endif
