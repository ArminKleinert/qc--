#
# $Id$
#
# This is the user's manual page for qc--(1). It is complemented by 
# the qc--internals(1) page for compiler hackers.
#
# For learn about Perl's POD format, refer to perlpod(1) and pod2man(1).
# The syntax of this file can be checked with podchecker(1).
#


=head1 NAME

qc-- - The Quick C-- Compiler

=head1 SYNOPSIS

B<qc--> [I<option> | I<file>] ... 

=head1 DESCRIPTION

    I have to find a way to typeset "qc--" correctly. Postponed for the
    moment. -- CL

B<qc--> is a compiler for the C-- language. It takes I<file> names as
arguments and compiles, assembles, and links the I<file> arguments into
an executable file (by default named C<a.out>). An I<option> has the
form C<->I<name> or I<name>C<=>I<value>, hence any argument with an
equal sign is treated as an I<option>.  Any other argument B<qc-->
regards as a I<file>.  

The B<qc--> compiler is controlled by a built-in Lua interpreter that
runs a compiled-in Lua program. By modifying the state of the
compiler or modifying the Lua program, a user can customize the
compiler. In fact, any option of the form I<name>C<=>I<value> updates a
variable in the Lua interpreter.  These aspects are documented in the
separate manual page qc--internals(1).

The treatment of a file depends on its suffix. The objective is to
compile each file such that in can be linked with all others into a
final executable.  If the suffix of a file is unrecognized, the file is
passed to the linker. 

=over 12

=item C<.c--> or C<.cmm>

C-- source file: compile, assemble, link.  A file C<file.c--> is taken
as a C-- source file. Unless I<options> specify otherwise, a C-- source
file is compiled to assembly code C<file.s> and assembled to an object
file C<file.o> that is linked with the object files derived from the
other I<file> arguments.

=item C<.o>

Object code file: link.  A file C<file.o> is considered an object file.
B<qc--> does not touch this file but passes it to the linker such that
it is linked with the other files from the command line.  

=item C<.a> or C<.so>

Archive file: link.  A file C<file.a> or C<file.so> is considered an
archive file that is passed untouched to the linker.

=item C<.s>

Assembler source: assemble, link. A file C<file.s> is taken as an
assembly source file. It is assembled to an object file C<file.o> that
is linked with the other files from the command line.


=item C<.lua>

Lua source file: interpret. A file C<file.lua> is taken as a Lua source
code file for the Lua interpreter built into the B<qc--> compiler. Such
a file is executed by the interpreter. See qc--internals(1) for details.

=back


If invoked with no I<file> argument, B<qc--> summarizes its options on
the standard error and exits with exit code C<1>.

B<qc--> removes intermediate files, like assembly files, unless options
specify otherwise. Linking is always the last stage, unless the B<-c> or
B<-S> flag suppresses it.

=head1 OPTIONS

B<qc--> processes options from left to right, and then all file name
arguments from left to right. 

=over 4

=item B<-c>

Compile to object code, do not link. Each C-- source (C<file.c-->) and
assembly file (C<file.s>) is compiled and assembled to an object file
(C<file.o>), but not linked. This option is incompatible with option
B<-S>.

=item B<-S>

Compile to assembly code, do not assemble or link. Each C-- source
C<file.c--> file is compiled to a corresponding C<file.s> assembly
file. No assembling or linking. This option is incompatible with option
B<-c>.

=item B<-o> I<output>

Name the output file I<output>.  If B<-c> or B<-S> is specified and
there is exactly  one  source  file,  this option  names  the object or
assembly file, respectively.  Otherwise, this  option  names  the  final
executable file generated  by  the  loader. If B<-o> is not used, the
output file defaults to C<a.out>.

=item B<-L>I<dir>

Add I<dir> to the library search path. This option can be repeated and
is passed to the linker. 

=item B<-l>I<name>

Add library I<name> to the list of libraries to be searched. This option
can be repeated is passed to the linker.

=item B<-v>

Print commands as they are executed. Commands include calls to all
external programs, like the assembler or linker.

=item B<-version>

Print version to stdout and stop with exit code C<0>. This option is
incompatible with any other option.

=item B<-help>

Summarize options to stdout and stop with exit code C<0>. This option is
incompatible with any other option.

=item I<var>B<=>I<value>

Assign the variable I<var> in B<qc-->'s Lua interpreter the new value
I<value>. Refer to qc--internals(1) for details.

=back

=head1 ENVIRONMENT

=over

=item TMP, TEMP, TMPDIR

The environment variables C<TMP>, C<TEMP>, and C<TMPDIR> are checked in
this order. The first one found to define a non-empty string defines
the path to the directory where temporary files are stored. Otherwise a
platform specific-default directory is used. 

=back

=head1 EXIT CODE

Upon successful executions, B<qc--> exists with exit code C<0>. If
B<qc--> finds an error in a source file or while processing command line
options, it exists with C<1>. Internal errors in the compiler lead to an
exit code of C<2>.


=head1 FILES

=over 20

=item I<file>C<.c-->, I<file>C<.cmm> 

C-- source file.

=item I<file>C<.o>

Object file.

=item I<file>C<.s>

Assembly source file.

=item I<file>C<.a>

Archive file (static library).

=item I<file>C<.so>

Archive file (dynamic library)

=item I<file>C<.lua>

Lua source code.

=item C<qc--.lua>

Startup file for Lua interpreter.

=item C<a.out>

Default file name for output file.

=item C</tmp>

Default directory for temporary files.

=back

=head1 SEE ALSO

http://www.cminusminus.org/,
http://www.lua.org/.

lua(1), ld(1), as(1), qc--internals(1)

=head1 BUGS

Report bugs to C<bugs@cminusminus.org>. Include a I<small> example that
allows us to reproduce the bug. The bug tracking system can be found at
http://www.cminusminus.org/qc--bugs/.

=head1 AUTHORS

Christian Lindig <lindig@eecs.harvard.edu>, 
Norman Ramsey <nr@eecs.harvard.edu>,
Daniel Damian <damian@eecs.harvard.edu>,
John Dias <dias@eecs.harvard.edu>,
Jonathan D. Eddy <eddy@fas.harvard.edu>,
Reuben Olinsky <olinsky@eecs.harvard.edu>,
Kevin Redwine <redwine@eecs.harvard.edu>.

=head1 VERSION

$Id$


