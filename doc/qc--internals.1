.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "QC--INTERNALS 1"
.TH QC--INTERNALS 1 "2004-10-13" "Version 20041015" "qc--"
.SH "NAME"
qc\-\-internals \- customizing the Quick C\-\- compiler
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBqc\*(--\fR [\fIoption\fR | \fIfile\fR] ... 
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBqc\*(--\fR is a compiler for the C\*(-- language. It takes \fIfiles\fR  as
arguments and compiles, assembles, and links the \fIfiles\fR into an
executable file.  The compiler is controlled by a built-in Lua
interpreter, running a Lua program. A user can manipulate the state of
the running interpreter or supply a new Lua program to customize
\&\fBqc\*(--\fR.
.PP
A command line option of the form \fIname\fR\f(CW\*(C`=\*(C'\fR\fIvalue\fR assigns \fIvalue\fR
to a variable \fIname\fR in the running interpreter. Both \fIname\fR and
\&\fIvalue\fR must follow the Lua syntax for variables and values. If not
noted otherwise, the Lua type of a \fIvalue\fR is \fIstring\fR. As a
convention, capitalized names denote Lua tables. 
.PP
Caveat: the Lua code controlling \fBqc\*(--\fR is in constant flux.  Anybody
dealing with options described here is assumed to know what he or she is
doing.
.SH "OPTIONS"
.IX Header "OPTIONS"
See the user's manual \fIqc\-\-\fR\|(1) for more options.
.IP "\fBbackend=\fR\fIbackend\fR" 4
.IX Item "backend=backend"
\&\fBqc\*(--\fR is a cross compiler; this option causes it to generate code for
\&\fIbackend\fR, where a \fIbackend\fR identifies an architecture/operating
system platform. By default, code for the actual platform is generated.
The following targets of type \f(CW\*(C`target\*(C'\fR are supported:
.RS 4
.ie n .IP """Backend.x86""" 20
.el .IP "\f(CWBackend.x86\fR" 20
.IX Item "Backend.x86"
\&\fIx\fR86 running GNU/Linux.
.ie n .IP """Backend.sparc""" 20
.el .IP "\f(CWBackend.sparc\fR" 20
.IX Item "Backend.sparc"
Sparc, running Solaris.
.ie n .IP """Backend.interp""" 20
.el .IP "\f(CWBackend.interp\fR" 20
.IX Item "Backend.interp"
The Quick C\*(-- interpreter.
.RE
.RS 4
.Sp
.Vb 2
\&    Lcc does not assemble or link when code for a non-native platform is
\&    generated. How should qc--(1) behave?
.Ve
.RE
.IP "\fBDebug.stack=1\fR" 4
.IX Item "Debug.stack=1"
Print diagnostic information about the composition of the stack frame.
.IP "\fBAs.path=\fR\fIpath\fR" 4
.IX Item "As.path=path"
Define an alternate path the assembler \fIas\fR\|(1). 
.IP "\fBAs.options\fR=\fIoptions\fR" 4
.IX Item "As.options=options"
Define options passed to the assembler. 
.IP "\fBLd.path=\fR\fIpath\fR" 4
.IX Item "Ld.path=path"
Define an alternate path for the linker \fIld\fR\|(1).
.IP "\fBLd.options\fR=\fIoptions\fR" 4
.IX Item "Ld.options=options"
Define options passed to the linker \fIld\fR\|(1). Note that some other options
like \fB\-L\fR and \fB\-l\fR are also passed to the linker.
.IP "\fBInterp.hashbang=\fR\fIstring\fR" 4
.IX Item "Interp.hashbang=string"
An executable for the qc\*(--\fIinterp\fR\|(1) interpreter calls the interpreter
using the Unix \f(CW\*(C`#!\*(C'\fR mechanism. This option defines, what goes into the
first line of an executable. The default is \f(CW\*(C`#! /usr/bin/env
qc\-\-interp\*(C'\fR.
.IP "\fBOptions.swap=1\fR" 4
.IX Item "Options.swap=1"
Pretend that each input program has exactly the opposite byte 
order than the one it claims. 
.IP "\fBOptions.validate=1\fR" 4
.IX Item "Options.validate=1"
Turn on validation that gives source-locations for C\*(-- constructs that
may not be translatable for the target machine.
.ie n .IP "\fIname\fR""=""\fR\fIvalue" 4
.el .IP "\fIname\fR\f(CW=\fR\fIvalue\fR" 4
.IX Item "name=value"
Assign Lua value \fIvalue\fR to the Lua variable \fIname\fR.
.IP "\fB\-e\fR \fIstatement\fR" 4
.IX Item "-e statement"
The Lua \fIstatement\fR is passed to the Lua interpreter and executed. This
allows to alter default settings in the interpreter or to inspect the
interpreter. 
.IP "\fB\-i\fR" 4
.IX Item "-i"
Start an interactive session with the Lua interpreter that reads from
stdin. The session allows to inspect the Lua interpreter; most useful
for debugging Lua code. 
.IP "\fB\-vv\fR" 4
.IX Item "-vv"
Don't execute calls to external tools, just print them. Useful to test
the driver and new command line options.
.IP "\fB\-pp\fR" 4
.IX Item "-pp"
Pretty print: do not compile, assemble, or link. Each \fBfile.c\*(--\fR source
file is pretty printed into \fBfile.pp\fR. The \fB\-o\fR option is honored.
.SH "LUA STARTUP"
.IX Header "LUA STARTUP"
.RS 4
The Lua interpreter built into \fBqc\*(--\fR controls the compiler. At startup
it tries to find the file \f(CW\*(C`qc\-\-.lua\*(C'\fR using a search path taken from the
environment variable \f(CW\*(C`QCMMLUAPATH\*(C'\fR.  If the environment variable is
undefined, the default is "\f(CW\*(C`:.:*\*(C'\fR".  A search path contains a list of
colon separated directories. Two directory names are special: the empty
directory refers to an implementation-dependent system-wide directory,
like \f(CW\*(C`/usr/local/lib/qc\-\-\*(C'\fR. The star \f(CW\*(C`*\*(C'\fR refers to a ``directory''
that is actually compiled into the \fBqc\*(--\fR executable.  With the default
search path (empty, dot, star), \fBqc\*(--\fR therefore looks first in the
system-wide directory for \f(CW\*(C`qc\-\-.lua\*(C'\fR, then in the current directory,
and then takes the built-in \f(CW\*(C`qc\-\-.lua\*(C'\fR. 
.Sp
To obtain a copy of the Lua startup script \f(CW\*(C`qc\-\-.lua\*(C'\fR, use the
following option: \f(CW\*(C`\-e 'write(Boot["qc\-\-.lua"])'\*(C'\fR. When the default
search path is used, a (modified) copy of \f(CW\*(C`qc\-\-.lua\*(C'\fR in the local
directory takes precedence over other built-in \f(CW\*(C`qc\-\-.lua\*(C'\fR and thus can
be used for experiments.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\s-1QCMMLUAPATH\s0" 4
.IX Item "QCMMLUAPATH"
Search path for Lua code. If undefined, the default search path is
\&\f(CW\*(C`:.:*\*(C'\fR.
.IP "\s-1QCDEBUG\s0" 4
.IX Item "QCDEBUG"
Strings that can be set to debug the compiler.
For a list, run \fBqc\*(-- \-e 'Debug.\f(BIexplain()\fB'\fR.
.RE
.RS 4
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://www.cminusminus.org/,
http://www.lua.org/.
.Sp
\&\fIqc\-\-\fR\|(1), qc\*(--\fIinterp\fR\|(1), \fIlua\fR\|(1), \fIld\fR\|(1), \fIas\fR\|(1).
.SH "BUGS"
.IX Header "BUGS"
Report bugs to \f(CW\*(C`bugs@cminusminus.org\*(C'\fR. Include a \fIsmall\fR example that
allows us to reproduce the bug. The bug tracking system can be found at
http://www.cminusminus.org/qc\*(--bugs/.
.SH "AUTHORS"
.IX Header "AUTHORS"
Daniel Damian <damian@eecs.harvard.edu>,
John Dias <dias@eecs.harvard.edu>,
Jonathan D. Eddy,
Paul Govereau <govereau@eecs.harvard.edu>,
Christian Lindig <lindig@eecs.harvard.edu>, 
Reuben Olinsky <olinsky@eecs.harvard.edu>,
Norman Ramsey <nr@eecs.harvard.edu>,
Kevin Redwine <redwine@eecs.harvard.edu>.
.SH "VERSION"
.IX Header "VERSION"
$Id$
