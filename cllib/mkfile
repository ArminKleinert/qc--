# ------------------------------------------------------------------ 
# $Id$ 
# ------------------------------------------------------------------ 

NAME =      cllib

# ------------------------------------------------------------------ 
# paths
# ------------------------------------------------------------------ 

TOP    =    ..
INTERP =    evaluating
DEPEND =    DEPEND.$INTERP

LIBDIR =    ../lib
BINDIR =    ../bin
MANDIR =    ../man

# ------------------------------------------------------------------ 
# (high level) virtual targets
# ------------------------------------------------------------------ 

HTML =          `echo *.nw       | sed 's/\.nw/.html/g;'`
INC  =          `echo *.nw       | sed 's/\.nw/.inc/g;'`
LIBCMX =        $NAME.cmxa
LIBCMO =        $NAME.cma

all:V:          $LIBCMO 
all.opt:V:      $LIBCMX
update:V:       $LIBDIR/$LIBCMO 
update.opt:V:   $LIBDIR/$LIBCMX

dvi:V:          $INC
html:V:         $HTML

test:VQ:
                echo "nothing to be done"

depend:V:       $DEPEND

# remove native code files
clean.opt:V:    
                rm -f *.cmx *.o
                rm -f $LIBCMX $NAME.a

# remove byte code and native code
clean:V:        clean.opt
                rm -f *.cmi *.cmo
                rm -f $LIBCMO 

# remove remaining derived file
clobber:V:      clean
                rm -f *.output
                rm -f rc_parse.ml rc_parse.mly 
                rm -f rc_scan.ml rc_scan.mll
                rm -f *.ml *.mli
                rm -f *.aux *.log *.dvi *.toc *.html
                rm -f $DEPEND


# ------------------------------------------------------------------ 
# rules and tools for OCaml
# ------------------------------------------------------------------ 

<../config/ocaml.mk
<../config/noweb.mk

# compiler flags used by the rules just included

PROFILE = -p
OCAMLC_FLAGS =  
OCAMLO_FLAGS = $PROFILE 

# ------------------------------------------------------------------ 
# important file sets
# ------------------------------------------------------------------ 

ML  =           lc.ml       \
                rc.ml       \
                rc_parse.ml \
                rc_scan.ml  \
                pc.ml       \
                pp.ml       \
                rc_ast.ml   \
                rx.ml       \
                srcmap.ml   \
		verbose.ml	\

MLI =           lc.mli     \
                pc.mli     \
                pc2.mli    \
                pp.mli     \
                rc.mli     \
                rc_ast.mli \
                rx.mli     \
                srcmap.mli \
		verbose.mli	\

SCAN =          $ML $MLI

CMO =           `echo $ML       | sed 's/\.ml/.cmo/g'`
CMX =           `echo $ML       | sed 's/\.ml/.cmx/g'`
OBJ =           `echo $ML       | sed 's/\.ml/.o/g'`

# ------------------------------------------------------------------ 
# build the libraries
# ------------------------------------------------------------------ 

$LIBCMO:        $CMO
		$OCAMLC $OCAMLC_FLAGS -a -o $target $prereq
                

$LIBCMX:	$CMX
		$OCAMLO $OCAMLO_FLAGS -a -o $target $prereq

# ------------------------------------------------------------------ 
# update hierarchy
# ------------------------------------------------------------------ 

$LIBDIR/$LIBCMO:    $LIBCMO dirs
		    for i in $LIBCMO *.mli *.cmi 
                    do
		        cmp -s $i $LIBDIR/$i || cp $i $LIBDIR 
		    done

$LIBDIR/$LIBCMX:    $LIBCMX dirs
		    for i in $LIBCMX $NAME.a *.mli *.cmi
                    do
		        cmp -s $i $LIBDIR/$i || cp $i $LIBDIR
		    done

dirs:VQ:
                    for i in $LIBDIR; do
                        if [ ! -d $i ]; then
                            echo "missing directory $i"
                            echo "invoke mk from the toplevel the first time"
                            echo "to create all directories"
                            false
                        fi
                    done    

# ------------------------------------------------------------------ 
# extra rules for cases not covered by noweb.mk
# ------------------------------------------------------------------ 

rc_parse.mly:   rc.nw
	        $NOTANGLE           -R$target $prereq > $target
rc_scan.mll:    rc.nw
	        $NOTANGLE           -R$target $prereq > $target
rc_ast.mli:     rc.nw
	        $NOTANGLE -L"$LINE" -R$target $prereq > $target
rc_ast.ml:      rc.nw
	        $NOTANGLE -L"$LINE" -R$target $prereq > $target
        

# ------------------------------------------------------------------ 
# recalculate dependencies
# make sure that generators are run first
# ------------------------------------------------------------------ 

$DEPEND: 	$SCAN
		$OCAMLDEP $SCAN > $DEPEND

# ------------------------------------------------------------------ 
# include dependencies
# ------------------------------------------------------------------ 

<$DEPEND

