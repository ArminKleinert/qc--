type token =
    STR of (string)
  | ID of (string)
  | BOOL of (bool)
  | FLOAT of (float)
  | INT of (int)
  | COMMA
  | EQUAL
  | TRUE
  | FALSE
  | EOF

open Parsing
# 2 "rc_parse.mly"
open Rc_ast 
(* Line 5, file rc_parse.ml *)
let yytransl_const = [|
  262 (* COMMA *);
  263 (* EQUAL *);
  264 (* TRUE *);
  265 (* FALSE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* STR *);
  258 (* ID *);
  259 (* BOOL *);
  260 (* FLOAT *);
  261 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\003\000\004\000\004\000\004\000\
\004\000\004\000\004\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\003\000\003\000\001\000\001\000\001\000\
\001\000\001\000\001\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\014\000\000\000\000\000\001\000\003\000\000\000\
\007\000\006\000\011\000\010\000\008\000\009\000\000\000\000\000\
\000\000\000\000\012\000\013\000"

let yydgoto = "\002\000\
\003\000\004\000\007\000\015\000\016\000"

let yysindex = "\255\255\
\000\000\000\000\000\000\001\000\255\254\000\000\000\000\003\255\
\000\000\000\000\000\000\000\000\000\000\000\000\007\255\008\255\
\003\255\003\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\002\000\003\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\248\255\000\000"

let yytablesize = 261
let yytable = "\001\000\
\006\000\004\000\005\000\009\000\010\000\008\000\011\000\012\000\
\019\000\020\000\013\000\014\000\017\000\018\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\004\000\005\000"

let yycheck = "\001\000\
\000\000\000\000\000\000\001\001\002\001\007\001\004\001\005\001\
\017\000\018\000\008\001\009\001\006\001\006\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\002\001\002\001"

let yynames_const = "\
  COMMA\000\
  EQUAL\000\
  TRUE\000\
  FALSE\000\
  EOF\000\
  "

let yynames_block = "\
  STR\000\
  ID\000\
  BOOL\000\
  FLOAT\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'rclines) in
    Obj.repr((
# 19 "rc_parse.mly"
                                                  _1            ) : Rc_ast.rcdict))
; (fun parser_env ->
    Obj.repr((
# 21 "rc_parse.mly"
                                                  empty         ) : 'rclines))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : 'rclines) in
    let _2 = (peek_val parser_env 0 : 'rcline) in
    Obj.repr((
# 22 "rc_parse.mly"
                                                  let (id,rc) = _2 in
                                                  add id rc _1
                                                ) : 'rclines))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : string) in
    let _3 = (peek_val parser_env 0 : 'value) in
    Obj.repr((
# 26 "rc_parse.mly"
                                                  (_1,_3)       ) : 'rcline))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : string) in
    let _3 = (peek_val parser_env 0 : 'values) in
    Obj.repr((
# 27 "rc_parse.mly"
                                                  (_1,RClist(List.rev _3))  ) : 'rcline))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr((
# 29 "rc_parse.mly"
                                                  RCstr(_1)     ) : 'value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr((
# 30 "rc_parse.mly"
                                                  RCstr(_1)     ) : 'value))
; (fun parser_env ->
    Obj.repr((
# 31 "rc_parse.mly"
                                                  RCbool(true)  ) : 'value))
; (fun parser_env ->
    Obj.repr((
# 32 "rc_parse.mly"
                                                  RCbool(false) ) : 'value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : int) in
    Obj.repr((
# 33 "rc_parse.mly"
                                                  RCint(_1)     ) : 'value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : float) in
    Obj.repr((
# 34 "rc_parse.mly"
                                                  RCfloat(_1)   ) : 'value))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'value) in
    let _3 = (peek_val parser_env 0 : 'value) in
    Obj.repr((
# 36 "rc_parse.mly"
                                                  [_3  ; _1]    ) : 'values))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'values) in
    let _3 = (peek_val parser_env 0 : 'value) in
    Obj.repr((
# 37 "rc_parse.mly"
                                                   _3 :: _1     ) : 'values))
(* Entry rcfile *)
; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))
|]
let yytables =
  { actions=yyact;
    transl_const=yytransl_const;
    transl_block=yytransl_block;
    lhs=yylhs;
    len=yylen;
    defred=yydefred;
    dgoto=yydgoto;
    sindex=yysindex;
    rindex=yyrindex;
    gindex=yygindex;
    tablesize=yytablesize;
    table=yytable;
    check=yycheck;
    error_function=parse_error;
    names_const=yynames_const;
    names_block=yynames_block }
let rcfile (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : Rc_ast.rcdict)
