# 
# Lua interpreter - library and standalone binary
#
# ------------------------------------------------------------------ 
# call 'mk depend' after sources have been checked out of CVS!
# ------------------------------------------------------------------ 
#
# To add a new module to the library:
# (1) add it to LIBML		if it is a .ml  file
# (2) add it to LIBMLI		if it is a .mli file	
#
# If your module must be scanned for dependencies but is not covered
# by (1) or (2), add it to SCAN
#
# If you have trouble with depdencies check LIBML, LIBMLI, and SCAN.
# Rebuild dependencies with "mk depend".


TOP    =        ..
LIBDIR =        ../lib

<../config/ocaml.mk
<../config/noweb.mk

OCAMLC_FLAGS = 	-I $LIBDIR -g
OCAMLO_FLAGS =	-I $LIBDIR

# ------------------------------------------------------------------ 
# high level (virtual) targets
# ------------------------------------------------------------------ 

all:V: 		lua.cma oclua
all.opt:V:      lua.cmx oclua.opt

update:V:	$LIBDIR/lua.cma 
update.opt:V:   $LIBDIR/lua.cmxa

depend:V:	DEPEND

doc:V:		lua.ps

dvi \
html:VQ:
                echo "nothing to be done for $target"     
clean:V:
		rm -f *.cmi *.cmo *.ml *.mli *.mly *.mll *.cmx *.o
		rm -f *.aux *.log *.dvi *.toc *.tex *.inc
		rm -f luaparsex.output tspecl lspecl *.icn
		rm -f *~

clobber:V:	clean
		rm -f oclua oclua.opt *.cma *.cmxa *.a 
		rm -f lua.ps


# ------------------------------------------------------------------ 
# api documentation
# ------------------------------------------------------------------ 

lua.tex: lua.nw
		noweave -x lua.nw > lua.tex

# ------------------------------------------------------------------ 
# lua library
# ------------------------------------------------------------------ 
# The order of files determines the link order. No file must use any
# of its successors

LIBML = 	luahash.ml	\
		luafloat.ml	\
		luavalue.ml	\
		luaast.ml	\
		luaparser.ml	\
		luascanner.ml	\
		luabaselib.ml	\
		lualib.ml		\
		luainterp.ml	\
		luarun.ml	\
		lua.ml          \
		luastrlib.ml	\
		luamathlib.ml	\
		luaiolib.ml	\

LIBCMO =	`echo $LIBML | sed 's/\.ml/.cmo/g'`
LIBCMX =	`echo $LIBML | sed 's/\.ml/.cmx/g'`
LIBOBJ =	`echo $LIBML | sed 's/\.ml/.o/g'`

# order does not matter here - so keep it alphabetical
# we wan't easily deduce LIBMLI from LIBML because there might be
# interfaces with no implementation and vice versa.

LIBMLI = 	lua.mli		\
		luaast.mli	\
		luabaselib.mli	\
		luainterp.mli	\
		luaiolib.mli	\
		lualib.mli	\
		luamathlib.mli	\
		luaparser.mli	\
		luarun.mli	\
		luastrlib.mli	\
		luavalue.mli	\
		luahash.mli	\

LIBCMI =	`echo $LIBMLI | sed 's/\.mli/.cmi/g'`


lua.cma:	$LIBCMO $LIBCMI
		$OCAMLC $OCAMLC_FLAGS -a -o $target $LIBCMO

# this target also creates *.o files and a lua.a library
lua.cmxa:	$LIBCMX	$LIBCMI 
		$OCAMLO $OCAMLO_FLAGS -a -o $target $LIBCMX


# copy library and interfaces to $LIBDIR. Note that lua.a is
# implicitly built when lua.cmxa is built.

$LIBDIR/lua.cma: lua.cma $LIBMLI $LIBCMI dirs
		for f in lua.cma $LIBMLI $LIBCMI
		do
		    cmp -s $f $LIBDIR/$f || cp $f $LIBDIR
		done

$LIBDIR/lua.cmxa: lua.cmxa $LIBMLI $LIBCMI dirs
		for f in lua.cmxa lua.a $LIBMLI $LIBCMI
		do
		    cmp -s $f $LIBDIR/$f || cp $f $LIBDIR
		done

# ------------------------------------------------------------------ 
# lua standalone interpreter (for tests)
# ------------------------------------------------------------------ 

ML =    	main.ml 
CMO =		`echo $ML | sed 's/\.ml/.cmo/g'`
CMX =		`echo $ML | sed 's/\.ml/.cmx/g'`


oclua: 		lua.cma $CMO 
		$OCAMLC $OCAMLC_FLAGS -o $target unix.cma cllib.cma $prereq 

oclua.opt: 	lua.cmxa $CMX
		$OCAMLO $OCAMLO_FLAGS -o $target unix.cmxa cllib.cmxa $prereq 

# ------------------------------------------------------------------ 
# Source files
# The following files are scanned for dependencies. We have to list them
# here to make sure they get extracted from Noweb files and generated if
# neccessary.

SCAN = 		$LIBML $LIBMLI main.ml

src:V: $SCAN

# ------------------------------------------------------------------ 
# tests
# ------------------------------------------------------------------ 

# 09 needs I/O library -- dofile needs to return nil on error
TEST=03 04 05 06 07 08 10 12 02

test:V: 	oclua.opt
		for i in $TEST; do ./$prereq test/$i.lua; done	

# ------------------------------------------------------------------ 
# lua scanner and parser. We need some extra rules to extract sources
# from noweb files. 

luaparsex.mly: luasyntax.nw
	[ -r $target ] && chmod +w $target
	notangle -Rluaparser.mly $prereq | 
        sed "s/','/COMMA/g;	\
            s/'{'/LBRA/g;	\
            s/'}'/RBRA/g;	\
            s/'<'/LT/g;		\
            s/'>'/GT/g;		\
            s/':'/COLON/g;	\
            s/';'/SEMI/g;	\
            s/'\\^'/HAT/g;	\
            s/'\\*'/STAR/g;	\
            s@'/'@SLASH@g;	\
            s/'('/LPAR/g;	\
            s/')'/RPAR/g;	\
            s/'='/GETS/g;	\
            s/'+'/PLUS/g;	\
            s/'-'/MINUS/g;	\
            s/'\\.'/DOT/g;	\
            s/'\\['/LSQ/g;	\
            s/'\\]'/RSQ/g" > $target
	chmod -w $target

luascanner.mll: luasyntax.nw
	notangle -R$target $prereq > $target

luafloat.mll: luavalue.nw
	notangle -R$target $prereq > $target

luaparser.ml: luaparsex.ml
	cp $prereq $target

luaparser.mli: luaparsex.mli luasyntax.nw
	(sed '/^val /,$d' luaparsex.mli; notangle -L"$LINE" -R$target luasyntax.nw) > $target


# ------------------------------------------------------------------ 

dirs:VQ:
	for i in $LIBDIR; do
	    if [ ! -d $i ]; then
		echo "missing directory $i"
		echo "invoke mk from the toplevel the first time"
		echo "to create all directories"
		false
	    fi
	done    

DEPEND: $SCAN
	$OCAMLDEP $prereq > $target


<DEPEND
