% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
% Grades     ::=    "%%Grades:" Quality Importance Urgency
% Quality    ::=    A|B|C|D|E
% Importance ::=    Central|Subsystem|Peripheral
% Urgency    ::=    Immediate|Soon|Later
%
% Example (at beginning of line): %%Grades: B Central Soon

<<luamathlib.mli>>=
module M : Lua.Lib.BARECODE
<<math builtins>>=
let rfloat = V.result V.float
let float = V.float
let math_builtins =
  [ "abs",   V.efunc (float **-> rfloat)            abs_float
  ; "acos",  V.efunc (float **-> rfloat)            acos
  ; "asin",  V.efunc (float **-> rfloat)            asin
  ; "atan",  V.efunc (float **-> rfloat)            atan
  ; "atan2", V.efunc (float **-> float **-> rfloat) atan2
  ; "ceil",  V.efunc (float **-> rfloat)            ceil
  ; "cos",   V.efunc (float **-> rfloat)            cos
  ; "floor", V.efunc (float **-> rfloat)            floor
  ; "log",   V.efunc (float **-> rfloat)            log
  ; "log10", V.efunc (float **-> rfloat)            log10
  ; "max",   V.efunc (float **-> float **-> rfloat) max
  ; "min",   V.efunc (float **-> float **-> rfloat) min
  ; "mod",   V.efunc (float **-> float **-> rfloat) mod_float
  ; "sin",   V.efunc (float **-> rfloat)            sin
  ; "sqrt",  V.efunc (float **-> rfloat)            sqrt
  ; "tan",   V.efunc (float **-> rfloat)            tan
  ; "random", V.caml_func (fun _ -> [V.Number (Random.float 1.0)])
  ; "randomseed", V.efunc (V.int **-> V.runit)        Random.init
  ] 
@ 
<<random test cases for paper>>=


; "rev", 
  let efunc = V.efunc in let list = V.list in let value = V.value in let result = V.result in
  efunc (list value **-> result (list value)) List.rev

@ 
<<luamathlib.ml>>=
module M (I : Lua.Lib.CORE) = struct
  module V = I.V
  let ( **-> ) = V.( **-> )
  <<math builtins>>
  let init g = I.register_globals math_builtins g; Lua.Lib.StringList.empty
end
