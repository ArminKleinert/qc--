% -*- mode: Noweb; noweb-code-mode: caml-mode -*-

\section{Main loop for testing a standalone interpreter}

<<main.ml>>=
module Lib = Lualib
module Io = Luaiolib
module Str = Luastrlib
module Math = Luamathlib
module Basics = Luabaselib
module Parser = Luaparser
module Lua = Luainterp

module A = struct
  module Make = Lua.Make
  <<stuff>>
end

module B = struct
  module Make = Newinterp.Make 
  <<stuff>>
end
<<stuff>>=
module I = Basics.Add (Parser.MakeStandard)
             (Make (Lib.AddBare (Lib.AddBare (Io.M) (Str.M)) (Math.M)))
module V = I.Value
let lex map buf = Luascanner.token buf map
let state = I.state()
let dumpstate = ref false
let showresults =
  let rec loop n = function
    | h :: t -> print_string "Result "; print_int n; print_string " = ";
                print_endline (V.to_string h); loop (n+1) t
    | [] -> ()
  in loop 1
let run infile = ignore (I.dofile state infile)
let run_interactive infile =
  let rec loop n pfx =
    let line = input_line infile in
    if String.length line > 0 && String.get line (String.length line - 1) = '\\' then
      loop n (pfx ^ String.sub line 0 (String.length line - 1) ^ "\n")
    else
      begin
        ignore (I.dostring state (pfx ^ line ^ "\n"));
        flush stdout; flush stderr;
        loop (n+1) ""
      end
  in  try loop 1 "" with End_of_file -> ()
let rec args = function
  | "-dump" :: a's -> (dumpstate := true; args a's)
  | "-new"  :: a's -> args a's
  | [] -> run_interactive stdin
  | files -> List.iter run files

@ 
<<main.ml>>=
let args = if Sys.argv.(1) = "-new" then B.args else A.args
let _ = args (List.tl (Array.to_list (Sys.argv)))

(*
let _ = if !dumpstate then
  begin
    print_endline "final state: ";
    Luahash.iter (fun k v -> print_string "  ";
      print_string (V.to_string k); print_string " |-> ";
      print_endline (V.to_string v)) state.V.globals
  end
*)
