% -*- mode: Noweb; noweb-code-mode: caml-mode -*-
<<builtins.mli>>=
module Make (I : Lua.INTERP) : sig
  val do_lexbuf : I.state -> Lexing.lexbuf -> I.value list
  val dostring  : I.state -> string -> I.value list
  val dofile    : I.state -> string -> I.value list
  val builtins : (string * I.value) list
end
<<builtins.ml>>=
module Make (I : Lua.INTERP) = struct
  module P = Parse.Make (I.Ast)
  module V = I.Value
  <<builtins toplevel>>
  let ( **-> ) = V.( **-> )
  let builtins =

    [ "dofile", (V.func (V.string **-> V.values)).V.embed dofile
    ; "dostring", (V.func (V.string **-> V.values)).V.embed dostring
        (* should catch Sys_error and turn into an error fallback... *)
    ; "tostring", (V.pfunc (V.value **-> V.result V.string)).V.embed V.to_string
    ; "print",    V.Function (fun g args ->
                              List.iter (fun x -> print_endline (V.to_string x)) args;
                              flush stdout;
                              [])
    ; "tonumber", (V.pfunc (V.float **-> V.result V.float)).V.embed (fun x -> x)
    ; "type",     (V.pfunc (V.value **-> V.result V.string)).V.embed
                  (function
                    | V.Nil -> "nil"
                    | V.Number _ -> "number"
                    | V.String _ -> "string"
                    | V.Table _  -> "table"
                    | V.Function _ -> "function"
                    | V.Userdata _ -> "userdata")
    ; "assert",  (V.func (V.value **-> V.runit)).V.embed
                 (fun g -> function V.Nil -> I.error g "assertion failed!"
                                  | _ -> ())
    ; "error",   (V.func (V.string **-> V.runit)).V.embed I.error
    ] 
end
<<builtins toplevel>>=
let lex map buf = Scan.token buf map
let do_lexbuf g buf =
  let map = Srcmap.mk () in
  let _ = Srcmap.sync map 0 ("any", 1, 1) in
  let chunks =
    try P.chunks (lex map) buf
    with Parsing.Parse_error ->
      (prerr_endline "syntax error"; []) in
  let pgm = I.compile (chunks) in
  try pgm g with
  | I.Error s -> (prerr_endline "Lua interpreter halted with error"; [])
  | I.Value.Projection (v, w) -> (prerr_endline ("error projecting to " ^ w); [])
let dostring g s = 
  I.with_stack ("dostring('" ^ s ^ "')") g (do_lexbuf g) (Lexing.from_string s)

let dofile g infile =
  try
    let f = match infile with "-" -> stdin | _ -> open_in infile in
    let close () = if infile <> "-" then close_in f else () in
    try 
      let answer = I.with_stack ("dofile('" ^ infile ^ "')") g
                     (do_lexbuf g) (Lexing.from_channel f)
      in  (close(); answer)
    with e -> (close (); raise e)
  with Sys_error msg ->
    I.fallback "error" g [V.String ("dofile: System error " ^ msg)]
@ 
