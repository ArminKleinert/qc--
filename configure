#! /usr/bin/perl -w
#
# $Id$
#
# Work in progress!
#
# This is the configure script for Quick C--. Run as ./confire
# to configure the compilation process. The script assumes that 
# mk(1) from qc--/mk is already installed.

#
# search (file, dir, dir, dir, ..), call as search(file, @dirs)
# search for file in @dirs and return, full path, if found, and ""
# otherwise.
#

sub search {
    my $file = shift (@_);

    while ($f = shift (@_)) {
        my $x = "$f/$file";
        if (-f $x) { 
            return $x; 
        }
    }
    return "";
}

#
# compile and run a small C program to find out about architecture
#

sub runtest {
    unless ($cc) { die "no C compiler to run test @_" }
    
    my $cmd   = "$cc -o tst @_ || exit 100";
    my $rc    = system($cmd);
    my $signo = $rc & 127;
    if ($signo) { die "killed by signal $signo" }
    if ($rc >> 8 eq 100) { die "cannot run '$cmd'; no C compiler?" }
    
    # run test and capture output
    my $out = `./tst` || die "$!";
    return $out;
}

#
# important search paths
#

@path       = split(/:/,$ENV{PATH});
@include    = ( "/usr/include"
              , "/usr/local/include"
              , "/usr/include/lua40"
              , "/usr/local/include/lua40"
              , "/usr/local/lua/include"
              , "/usr/include/lua"
              );
@libs       = ( "/lib"
              , "/usr/lib"
              , "/usr/local/lib"
              );

#
# check for various executables and versions
#

$ocamlc     = search("ocamlc",@path);
$ocamlv     = (`$ocamlc -v` =~ /(\d\.\d\d)/) && $1;
$notangle   = search("notangle",@path); 
$cc         = search("gcc",@path)||search ("cc",@path) || search ("lcc",@path);
$mk         = search("mk",@path); 
$latex      = search("latex",@path); 
$pod2html   = search("pod2html",@path);
$lua_h      = search("lua.h", @include);
$lualib_h   = search("lualib.h", @include);
$liblua     = search("liblua.a", @libs) || search("liblua40.a", @libs);
$liblualib  = search("liblualib.a", @libs) || search("liblualib40.a", @libs);
$luav       = $lua_h && `grep LUA_VERSION $lua_h` =~ /Lua (\d.\d)/ && $1;  

#
# run some tests ...
# 

chdir("config/aux") || die "$!";
my $result;

# .. endianness
$result = runtest("endian.c");
if    ($result =~ /big/)    { $endian = "big"    } 
elsif ($result =~ /little/) { $endian = "little" } 
else  { die "cannot determine endianess; 64 bit machine?" }    

# .. wordsize
$sizes = runtest("sizes.c");


print <<EOF;    
    Results
    
    ocamlc:         $ocamlc
    OCaml Version:  $ocamlv
    notangle:       $notangle
    cc:             $cc
    mk:             $mk
    latex:          $latex
    pod2html:       $pod2html
    lua.h:          $lua_h
    lualib.h:       $lualib_h
    liblua:         $liblua
    liblualib:      $liblualib
    Lua Version:    $luav
    Endianness:     $endian
    Sizes:          $sizes
EOF
    
